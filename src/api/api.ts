/* tslint:disable */
/* eslint-disable */
/**
 * Give Away API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'accountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'passwordHash'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'passwordSalt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'fullname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'verifiedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'passwordResetToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'resetTokenExpires'?: string | null;
    /**
     * 
     * @type {Roles}
     * @memberof Account
     */
    'role'?: Roles;
    /**
     * 
     * @type {AccountStatus}
     * @memberof Account
     */
    'status'?: AccountStatus;
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    'balance'?: number;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'createdDate'?: string;
}


/**
 * 
 * @export
 * @interface AccountResponse
 */
export interface AccountResponse {
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    'accountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    'fullname'?: string | null;
    /**
     * 
     * @type {Roles}
     * @memberof AccountResponse
     */
    'role'?: Roles;
    /**
     * 
     * @type {number}
     * @memberof AccountResponse
     */
    'balance'?: number;
    /**
     * 
     * @type {AccountStatus}
     * @memberof AccountResponse
     */
    'status'?: AccountStatus;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    'shopId'?: string | null;
}


/**
 * 
 * @export
 * @interface AccountResponsePaginationResponse
 */
export interface AccountResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof AccountResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof AccountResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccountResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof AccountResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AccountResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AccountResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AccountResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AccountResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<AccountResponse>}
     * @memberof AccountResponsePaginationResponse
     */
    'items'?: Array<AccountResponse> | null;
}
/**
 * 
 * @export
 * @interface AccountResponseResult
 */
export interface AccountResponseResult {
    /**
     * 
     * @type {AccountResponse}
     * @memberof AccountResponseResult
     */
    'data'?: AccountResponse;
    /**
     * 
     * @type {ResultStatus}
     * @memberof AccountResponseResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccountResponseResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const AccountStatus = {
    Active: 'Active',
    Inactive: 'Inactive',
    NotVerified: 'NotVerified'
} as const;

export type AccountStatus = typeof AccountStatus[keyof typeof AccountStatus];


/**
 * 
 * @export
 * @interface AddFashionItemForConsignByShop
 */
export interface AddFashionItemForConsignByShop {
    /**
     * 
     * @type {string}
     * @memberof AddFashionItemForConsignByShop
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddFashionItemForConsignByShop
     */
    'note'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddFashionItemForConsignByShop
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AddFashionItemForConsignByShop
     */
    'confirmedPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof AddFashionItemForConsignByShop
     */
    'condition'?: number;
    /**
     * 
     * @type {string}
     * @memberof AddFashionItemForConsignByShop
     */
    'categoryId'?: string | null;
    /**
     * 
     * @type {SizeType}
     * @memberof AddFashionItemForConsignByShop
     */
    'size'?: SizeType;
    /**
     * 
     * @type {string}
     * @memberof AddFashionItemForConsignByShop
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddFashionItemForConsignByShop
     */
    'brand'?: string | null;
    /**
     * 
     * @type {GenderType}
     * @memberof AddFashionItemForConsignByShop
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {Array<string>}
     * @memberof AddFashionItemForConsignByShop
     */
    'images'?: Array<string> | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const AddressType = {
    Home: 'Home',
    Business: 'Business'
} as const;

export type AddressType = typeof AddressType[keyof typeof AddressType];


/**
 * 
 * @export
 * @interface ApprovalRefundRequest
 */
export interface ApprovalRefundRequest {
    /**
     * 
     * @type {RefundStatus}
     * @memberof ApprovalRefundRequest
     */
    'status'?: RefundStatus;
    /**
     * 
     * @type {number}
     * @memberof ApprovalRefundRequest
     */
    'refundPercentage'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApprovalRefundRequest
     */
    'description'?: string | null;
}


/**
 * 
 * @export
 * @interface ApproveConsignSaleRequest
 */
export interface ApproveConsignSaleRequest {
    /**
     * 
     * @type {ConsignSaleStatus}
     * @memberof ApproveConsignSaleRequest
     */
    'status'?: ConsignSaleStatus;
}


/**
 * 
 * @export
 * @interface Auction
 */
export interface Auction {
    /**
     * 
     * @type {string}
     * @memberof Auction
     */
    'auctionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Auction
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Auction
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Auction
     */
    'endDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof Auction
     */
    'depositFee'?: number;
    /**
     * 
     * @type {Shop}
     * @memberof Auction
     */
    'shop'?: Shop;
    /**
     * 
     * @type {string}
     * @memberof Auction
     */
    'shopId'?: string;
    /**
     * 
     * @type {number}
     * @memberof Auction
     */
    'stepIncrement'?: number;
    /**
     * 
     * @type {IndividualAuctionFashionItem}
     * @memberof Auction
     */
    'individualAuctionFashionItem'?: IndividualAuctionFashionItem;
    /**
     * 
     * @type {string}
     * @memberof Auction
     */
    'individualAuctionFashionItemId'?: string;
    /**
     * 
     * @type {AuctionStatus}
     * @memberof Auction
     */
    'status'?: AuctionStatus;
    /**
     * 
     * @type {string}
     * @memberof Auction
     */
    'createdDate'?: string;
}


/**
 * 
 * @export
 * @interface AuctionDeposit
 */
export interface AuctionDeposit {
    /**
     * 
     * @type {string}
     * @memberof AuctionDeposit
     */
    'auctionDepositId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuctionDeposit
     */
    'createdDate'?: string;
    /**
     * 
     * @type {Member}
     * @memberof AuctionDeposit
     */
    'member'?: Member;
    /**
     * 
     * @type {string}
     * @memberof AuctionDeposit
     */
    'memberId'?: string;
    /**
     * 
     * @type {Auction}
     * @memberof AuctionDeposit
     */
    'auction'?: Auction;
    /**
     * 
     * @type {string}
     * @memberof AuctionDeposit
     */
    'auctionId'?: string;
    /**
     * 
     * @type {Transaction}
     * @memberof AuctionDeposit
     */
    'transaction'?: Transaction;
    /**
     * 
     * @type {string}
     * @memberof AuctionDeposit
     */
    'transactionId'?: string;
}
/**
 * 
 * @export
 * @interface AuctionDepositDetailResponse
 */
export interface AuctionDepositDetailResponse {
    /**
     * 
     * @type {string}
     * @memberof AuctionDepositDetailResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuctionDepositDetailResponse
     */
    'auctionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuctionDepositDetailResponse
     */
    'memberId'?: string;
    /**
     * 
     * @type {MemberDetailResponse}
     * @memberof AuctionDepositDetailResponse
     */
    'member'?: MemberDetailResponse;
    /**
     * 
     * @type {number}
     * @memberof AuctionDepositDetailResponse
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuctionDepositDetailResponse
     */
    'transactionId'?: string;
    /**
     * 
     * @type {TransactionDetailResponse}
     * @memberof AuctionDepositDetailResponse
     */
    'transaction'?: TransactionDetailResponse;
    /**
     * 
     * @type {string}
     * @memberof AuctionDepositDetailResponse
     */
    'createdDate'?: string;
}
/**
 * 
 * @export
 * @interface AuctionDepositListResponse
 */
export interface AuctionDepositListResponse {
    /**
     * 
     * @type {string}
     * @memberof AuctionDepositListResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuctionDepositListResponse
     */
    'auctionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuctionDepositListResponse
     */
    'depositDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuctionDepositListResponse
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuctionDepositListResponse
     */
    'memberId'?: string;
}
/**
 * 
 * @export
 * @interface AuctionDepositListResponsePaginationResponse
 */
export interface AuctionDepositListResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof AuctionDepositListResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuctionDepositListResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuctionDepositListResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuctionDepositListResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof AuctionDepositListResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AuctionDepositListResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuctionDepositListResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AuctionDepositListResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AuctionDepositListResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<AuctionDepositListResponse>}
     * @memberof AuctionDepositListResponsePaginationResponse
     */
    'items'?: Array<AuctionDepositListResponse> | null;
}
/**
 * 
 * @export
 * @interface AuctionDetailResponse
 */
export interface AuctionDetailResponse {
    /**
     * 
     * @type {string}
     * @memberof AuctionDetailResponse
     */
    'auctionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuctionDetailResponse
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuctionDetailResponse
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuctionDetailResponse
     */
    'endDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuctionDetailResponse
     */
    'depositFee'?: number;
    /**
     * 
     * @type {AuctionStatus}
     * @memberof AuctionDetailResponse
     */
    'status'?: AuctionStatus;
    /**
     * 
     * @type {number}
     * @memberof AuctionDetailResponse
     */
    'stepIncrement'?: number;
    /**
     * 
     * @type {AuctionItemDetailResponse}
     * @memberof AuctionDetailResponse
     */
    'auctionItem'?: AuctionItemDetailResponse;
}


/**
 * 
 * @export
 * @interface AuctionItemCategory
 */
export interface AuctionItemCategory {
    /**
     * 
     * @type {string}
     * @memberof AuctionItemCategory
     */
    'categoryId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuctionItemCategory
     */
    'categoryName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AuctionItemCategory
     */
    'level'?: number;
}
/**
 * 
 * @export
 * @interface AuctionItemDetailResponse
 */
export interface AuctionItemDetailResponse {
    /**
     * 
     * @type {string}
     * @memberof AuctionItemDetailResponse
     */
    'itemId'?: string;
    /**
     * 
     * @type {FashionItemType}
     * @memberof AuctionItemDetailResponse
     */
    'fashionItemType'?: FashionItemType;
    /**
     * 
     * @type {number}
     * @memberof AuctionItemDetailResponse
     */
    'sellingPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuctionItemDetailResponse
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuctionItemDetailResponse
     */
    'note'?: string | null;
    /**
     * 
     * @type {FashionItemStatus}
     * @memberof AuctionItemDetailResponse
     */
    'status'?: FashionItemStatus;
    /**
     * 
     * @type {string}
     * @memberof AuctionItemDetailResponse
     */
    'condition'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuctionItemDetailResponse
     */
    'brand'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuctionItemDetailResponse
     */
    'color'?: string | null;
    /**
     * 
     * @type {SizeType}
     * @memberof AuctionItemDetailResponse
     */
    'size'?: SizeType;
    /**
     * 
     * @type {GenderType}
     * @memberof AuctionItemDetailResponse
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {string}
     * @memberof AuctionItemDetailResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AuctionItemDetailResponse
     */
    'initialPrice'?: number | null;
    /**
     * 
     * @type {ShopAuctionDetailResponse}
     * @memberof AuctionItemDetailResponse
     */
    'shop'?: ShopAuctionDetailResponse;
    /**
     * 
     * @type {Array<FashionItemImage>}
     * @memberof AuctionItemDetailResponse
     */
    'images'?: Array<FashionItemImage> | null;
    /**
     * 
     * @type {AuctionItemCategory}
     * @memberof AuctionItemDetailResponse
     */
    'category'?: AuctionItemCategory;
}


/**
 * 
 * @export
 * @interface AuctionListResponse
 */
export interface AuctionListResponse {
    /**
     * 
     * @type {string}
     * @memberof AuctionListResponse
     */
    'auctionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuctionListResponse
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuctionListResponse
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuctionListResponse
     */
    'endDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuctionListResponse
     */
    'depositFee'?: number;
    /**
     * 
     * @type {AuctionStatus}
     * @memberof AuctionListResponse
     */
    'status'?: AuctionStatus;
    /**
     * 
     * @type {string}
     * @memberof AuctionListResponse
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuctionListResponse
     */
    'shopId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuctionListResponse
     */
    'auctionItemId'?: string;
}


/**
 * 
 * @export
 * @interface AuctionListResponsePaginationResponse
 */
export interface AuctionListResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof AuctionListResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuctionListResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuctionListResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuctionListResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof AuctionListResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AuctionListResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuctionListResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AuctionListResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AuctionListResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<AuctionListResponse>}
     * @memberof AuctionListResponsePaginationResponse
     */
    'items'?: Array<AuctionListResponse> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AuctionStatus = {
    Pending: 'Pending',
    Rejected: 'Rejected',
    Approved: 'Approved',
    OnGoing: 'OnGoing',
    Finished: 'Finished'
} as const;

export type AuctionStatus = typeof AuctionStatus[keyof typeof AuctionStatus];


/**
 * 
 * @export
 * @interface BankAccountsListResponse
 */
export interface BankAccountsListResponse {
    /**
     * 
     * @type {string}
     * @memberof BankAccountsListResponse
     */
    'bankAccountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankAccountsListResponse
     */
    'bankName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BankAccountsListResponse
     */
    'bankAccountNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BankAccountsListResponse
     */
    'bankAccountName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BankAccountsListResponse
     */
    'bankLogo'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof BankAccountsListResponse
     */
    'isDefault'?: boolean;
}
/**
 * 
 * @export
 * @interface Bid
 */
export interface Bid {
    /**
     * 
     * @type {string}
     * @memberof Bid
     */
    'bidId'?: string;
    /**
     * 
     * @type {number}
     * @memberof Bid
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Bid
     */
    'createdDate'?: string;
    /**
     * 
     * @type {Auction}
     * @memberof Bid
     */
    'auction'?: Auction;
    /**
     * 
     * @type {string}
     * @memberof Bid
     */
    'auctionId'?: string;
    /**
     * 
     * @type {Member}
     * @memberof Bid
     */
    'member'?: Member;
    /**
     * 
     * @type {Order}
     * @memberof Bid
     */
    'order'?: Order;
    /**
     * 
     * @type {string}
     * @memberof Bid
     */
    'memberId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Bid
     */
    'isWinning'?: boolean;
}
/**
 * 
 * @export
 * @interface BidDetailResponse
 */
export interface BidDetailResponse {
    /**
     * 
     * @type {string}
     * @memberof BidDetailResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BidDetailResponse
     */
    'auctionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BidDetailResponse
     */
    'memberId'?: string;
    /**
     * 
     * @type {number}
     * @memberof BidDetailResponse
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof BidDetailResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BidDetailResponse
     */
    'isWinning'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BidDetailResponse
     */
    'nextAmount'?: number;
}
/**
 * 
 * @export
 * @interface BidListResponse
 */
export interface BidListResponse {
    /**
     * 
     * @type {string}
     * @memberof BidListResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BidListResponse
     */
    'auctionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BidListResponse
     */
    'memberId'?: string;
    /**
     * 
     * @type {number}
     * @memberof BidListResponse
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof BidListResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BidListResponse
     */
    'isWinning'?: boolean;
}
/**
 * 
 * @export
 * @interface BidListResponsePaginationResponse
 */
export interface BidListResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof BidListResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof BidListResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof BidListResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof BidListResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof BidListResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BidListResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof BidListResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BidListResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BidListResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<BidListResponse>}
     * @memberof BidListResponsePaginationResponse
     */
    'items'?: Array<BidListResponse> | null;
}
/**
 * 
 * @export
 * @interface CartItem
 */
export interface CartItem {
    /**
     * 
     * @type {string}
     * @memberof CartItem
     */
    'itemId'?: string;
}
/**
 * 
 * @export
 * @interface CartRequest
 */
export interface CartRequest {
    /**
     * 
     * @type {PaymentMethod}
     * @memberof CartRequest
     */
    'paymentMethod'?: PaymentMethod;
    /**
     * 
     * @type {string}
     * @memberof CartRequest
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof CartRequest
     */
    'ghnDistrictId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CartRequest
     */
    'ghnWardCode'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CartRequest
     */
    'ghnProvinceId'?: number | null;
    /**
     * 
     * @type {AddressType}
     * @memberof CartRequest
     */
    'addressType'?: AddressType;
    /**
     * 
     * @type {string}
     * @memberof CartRequest
     */
    'recipientName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CartRequest
     */
    'phone'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CartRequest
     */
    'shippingFee'?: number;
    /**
     * 
     * @type {number}
     * @memberof CartRequest
     */
    'discount'?: number;
    /**
     * 
     * @type {Array<CartItem>}
     * @memberof CartRequest
     */
    'cartItems'?: Array<CartItem> | null;
}


/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'categoryId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'parentId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'level'?: number;
    /**
     * 
     * @type {Category}
     * @memberof Category
     */
    'parent'?: Category;
    /**
     * 
     * @type {Array<MasterFashionItem>}
     * @memberof Category
     */
    'masterFashionItems'?: Array<MasterFashionItem> | null;
    /**
     * 
     * @type {CategoryStatus}
     * @memberof Category
     */
    'status'?: CategoryStatus;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'createdDate'?: string;
}


/**
 * 
 * @export
 * @interface CategoryLeavesResponse
 */
export interface CategoryLeavesResponse {
    /**
     * 
     * @type {string}
     * @memberof CategoryLeavesResponse
     */
    'shopId'?: string | null;
    /**
     * 
     * @type {Array<CategoryTreeNode>}
     * @memberof CategoryLeavesResponse
     */
    'categoryLeaves'?: Array<CategoryTreeNode> | null;
}
/**
 * 
 * @export
 * @interface CategoryListResult
 */
export interface CategoryListResult {
    /**
     * 
     * @type {Array<Category>}
     * @memberof CategoryListResult
     */
    'data'?: Array<Category> | null;
    /**
     * 
     * @type {ResultStatus}
     * @memberof CategoryListResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof CategoryListResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface CategoryResult
 */
export interface CategoryResult {
    /**
     * 
     * @type {Category}
     * @memberof CategoryResult
     */
    'data'?: Category;
    /**
     * 
     * @type {ResultStatus}
     * @memberof CategoryResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof CategoryResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const CategoryStatus = {
    Available: 'Available',
    Unavailable: 'Unavailable',
    Special: 'Special'
} as const;

export type CategoryStatus = typeof CategoryStatus[keyof typeof CategoryStatus];


/**
 * 
 * @export
 * @interface CategoryTreeNode
 */
export interface CategoryTreeNode {
    /**
     * 
     * @type {string}
     * @memberof CategoryTreeNode
     */
    'categoryId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryTreeNode
     */
    'parentId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CategoryTreeNode
     */
    'level'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryTreeNode
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<CategoryTreeNode>}
     * @memberof CategoryTreeNode
     */
    'children'?: Array<CategoryTreeNode> | null;
}
/**
 * 
 * @export
 * @interface CategoryTreeResult
 */
export interface CategoryTreeResult {
    /**
     * 
     * @type {string}
     * @memberof CategoryTreeResult
     */
    'shopId'?: string | null;
    /**
     * 
     * @type {Array<CategoryTreeNode>}
     * @memberof CategoryTreeResult
     */
    'categories'?: Array<CategoryTreeNode> | null;
}
/**
 * 
 * @export
 * @interface ChangePasswordRequest
 */
export interface ChangePasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'currentPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'newPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'confirmNewPassword': string;
}
/**
 * 
 * @export
 * @interface CompleteWithdrawResponse
 */
export interface CompleteWithdrawResponse {
    /**
     * 
     * @type {string}
     * @memberof CompleteWithdrawResponse
     */
    'withdrawId'?: string;
    /**
     * 
     * @type {WithdrawStatus}
     * @memberof CompleteWithdrawResponse
     */
    'status'?: WithdrawStatus;
    /**
     * 
     * @type {number}
     * @memberof CompleteWithdrawResponse
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof CompleteWithdrawResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompleteWithdrawResponse
     */
    'memberId'?: string;
}


/**
 * 
 * @export
 * @interface ConsignSale
 */
export interface ConsignSale {
    /**
     * 
     * @type {string}
     * @memberof ConsignSale
     */
    'consignSaleId'?: string;
    /**
     * 
     * @type {ConsignSaleType}
     * @memberof ConsignSale
     */
    'type'?: ConsignSaleType;
    /**
     * 
     * @type {string}
     * @memberof ConsignSale
     */
    'consignSaleCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSale
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsignSale
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSale
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {Shop}
     * @memberof ConsignSale
     */
    'shop'?: Shop;
    /**
     * 
     * @type {string}
     * @memberof ConsignSale
     */
    'shopId'?: string;
    /**
     * 
     * @type {Account}
     * @memberof ConsignSale
     */
    'member'?: Account;
    /**
     * 
     * @type {string}
     * @memberof ConsignSale
     */
    'memberId'?: string | null;
    /**
     * 
     * @type {ConsignSaleStatus}
     * @memberof ConsignSale
     */
    'status'?: ConsignSaleStatus;
    /**
     * 
     * @type {number}
     * @memberof ConsignSale
     */
    'totalPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConsignSale
     */
    'soldPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConsignSale
     */
    'consignorReceivedAmount'?: number;
    /**
     * 
     * @type {Transaction}
     * @memberof ConsignSale
     */
    'transaction'?: Transaction;
    /**
     * 
     * @type {string}
     * @memberof ConsignSale
     */
    'consignorName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSale
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSale
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSale
     */
    'email'?: string | null;
    /**
     * 
     * @type {ConsignSaleMethod}
     * @memberof ConsignSale
     */
    'consignSaleMethod'?: ConsignSaleMethod;
    /**
     * 
     * @type {Array<ConsignSaleLineItem>}
     * @memberof ConsignSale
     */
    'consignSaleLineItems'?: Array<ConsignSaleLineItem> | null;
}


/**
 * 
 * @export
 * @interface ConsignSaleDetailedResponse
 */
export interface ConsignSaleDetailedResponse {
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleDetailedResponse
     */
    'consignSaleId'?: string;
    /**
     * 
     * @type {ConsignSaleType}
     * @memberof ConsignSaleDetailedResponse
     */
    'type'?: ConsignSaleType;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleDetailedResponse
     */
    'consignSaleCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleDetailedResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleDetailedResponse
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleDetailedResponse
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleDetailedResponse
     */
    'shopId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleDetailedResponse
     */
    'memberId'?: string | null;
    /**
     * 
     * @type {ConsignSaleStatus}
     * @memberof ConsignSaleDetailedResponse
     */
    'status'?: ConsignSaleStatus;
    /**
     * 
     * @type {ConsignSaleMethod}
     * @memberof ConsignSaleDetailedResponse
     */
    'consignSaleMethod'?: ConsignSaleMethod;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleDetailedResponse
     */
    'totalPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleDetailedResponse
     */
    'soldPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleDetailedResponse
     */
    'memberReceivedAmount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleDetailedResponse
     */
    'consginer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleDetailedResponse
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleDetailedResponse
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleDetailedResponse
     */
    'email'?: string | null;
}


/**
 * 
 * @export
 * @interface ConsignSaleDetailedResponsePaginationResponse
 */
export interface ConsignSaleDetailedResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleDetailedResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleDetailedResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleDetailedResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConsignSaleDetailedResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleDetailedResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleDetailedResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleDetailedResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ConsignSaleDetailedResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConsignSaleDetailedResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<ConsignSaleDetailedResponse>}
     * @memberof ConsignSaleDetailedResponsePaginationResponse
     */
    'items'?: Array<ConsignSaleDetailedResponse> | null;
}
/**
 * 
 * @export
 * @interface ConsignSaleDetailedResponsePaginationResponseResult
 */
export interface ConsignSaleDetailedResponsePaginationResponseResult {
    /**
     * 
     * @type {ConsignSaleDetailedResponsePaginationResponse}
     * @memberof ConsignSaleDetailedResponsePaginationResponseResult
     */
    'data'?: ConsignSaleDetailedResponsePaginationResponse;
    /**
     * 
     * @type {ResultStatus}
     * @memberof ConsignSaleDetailedResponsePaginationResponseResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConsignSaleDetailedResponsePaginationResponseResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface ConsignSaleDetailedResponseResult
 */
export interface ConsignSaleDetailedResponseResult {
    /**
     * 
     * @type {ConsignSaleDetailedResponse}
     * @memberof ConsignSaleDetailedResponseResult
     */
    'data'?: ConsignSaleDetailedResponse;
    /**
     * 
     * @type {ResultStatus}
     * @memberof ConsignSaleDetailedResponseResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConsignSaleDetailedResponseResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface ConsignSaleLineItem
 */
export interface ConsignSaleLineItem {
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItem
     */
    'consignSaleLineItemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItem
     */
    'consignSaleId'?: string;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleLineItem
     */
    'dealPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItem
     */
    'note'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleLineItem
     */
    'confirmedPrice'?: number | null;
    /**
     * 
     * @type {ConsignSale}
     * @memberof ConsignSaleLineItem
     */
    'consignSale'?: ConsignSale;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItem
     */
    'productName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItem
     */
    'brand'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItem
     */
    'color'?: string | null;
    /**
     * 
     * @type {SizeType}
     * @memberof ConsignSaleLineItem
     */
    'size'?: SizeType;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItem
     */
    'condition'?: string | null;
    /**
     * 
     * @type {GenderType}
     * @memberof ConsignSaleLineItem
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItem
     */
    'createdDate'?: string;
    /**
     * 
     * @type {IndividualFashionItem}
     * @memberof ConsignSaleLineItem
     */
    'individualFashionItem'?: IndividualFashionItem;
    /**
     * 
     * @type {Array<Image>}
     * @memberof ConsignSaleLineItem
     */
    'images'?: Array<Image> | null;
}


/**
 * 
 * @export
 * @interface ConsignSaleLineItemDetailedResponse
 */
export interface ConsignSaleLineItemDetailedResponse {
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemDetailedResponse
     */
    'consignSaleLineItemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemDetailedResponse
     */
    'consignSaleId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemDetailedResponse
     */
    'consignSaleCode'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleLineItemDetailedResponse
     */
    'dealPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemDetailedResponse
     */
    'note'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleLineItemDetailedResponse
     */
    'confirmedPrice'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemDetailedResponse
     */
    'productName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemDetailedResponse
     */
    'brand'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemDetailedResponse
     */
    'color'?: string | null;
    /**
     * 
     * @type {SizeType}
     * @memberof ConsignSaleLineItemDetailedResponse
     */
    'size'?: SizeType;
    /**
     * 
     * @type {GenderType}
     * @memberof ConsignSaleLineItemDetailedResponse
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemDetailedResponse
     */
    'condition'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemDetailedResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {FashionItemStatus}
     * @memberof ConsignSaleLineItemDetailedResponse
     */
    'fashionItemStatus'?: FashionItemStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConsignSaleLineItemDetailedResponse
     */
    'images'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface ConsignSaleLineItemsListResponse
 */
export interface ConsignSaleLineItemsListResponse {
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemsListResponse
     */
    'consignSaleLineItemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemsListResponse
     */
    'consignSaleId'?: string;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleLineItemsListResponse
     */
    'dealPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemsListResponse
     */
    'note'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleLineItemsListResponse
     */
    'confirmedPrice'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemsListResponse
     */
    'productName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemsListResponse
     */
    'brand'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemsListResponse
     */
    'color'?: string | null;
    /**
     * 
     * @type {SizeType}
     * @memberof ConsignSaleLineItemsListResponse
     */
    'size'?: SizeType;
    /**
     * 
     * @type {GenderType}
     * @memberof ConsignSaleLineItemsListResponse
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemsListResponse
     */
    'condition'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleLineItemsListResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConsignSaleLineItemsListResponse
     */
    'images'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface ConsignSaleLineItemsListResponseResult
 */
export interface ConsignSaleLineItemsListResponseResult {
    /**
     * 
     * @type {ConsignSaleLineItemsListResponse}
     * @memberof ConsignSaleLineItemsListResponseResult
     */
    'data'?: ConsignSaleLineItemsListResponse;
    /**
     * 
     * @type {ResultStatus}
     * @memberof ConsignSaleLineItemsListResponseResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConsignSaleLineItemsListResponseResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface ConsignSaleListResponse
 */
export interface ConsignSaleListResponse {
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleListResponse
     */
    'consignSaleId'?: string;
    /**
     * 
     * @type {ConsignSaleType}
     * @memberof ConsignSaleListResponse
     */
    'type'?: ConsignSaleType;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleListResponse
     */
    'consignSaleCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleListResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleListResponse
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleListResponse
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleListResponse
     */
    'shopId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleListResponse
     */
    'memberId'?: string | null;
    /**
     * 
     * @type {ConsignSaleStatus}
     * @memberof ConsignSaleListResponse
     */
    'status'?: ConsignSaleStatus;
    /**
     * 
     * @type {ConsignSaleMethod}
     * @memberof ConsignSaleListResponse
     */
    'consignSaleMethod'?: ConsignSaleMethod;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleListResponse
     */
    'totalPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleListResponse
     */
    'soldPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleListResponse
     */
    'memberReceivedAmount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleListResponse
     */
    'consginor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleListResponse
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleListResponse
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleListResponse
     */
    'email'?: string | null;
}


/**
 * 
 * @export
 * @interface ConsignSaleListResponsePaginationResponse
 */
export interface ConsignSaleListResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleListResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleListResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleListResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConsignSaleListResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ConsignSaleListResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleListResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConsignSaleListResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ConsignSaleListResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConsignSaleListResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<ConsignSaleListResponse>}
     * @memberof ConsignSaleListResponsePaginationResponse
     */
    'items'?: Array<ConsignSaleListResponse> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ConsignSaleMethod = {
    Online: 'Online',
    Offline: 'Offline'
} as const;

export type ConsignSaleMethod = typeof ConsignSaleMethod[keyof typeof ConsignSaleMethod];


/**
 * 
 * @export
 * @enum {string}
 */

export const ConsignSaleStatus = {
    Pending: 'Pending',
    AwaitDelivery: 'AwaitDelivery',
    Received: 'Received',
    OnSale: 'OnSale',
    Completed: 'Completed',
    Rejected: 'Rejected',
    Cancelled: 'Cancelled'
} as const;

export type ConsignSaleStatus = typeof ConsignSaleStatus[keyof typeof ConsignSaleStatus];


/**
 * 
 * @export
 * @enum {string}
 */

export const ConsignSaleType = {
    ConsignedForSale: 'ConsignedForSale',
    ConsignedForAuction: 'ConsignedForAuction',
    ForSale: 'ForSale'
} as const;

export type ConsignSaleType = typeof ConsignSaleType[keyof typeof ConsignSaleType];


/**
 * 
 * @export
 * @interface Coordinate
 */
export interface Coordinate {
    /**
     * 
     * @type {number}
     * @memberof Coordinate
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof Coordinate
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof Coordinate
     */
    'z'?: number;
    /**
     * 
     * @type {number}
     * @memberof Coordinate
     */
    'm'?: number;
    /**
     * 
     * @type {Coordinate}
     * @memberof Coordinate
     */
    'coordinateValue'?: Coordinate;
    /**
     * 
     * @type {boolean}
     * @memberof Coordinate
     */
    'isValid'?: boolean;
}
/**
 * 
 * @export
 * @interface CoordinateSequence
 */
export interface CoordinateSequence {
    /**
     * 
     * @type {number}
     * @memberof CoordinateSequence
     */
    'dimension'?: number;
    /**
     * 
     * @type {number}
     * @memberof CoordinateSequence
     */
    'measures'?: number;
    /**
     * 
     * @type {number}
     * @memberof CoordinateSequence
     */
    'spatial'?: number;
    /**
     * 
     * @type {Ordinates}
     * @memberof CoordinateSequence
     */
    'ordinates'?: Ordinates;
    /**
     * 
     * @type {boolean}
     * @memberof CoordinateSequence
     */
    'hasZ'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoordinateSequence
     */
    'hasM'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CoordinateSequence
     */
    'zOrdinateIndex'?: number;
    /**
     * 
     * @type {number}
     * @memberof CoordinateSequence
     */
    'mOrdinateIndex'?: number;
    /**
     * 
     * @type {Coordinate}
     * @memberof CoordinateSequence
     */
    'first'?: Coordinate;
    /**
     * 
     * @type {Coordinate}
     * @memberof CoordinateSequence
     */
    'last'?: Coordinate;
    /**
     * 
     * @type {number}
     * @memberof CoordinateSequence
     */
    'count'?: number;
}


/**
 * 
 * @export
 * @interface CoordinateSequenceFactory
 */
export interface CoordinateSequenceFactory {
    /**
     * 
     * @type {Ordinates}
     * @memberof CoordinateSequenceFactory
     */
    'ordinates'?: Ordinates;
}


/**
 * 
 * @export
 * @interface CreateAuctionDepositRequest
 */
export interface CreateAuctionDepositRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateAuctionDepositRequest
     */
    'memberId': string;
}
/**
 * 
 * @export
 * @interface CreateAuctionRequest
 */
export interface CreateAuctionRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateAuctionRequest
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateAuctionRequest
     */
    'shopId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAuctionRequest
     */
    'auctionItemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAuctionRequest
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAuctionRequest
     */
    'endTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateAuctionRequest
     */
    'stepIncrementPercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateAuctionRequest
     */
    'depositFee'?: number;
}
/**
 * 
 * @export
 * @interface CreateBankAccountRequest
 */
export interface CreateBankAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateBankAccountRequest
     */
    'bankName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateBankAccountRequest
     */
    'bankLogo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBankAccountRequest
     */
    'bankAccountName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateBankAccountRequest
     */
    'bankAccountNumber': string;
}
/**
 * 
 * @export
 * @interface CreateBankAccountResponse
 */
export interface CreateBankAccountResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateBankAccountResponse
     */
    'bankAccountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBankAccountResponse
     */
    'bankAccountName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBankAccountResponse
     */
    'bankAccountNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBankAccountResponse
     */
    'bankName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBankAccountResponse
     */
    'memberId'?: string;
}
/**
 * 
 * @export
 * @interface CreateBidRequest
 */
export interface CreateBidRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateBidRequest
     */
    'memberId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateBidRequest
     */
    'amount'?: number;
}
/**
 * 
 * @export
 * @interface CreateCategoryRequest
 */
export interface CreateCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateCategoryRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateConsignDetailRequest
 */
export interface CreateConsignDetailRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateConsignDetailRequest
     */
    'note'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateConsignDetailRequest
     */
    'dealPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateConsignDetailRequest
     */
    'productName'?: string | null;
    /**
     * 
     * @type {GenderType}
     * @memberof CreateConsignDetailRequest
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {string}
     * @memberof CreateConsignDetailRequest
     */
    'condition'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateConsignDetailRequest
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateConsignDetailRequest
     */
    'brand'?: string | null;
    /**
     * 
     * @type {SizeType}
     * @memberof CreateConsignDetailRequest
     */
    'size'?: SizeType;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateConsignDetailRequest
     */
    'imageUrls'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface CreateConsignSaleByShopRequest
 */
export interface CreateConsignSaleByShopRequest {
    /**
     * 
     * @type {ConsignSaleType}
     * @memberof CreateConsignSaleByShopRequest
     */
    'type'?: ConsignSaleType;
    /**
     * 
     * @type {string}
     * @memberof CreateConsignSaleByShopRequest
     */
    'consigner'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateConsignSaleByShopRequest
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateConsignSaleByShopRequest
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateConsignSaleByShopRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {Array<AddFashionItemForConsignByShop>}
     * @memberof CreateConsignSaleByShopRequest
     */
    'fashionItemForConsigns'?: Array<AddFashionItemForConsignByShop> | null;
}


/**
 * 
 * @export
 * @interface CreateConsignSaleRequest
 */
export interface CreateConsignSaleRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateConsignSaleRequest
     */
    'consignorName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateConsignSaleRequest
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof CreateConsignSaleRequest
     */
    'address': string;
    /**
     * 
     * @type {ConsignSaleType}
     * @memberof CreateConsignSaleRequest
     */
    'type': ConsignSaleType;
    /**
     * 
     * @type {string}
     * @memberof CreateConsignSaleRequest
     */
    'shopId': string;
    /**
     * 
     * @type {Array<CreateConsignDetailRequest>}
     * @memberof CreateConsignSaleRequest
     */
    'consignDetailRequests': Array<CreateConsignDetailRequest>;
}


/**
 * 
 * @export
 * @interface CreateFeedbackRequest
 */
export interface CreateFeedbackRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateFeedbackRequest
     */
    'memberId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateFeedbackRequest
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface CreateIndividualItemRequest
 */
export interface CreateIndividualItemRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateIndividualItemRequest
     */
    'condition'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateIndividualItemRequest
     */
    'retailPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateIndividualItemRequest
     */
    'color'?: string | null;
    /**
     * 
     * @type {SizeType}
     * @memberof CreateIndividualItemRequest
     */
    'size'?: SizeType;
    /**
     * 
     * @type {string}
     * @memberof CreateIndividualItemRequest
     */
    'note'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateIndividualItemRequest
     */
    'sellingPrice'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateIndividualItemRequest
     */
    'images'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface CreateIndividualItemRequestForConsign
 */
export interface CreateIndividualItemRequestForConsign {
    /**
     * 
     * @type {string}
     * @memberof CreateIndividualItemRequestForConsign
     */
    'masterItemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateIndividualItemRequestForConsign
     */
    'condition'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateIndividualItemRequestForConsign
     */
    'retailPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateIndividualItemRequestForConsign
     */
    'color'?: string | null;
    /**
     * 
     * @type {SizeType}
     * @memberof CreateIndividualItemRequestForConsign
     */
    'size'?: SizeType;
    /**
     * 
     * @type {string}
     * @memberof CreateIndividualItemRequestForConsign
     */
    'note'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateIndividualItemRequestForConsign
     */
    'images'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface CreateInquiryRequest
 */
export interface CreateInquiryRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateInquiryRequest
     */
    'message'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateInquiryResponse
 */
export interface CreateInquiryResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateInquiryResponse
     */
    'inquiryId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateInquiryResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateInquiryResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateInquiryResponse
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateInquiryResponse
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateInquiryResponse
     */
    'fullname'?: string | null;
    /**
     * 
     * @type {InquiryStatus}
     * @memberof CreateInquiryResponse
     */
    'inquiryStatus'?: InquiryStatus;
    /**
     * 
     * @type {string}
     * @memberof CreateInquiryResponse
     */
    'memberId'?: string;
}


/**
 * 
 * @export
 * @interface CreateMasterItemForConsignRequest
 */
export interface CreateMasterItemForConsignRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateMasterItemForConsignRequest
     */
    'masterItemCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateMasterItemForConsignRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateMasterItemForConsignRequest
     */
    'brand'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateMasterItemForConsignRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateMasterItemForConsignRequest
     */
    'categoryId'?: string;
    /**
     * 
     * @type {GenderType}
     * @memberof CreateMasterItemForConsignRequest
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateMasterItemForConsignRequest
     */
    'images'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface CreateMasterItemRequest
 */
export interface CreateMasterItemRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateMasterItemRequest
     */
    'masterItemCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateMasterItemRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateMasterItemRequest
     */
    'brand'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateMasterItemRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateMasterItemRequest
     */
    'categoryId'?: string;
    /**
     * 
     * @type {GenderType}
     * @memberof CreateMasterItemRequest
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {number}
     * @memberof CreateMasterItemRequest
     */
    'stockCount'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateMasterItemRequest
     */
    'images'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateMasterItemRequest
     */
    'shopId'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface CreateOrderRequest
 */
export interface CreateOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateOrderRequest
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderRequest
     */
    'recipientName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderRequest
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateOrderRequest
     */
    'itemIds'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface CreateRefundRequest
 */
export interface CreateRefundRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateRefundRequest
     */
    'orderLineItemId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateRefundRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateRefundRequest
     */
    'images'?: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof CreateRefundRequest
     */
    'refundPercentage'?: number;
}
/**
 * 
 * @export
 * @interface CreateShopRequest
 */
export interface CreateShopRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateShopRequest
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof CreateShopRequest
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof CreateShopRequest
     */
    'wardCode': string;
    /**
     * 
     * @type {number}
     * @memberof CreateShopRequest
     */
    'districtId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateShopRequest
     */
    'provinceId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateShopRequest
     */
    'staffId': string;
}
/**
 * 
 * @export
 * @interface CreateShopResponse
 */
export interface CreateShopResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateShopResponse
     */
    'shopId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateShopResponse
     */
    'shopCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateShopResponse
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateShopResponse
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateShopResponse
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateShopResponse
     */
    'staffId'?: string;
}
/**
 * 
 * @export
 * @interface CreateStaffAccountRequest
 */
export interface CreateStaffAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateStaffAccountRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateStaffAccountRequest
     */
    'fullname': string;
    /**
     * 
     * @type {string}
     * @memberof CreateStaffAccountRequest
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof CreateStaffAccountRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof CreateStaffAccountRequest
     */
    'confirmPassword': string;
    /**
     * 
     * @type {string}
     * @memberof CreateStaffAccountRequest
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof CreateStaffAccountRequest
     */
    'shopPhone': string;
}
/**
 * 
 * @export
 * @interface CreateWithdrawRequest
 */
export interface CreateWithdrawRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateWithdrawRequest
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof CreateWithdrawRequest
     */
    'bank': string;
    /**
     * 
     * @type {string}
     * @memberof CreateWithdrawRequest
     */
    'bankAccountNumber': string;
    /**
     * 
     * @type {string}
     * @memberof CreateWithdrawRequest
     */
    'bankAccountName': string;
}
/**
 * 
 * @export
 * @interface CreateWithdrawResponse
 */
export interface CreateWithdrawResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateWithdrawResponse
     */
    'withdrawId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateWithdrawResponse
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateWithdrawResponse
     */
    'memberId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWithdrawResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {WithdrawStatus}
     * @memberof CreateWithdrawResponse
     */
    'status'?: WithdrawStatus;
    /**
     * 
     * @type {string}
     * @memberof CreateWithdrawResponse
     */
    'bankAccountNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateWithdrawResponse
     */
    'bankAccountName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateWithdrawResponse
     */
    'bank'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateWithdrawResponse
     */
    'amountLeft'?: number;
}


/**
 * 
 * @export
 * @interface DeleteBankAccountResponse
 */
export interface DeleteBankAccountResponse {
    /**
     * 
     * @type {string}
     * @memberof DeleteBankAccountResponse
     */
    'bankAccountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteBankAccountResponse
     */
    'bankName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeleteBankAccountResponse
     */
    'bankAccountName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeleteBankAccountResponse
     */
    'bankAccountNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeleteBankAccountResponse
     */
    'memberId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DeleteBankAccountResponse
     */
    'isDefault'?: boolean;
}
/**
 * 
 * @export
 * @interface DeliveryListResponse
 */
export interface DeliveryListResponse {
    /**
     * 
     * @type {string}
     * @memberof DeliveryListResponse
     */
    'addressId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeliveryListResponse
     */
    'recipientName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeliveryListResponse
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeliveryListResponse
     */
    'residence'?: string | null;
    /**
     * 
     * @type {AddressType}
     * @memberof DeliveryListResponse
     */
    'addressType'?: AddressType;
    /**
     * 
     * @type {number}
     * @memberof DeliveryListResponse
     */
    'ghnDistrictId'?: number;
    /**
     * 
     * @type {number}
     * @memberof DeliveryListResponse
     */
    'ghnWardCode'?: number;
    /**
     * 
     * @type {number}
     * @memberof DeliveryListResponse
     */
    'ghnProvinceId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DeliveryListResponse
     */
    'accountName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DeliveryListResponse
     */
    'isDefault'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DeliveryListResponse
     */
    'createdDate'?: string;
}


/**
 * 
 * @export
 * @interface DeliveryListResponseListResult
 */
export interface DeliveryListResponseListResult {
    /**
     * 
     * @type {Array<DeliveryListResponse>}
     * @memberof DeliveryListResponseListResult
     */
    'data'?: Array<DeliveryListResponse> | null;
    /**
     * 
     * @type {ResultStatus}
     * @memberof DeliveryListResponseListResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof DeliveryListResponseListResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface DeliveryListResponseResult
 */
export interface DeliveryListResponseResult {
    /**
     * 
     * @type {DeliveryListResponse}
     * @memberof DeliveryListResponseResult
     */
    'data'?: DeliveryListResponse;
    /**
     * 
     * @type {ResultStatus}
     * @memberof DeliveryListResponseResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof DeliveryListResponseResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface DeliveryRequest
 */
export interface DeliveryRequest {
    /**
     * 
     * @type {string}
     * @memberof DeliveryRequest
     */
    'recipientName': string;
    /**
     * 
     * @type {string}
     * @memberof DeliveryRequest
     */
    'phone': string;
    /**
     * 
     * @type {AddressType}
     * @memberof DeliveryRequest
     */
    'addressType': AddressType;
    /**
     * 
     * @type {number}
     * @memberof DeliveryRequest
     */
    'ghnProvinceId': number;
    /**
     * 
     * @type {number}
     * @memberof DeliveryRequest
     */
    'ghnDistrictId': number;
    /**
     * 
     * @type {number}
     * @memberof DeliveryRequest
     */
    'ghnWardCode': number;
    /**
     * 
     * @type {string}
     * @memberof DeliveryRequest
     */
    'residence': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const Dimension = {
    Point: 'Point',
    Curve: 'Curve',
    Surface: 'Surface',
    Collapse: 'Collapse',
    Dontcare: 'Dontcare',
    True: 'True',
    False: 'False'
} as const;

export type Dimension = typeof Dimension[keyof typeof Dimension];


/**
 * 
 * @export
 * @interface Envelope
 */
export interface Envelope {
    /**
     * 
     * @type {boolean}
     * @memberof Envelope
     */
    'isNull'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'diameter'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'minX'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'maxX'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'minY'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'maxY'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'area'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'minExtent'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'maxExtent'?: number;
    /**
     * 
     * @type {Coordinate}
     * @memberof Envelope
     */
    'centre'?: Coordinate;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ErrorCode = {
    UnverifiedAccount: 'UnverifiedAccount',
    AuctionClosed: 'AuctionClosed',
    BankAccountNotSet: 'BankAccountNotSet',
    ScheduledTimeOverlapped: 'ScheduledTimeOverlapped',
    AuctionNotPending: 'AuctionNotPending',
    WithdrawNotFound: 'WithdrawNotFound',
    DuplicateEmail: 'DuplicateEmail',
    DuplicatePhoneNumber: 'DuplicatePhoneNumber',
    UnauthorizedPayment: 'UnauthorizedPayment',
    MismatchPaymentMethod: 'MismatchPaymentMethod',
    PointPackageNotFound: 'PointPackageNotFound',
    ExternalServiceError: 'ExternalServiceError',
    Unauthorized: 'Unauthorized',
    DeserializationError: 'DeserializationError',
    UnknownError: 'UnknownError',
    NetworkError: 'NetworkError',
    ServerError: 'ServerError',
    InvalidInput: 'InvalidInput',
    NotFound: 'NotFound',
    UnsupportedShipping: 'UnsupportedShipping',
    DuplicateBankAccount: 'DuplicateBankAccount',
    NoBankAccountLeft: 'NoBankAccountLeft'
} as const;

export type ErrorCode = typeof ErrorCode[keyof typeof ErrorCode];


/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {ErrorType}
     * @memberof ErrorResponse
     */
    'type'?: ErrorType;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof ErrorResponse
     */
    'statusCode'?: HttpStatusCode;
    /**
     * 
     * @type {ErrorCode}
     * @memberof ErrorResponse
     */
    'errorCode'?: ErrorCode;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const ErrorType = {
    ApiError: 'ApiError',
    InvalidRequestError: 'InvalidRequestError',
    AuctionError: 'AuctionError',
    ConsignError: 'ConsignError',
    FashionItemError: 'FashionItemError',
    WithdrawError: 'WithdrawError',
    PointPackageError: 'PointPackageError',
    TransactionError: 'TransactionError',
    OrderError: 'OrderError',
    PaymentError: 'PaymentError',
    AccountError: 'AccountError',
    ShippingError: 'ShippingError'
} as const;

export type ErrorType = typeof ErrorType[keyof typeof ErrorType];


/**
 * 
 * @export
 * @interface FashionItemDetailRequest
 */
export interface FashionItemDetailRequest {
    /**
     * 
     * @type {number}
     * @memberof FashionItemDetailRequest
     */
    'sellingPrice': number;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailRequest
     */
    'note'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailRequest
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof FashionItemDetailRequest
     */
    'condition': number;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailRequest
     */
    'brand'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailRequest
     */
    'color'?: string | null;
    /**
     * 
     * @type {GenderType}
     * @memberof FashionItemDetailRequest
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {SizeType}
     * @memberof FashionItemDetailRequest
     */
    'size'?: SizeType;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailRequest
     */
    'categoryId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FashionItemDetailRequest
     */
    'images': Array<string>;
}


/**
 * 
 * @export
 * @interface FashionItemDetailResponse
 */
export interface FashionItemDetailResponse {
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponse
     */
    'itemId'?: string;
    /**
     * 
     * @type {FashionItemType}
     * @memberof FashionItemDetailResponse
     */
    'type'?: FashionItemType;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponse
     */
    'itemCode'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FashionItemDetailResponse
     */
    'sellingPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponse
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponse
     */
    'note'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FashionItemDetailResponse
     */
    'retailPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponse
     */
    'condition'?: string | null;
    /**
     * 
     * @type {FashionItemStatus}
     * @memberof FashionItemDetailResponse
     */
    'status'?: FashionItemStatus;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponse
     */
    'shopAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponse
     */
    'shopId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponse
     */
    'categoryId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponse
     */
    'categoryName'?: string | null;
    /**
     * 
     * @type {SizeType}
     * @memberof FashionItemDetailResponse
     */
    'size'?: SizeType;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponse
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponse
     */
    'brand'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof FashionItemDetailResponse
     */
    'isConsignment'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FashionItemDetailResponse
     */
    'isOrderedYet'?: boolean;
    /**
     * 
     * @type {GenderType}
     * @memberof FashionItemDetailResponse
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {Array<string>}
     * @memberof FashionItemDetailResponse
     */
    'images'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface FashionItemDetailResponseOrderLineItemResponse
 */
export interface FashionItemDetailResponseOrderLineItemResponse {
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponseOrderLineItemResponse
     */
    'orderLineItemId'?: string;
    /**
     * 
     * @type {number}
     * @memberof FashionItemDetailResponseOrderLineItemResponse
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponseOrderLineItemResponse
     */
    'orderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponseOrderLineItemResponse
     */
    'refundExpirationDate'?: string | null;
    /**
     * 
     * @type {FashionItemDetailResponse}
     * @memberof FashionItemDetailResponseOrderLineItemResponse
     */
    'fashionItemDetail'?: FashionItemDetailResponse;
}
/**
 * 
 * @export
 * @interface FashionItemDetailResponsePaginationResponse
 */
export interface FashionItemDetailResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof FashionItemDetailResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof FashionItemDetailResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FashionItemDetailResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof FashionItemDetailResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FashionItemDetailResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof FashionItemDetailResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FashionItemDetailResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FashionItemDetailResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<FashionItemDetailResponse>}
     * @memberof FashionItemDetailResponsePaginationResponse
     */
    'items'?: Array<FashionItemDetailResponse> | null;
}
/**
 * 
 * @export
 * @interface FashionItemDetailResponsePaginationResponseResult
 */
export interface FashionItemDetailResponsePaginationResponseResult {
    /**
     * 
     * @type {FashionItemDetailResponsePaginationResponse}
     * @memberof FashionItemDetailResponsePaginationResponseResult
     */
    'data'?: FashionItemDetailResponsePaginationResponse;
    /**
     * 
     * @type {ResultStatus}
     * @memberof FashionItemDetailResponsePaginationResponseResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof FashionItemDetailResponsePaginationResponseResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface FashionItemDetailResponseResult
 */
export interface FashionItemDetailResponseResult {
    /**
     * 
     * @type {FashionItemDetailResponse}
     * @memberof FashionItemDetailResponseResult
     */
    'data'?: FashionItemDetailResponse;
    /**
     * 
     * @type {ResultStatus}
     * @memberof FashionItemDetailResponseResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof FashionItemDetailResponseResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface FashionItemImage
 */
export interface FashionItemImage {
    /**
     * 
     * @type {string}
     * @memberof FashionItemImage
     */
    'imageId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FashionItemImage
     */
    'imageUrl'?: string | null;
}
/**
 * 
 * @export
 * @interface FashionItemList
 */
export interface FashionItemList {
    /**
     * 
     * @type {string}
     * @memberof FashionItemList
     */
    'itemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FashionItemList
     */
    'masterItemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FashionItemList
     */
    'shopId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FashionItemList
     */
    'brand'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FashionItemList
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FashionItemList
     */
    'itemCode'?: string | null;
    /**
     * 
     * @type {GenderType}
     * @memberof FashionItemList
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {string}
     * @memberof FashionItemList
     */
    'color'?: string | null;
    /**
     * 
     * @type {SizeType}
     * @memberof FashionItemList
     */
    'size'?: SizeType;
    /**
     * 
     * @type {string}
     * @memberof FashionItemList
     */
    'condition'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FashionItemList
     */
    'retailPrice'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FashionItemList
     */
    'note'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FashionItemList
     */
    'sellingPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof FashionItemList
     */
    'image'?: string | null;
    /**
     * 
     * @type {FashionItemStatus}
     * @memberof FashionItemList
     */
    'status'?: FashionItemStatus;
    /**
     * 
     * @type {FashionItemType}
     * @memberof FashionItemList
     */
    'type'?: FashionItemType;
    /**
     * 
     * @type {string}
     * @memberof FashionItemList
     */
    'categoryId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FashionItemList
     */
    'isOrderedYet'?: boolean;
}


/**
 * 
 * @export
 * @interface FashionItemListPaginationResponse
 */
export interface FashionItemListPaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof FashionItemListPaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof FashionItemListPaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof FashionItemListPaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FashionItemListPaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof FashionItemListPaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FashionItemListPaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof FashionItemListPaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FashionItemListPaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FashionItemListPaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<FashionItemList>}
     * @memberof FashionItemListPaginationResponse
     */
    'items'?: Array<FashionItemList> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const FashionItemStatus = {
    Available: 'Available',
    Unavailable: 'Unavailable',
    OnDelivery: 'OnDelivery',
    Sold: 'Sold',
    UnSold: 'UnSold',
    Reserved: 'Reserved',
    Refundable: 'Refundable',
    PendingForConsignSale: 'PendingForConsignSale',
    PendingAuction: 'PendingAuction',
    PendingForRefund: 'PendingForRefund',
    PendingForOrder: 'PendingForOrder',
    AwaitingAuction: 'AwaitingAuction',
    Bidding: 'Bidding',
    Rejected: 'Rejected',
    Returned: 'Returned',
    Won: 'Won'
} as const;

export type FashionItemStatus = typeof FashionItemStatus[keyof typeof FashionItemStatus];


/**
 * 
 * @export
 * @enum {string}
 */

export const FashionItemType = {
    ItemBase: 'ItemBase',
    ConsignedForSale: 'ConsignedForSale',
    ConsignedForAuction: 'ConsignedForAuction'
} as const;

export type FashionItemType = typeof FashionItemType[keyof typeof FashionItemType];


/**
 * 
 * @export
 * @interface Feedback
 */
export interface Feedback {
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    'feedbackId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    'content'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    'orderLineItemId'?: string;
    /**
     * 
     * @type {OrderLineItem}
     * @memberof Feedback
     */
    'orderLineItem'?: OrderLineItem;
}
/**
 * 
 * @export
 * @interface GHNDistrictResponse
 */
export interface GHNDistrictResponse {
    /**
     * 
     * @type {number}
     * @memberof GHNDistrictResponse
     */
    'districtId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GHNDistrictResponse
     */
    'provinceId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GHNDistrictResponse
     */
    'districtName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GHNDistrictResponse
     */
    'supportType'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof GHNDistrictResponse
     */
    'nameExtension'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof GHNDistrictResponse
     */
    'canUpdateCOD'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GHNDistrictResponse
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface GHNDistrictResponseListGHNApiResponse
 */
export interface GHNDistrictResponseListGHNApiResponse {
    /**
     * 
     * @type {string}
     * @memberof GHNDistrictResponseListGHNApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GHNDistrictResponseListGHNApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {Array<GHNDistrictResponse>}
     * @memberof GHNDistrictResponseListGHNApiResponse
     */
    'data'?: Array<GHNDistrictResponse> | null;
}
/**
 * 
 * @export
 * @interface GHNProvinceResponse
 */
export interface GHNProvinceResponse {
    /**
     * 
     * @type {number}
     * @memberof GHNProvinceResponse
     */
    'provinceId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GHNProvinceResponse
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof GHNProvinceResponse
     */
    'nameExtension'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof GHNProvinceResponse
     */
    'canUpdateCod'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GHNProvinceResponse
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface GHNProvinceResponseListGHNApiResponse
 */
export interface GHNProvinceResponseListGHNApiResponse {
    /**
     * 
     * @type {string}
     * @memberof GHNProvinceResponseListGHNApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GHNProvinceResponseListGHNApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {Array<GHNProvinceResponse>}
     * @memberof GHNProvinceResponseListGHNApiResponse
     */
    'data'?: Array<GHNProvinceResponse> | null;
}
/**
 * 
 * @export
 * @interface GHNShop
 */
export interface GHNShop {
    /**
     * 
     * @type {number}
     * @memberof GHNShop
     */
    '_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GHNShop
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GHNShop
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GHNShop
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GHNShop
     */
    'ward_code'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GHNShop
     */
    'district_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GHNShop
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface GHNShopCreateRequest
 */
export interface GHNShopCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof GHNShopCreateRequest
     */
    'district_id': number;
    /**
     * 
     * @type {string}
     * @memberof GHNShopCreateRequest
     */
    'ward_code': string;
    /**
     * 
     * @type {string}
     * @memberof GHNShopCreateRequest
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof GHNShopCreateRequest
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface GHNShopCreateResponse
 */
export interface GHNShopCreateResponse {
    /**
     * 
     * @type {number}
     * @memberof GHNShopCreateResponse
     */
    'shop_id'?: number;
}
/**
 * 
 * @export
 * @interface GHNShopCreateResponseGHNApiResponse
 */
export interface GHNShopCreateResponseGHNApiResponse {
    /**
     * 
     * @type {string}
     * @memberof GHNShopCreateResponseGHNApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GHNShopCreateResponseGHNApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {GHNShopCreateResponse}
     * @memberof GHNShopCreateResponseGHNApiResponse
     */
    'data'?: GHNShopCreateResponse;
}
/**
 * 
 * @export
 * @interface GHNShopListGHNApiResponse
 */
export interface GHNShopListGHNApiResponse {
    /**
     * 
     * @type {string}
     * @memberof GHNShopListGHNApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GHNShopListGHNApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {Array<GHNShop>}
     * @memberof GHNShopListGHNApiResponse
     */
    'data'?: Array<GHNShop> | null;
}
/**
 * 
 * @export
 * @interface GHNWardResponse
 */
export interface GHNWardResponse {
    /**
     * 
     * @type {number}
     * @memberof GHNWardResponse
     */
    'districtId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GHNWardResponse
     */
    'wardCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof GHNWardResponse
     */
    'wardName'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof GHNWardResponse
     */
    'nameExtension'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof GHNWardResponse
     */
    'canUpdateCod'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GHNWardResponse
     */
    'supportType'?: number;
    /**
     * 
     * @type {number}
     * @memberof GHNWardResponse
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface GHNWardResponseListGHNApiResponse
 */
export interface GHNWardResponseListGHNApiResponse {
    /**
     * 
     * @type {string}
     * @memberof GHNWardResponseListGHNApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GHNWardResponseListGHNApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {Array<GHNWardResponse>}
     * @memberof GHNWardResponseListGHNApiResponse
     */
    'data'?: Array<GHNWardResponse> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const GenderType = {
    Male: 'Male',
    Female: 'Female'
} as const;

export type GenderType = typeof GenderType[keyof typeof GenderType];


/**
 * 
 * @export
 * @interface Geometry
 */
export interface Geometry {
    /**
     * 
     * @type {GeometryFactory}
     * @memberof Geometry
     */
    'factory'?: GeometryFactory;
    /**
     * 
     * @type {any}
     * @memberof Geometry
     */
    'userData'?: any | null;
    /**
     * 
     * @type {number}
     * @memberof Geometry
     */
    'srid'?: number;
    /**
     * 
     * @type {string}
     * @memberof Geometry
     */
    'geometryType'?: string | null;
    /**
     * 
     * @type {OgcGeometryType}
     * @memberof Geometry
     */
    'ogcGeometryType'?: OgcGeometryType;
    /**
     * 
     * @type {PrecisionModel}
     * @memberof Geometry
     */
    'precisionModel'?: PrecisionModel;
    /**
     * 
     * @type {Coordinate}
     * @memberof Geometry
     */
    'coordinate'?: Coordinate;
    /**
     * 
     * @type {Array<Coordinate>}
     * @memberof Geometry
     */
    'coordinates'?: Array<Coordinate> | null;
    /**
     * 
     * @type {number}
     * @memberof Geometry
     */
    'numPoints'?: number;
    /**
     * 
     * @type {number}
     * @memberof Geometry
     */
    'numGeometries'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Geometry
     */
    'isSimple'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Geometry
     */
    'isValid'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Geometry
     */
    'isEmpty'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Geometry
     */
    'area'?: number;
    /**
     * 
     * @type {number}
     * @memberof Geometry
     */
    'length'?: number;
    /**
     * 
     * @type {Point}
     * @memberof Geometry
     */
    'centroid'?: Point;
    /**
     * 
     * @type {Point}
     * @memberof Geometry
     */
    'interiorPoint'?: Point;
    /**
     * 
     * @type {Point}
     * @memberof Geometry
     */
    'pointOnSurface'?: Point;
    /**
     * 
     * @type {Dimension}
     * @memberof Geometry
     */
    'dimension'?: Dimension;
    /**
     * 
     * @type {Geometry}
     * @memberof Geometry
     */
    'boundary'?: Geometry;
    /**
     * 
     * @type {Dimension}
     * @memberof Geometry
     */
    'boundaryDimension'?: Dimension;
    /**
     * 
     * @type {Geometry}
     * @memberof Geometry
     */
    'envelope'?: Geometry;
    /**
     * 
     * @type {Envelope}
     * @memberof Geometry
     */
    'envelopeInternal'?: Envelope;
    /**
     * 
     * @type {boolean}
     * @memberof Geometry
     */
    'isRectangle'?: boolean;
}


/**
 * 
 * @export
 * @interface GeometryFactory
 */
export interface GeometryFactory {
    /**
     * 
     * @type {PrecisionModel}
     * @memberof GeometryFactory
     */
    'precisionModel'?: PrecisionModel;
    /**
     * 
     * @type {CoordinateSequenceFactory}
     * @memberof GeometryFactory
     */
    'coordinateSequenceFactory'?: CoordinateSequenceFactory;
    /**
     * 
     * @type {number}
     * @memberof GeometryFactory
     */
    'srid'?: number;
    /**
     * 
     * @type {NtsGeometryServices}
     * @memberof GeometryFactory
     */
    'geometryServices'?: NtsGeometryServices;
}
/**
 * 
 * @export
 * @interface GetTransactionsResponse
 */
export interface GetTransactionsResponse {
    /**
     * 
     * @type {string}
     * @memberof GetTransactionsResponse
     */
    'transactionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionsResponse
     */
    'orderCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionsResponse
     */
    'consignSaleCode'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetTransactionsResponse
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionsResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {TransactionType}
     * @memberof GetTransactionsResponse
     */
    'type'?: TransactionType;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionsResponse
     */
    'memberId'?: string | null;
}


/**
 * 
 * @export
 * @interface GetTransactionsResponsePaginationResponse
 */
export interface GetTransactionsResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof GetTransactionsResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetTransactionsResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionsResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetTransactionsResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionsResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetTransactionsResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetTransactionsResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetTransactionsResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetTransactionsResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<GetTransactionsResponse>}
     * @memberof GetTransactionsResponsePaginationResponse
     */
    'items'?: Array<GetTransactionsResponse> | null;
}
/**
 * 
 * @export
 * @interface GetWithdrawsResponse
 */
export interface GetWithdrawsResponse {
    /**
     * 
     * @type {string}
     * @memberof GetWithdrawsResponse
     */
    'withdrawId'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetWithdrawsResponse
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetWithdrawsResponse
     */
    'memberId'?: string;
    /**
     * 
     * @type {WithdrawStatus}
     * @memberof GetWithdrawsResponse
     */
    'status'?: WithdrawStatus;
    /**
     * 
     * @type {string}
     * @memberof GetWithdrawsResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWithdrawsResponse
     */
    'bank'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetWithdrawsResponse
     */
    'bankAccountName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetWithdrawsResponse
     */
    'bankAccountNumber'?: string | null;
}


/**
 * 
 * @export
 * @interface GetWithdrawsResponsePaginationResponse
 */
export interface GetWithdrawsResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof GetWithdrawsResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetWithdrawsResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetWithdrawsResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetWithdrawsResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof GetWithdrawsResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetWithdrawsResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetWithdrawsResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetWithdrawsResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetWithdrawsResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<GetWithdrawsResponse>}
     * @memberof GetWithdrawsResponsePaginationResponse
     */
    'items'?: Array<GetWithdrawsResponse> | null;
}
/**
 * 
 * @export
 * @interface HasMemberPlacedDepositResult
 */
export interface HasMemberPlacedDepositResult {
    /**
     * 
     * @type {boolean}
     * @memberof HasMemberPlacedDepositResult
     */
    'hasDeposit'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof HasMemberPlacedDepositResult
     */
    'auctionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof HasMemberPlacedDepositResult
     */
    'memberId'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const HttpStatusCode = {
    Continue: 'Continue',
    SwitchingProtocols: 'SwitchingProtocols',
    Processing: 'Processing',
    EarlyHints: 'EarlyHints',
    Ok: 'OK',
    Created: 'Created',
    Accepted: 'Accepted',
    NonAuthoritativeInformation: 'NonAuthoritativeInformation',
    NoContent: 'NoContent',
    ResetContent: 'ResetContent',
    PartialContent: 'PartialContent',
    MultiStatus: 'MultiStatus',
    AlreadyReported: 'AlreadyReported',
    ImUsed: 'IMUsed',
    MultipleChoices: 'MultipleChoices',
    MovedPermanently: 'MovedPermanently',
    Found: 'Found',
    SeeOther: 'SeeOther',
    NotModified: 'NotModified',
    UseProxy: 'UseProxy',
    Unused: 'Unused',
    TemporaryRedirect: 'TemporaryRedirect',
    PermanentRedirect: 'PermanentRedirect',
    BadRequest: 'BadRequest',
    Unauthorized: 'Unauthorized',
    PaymentRequired: 'PaymentRequired',
    Forbidden: 'Forbidden',
    NotFound: 'NotFound',
    MethodNotAllowed: 'MethodNotAllowed',
    NotAcceptable: 'NotAcceptable',
    ProxyAuthenticationRequired: 'ProxyAuthenticationRequired',
    RequestTimeout: 'RequestTimeout',
    Conflict: 'Conflict',
    Gone: 'Gone',
    LengthRequired: 'LengthRequired',
    PreconditionFailed: 'PreconditionFailed',
    RequestEntityTooLarge: 'RequestEntityTooLarge',
    RequestUriTooLong: 'RequestUriTooLong',
    UnsupportedMediaType: 'UnsupportedMediaType',
    RequestedRangeNotSatisfiable: 'RequestedRangeNotSatisfiable',
    ExpectationFailed: 'ExpectationFailed',
    MisdirectedRequest: 'MisdirectedRequest',
    UnprocessableEntity: 'UnprocessableEntity',
    Locked: 'Locked',
    FailedDependency: 'FailedDependency',
    UpgradeRequired: 'UpgradeRequired',
    PreconditionRequired: 'PreconditionRequired',
    TooManyRequests: 'TooManyRequests',
    RequestHeaderFieldsTooLarge: 'RequestHeaderFieldsTooLarge',
    UnavailableForLegalReasons: 'UnavailableForLegalReasons',
    InternalServerError: 'InternalServerError',
    NotImplemented: 'NotImplemented',
    BadGateway: 'BadGateway',
    ServiceUnavailable: 'ServiceUnavailable',
    GatewayTimeout: 'GatewayTimeout',
    HttpVersionNotSupported: 'HttpVersionNotSupported',
    VariantAlsoNegotiates: 'VariantAlsoNegotiates',
    InsufficientStorage: 'InsufficientStorage',
    LoopDetected: 'LoopDetected',
    NotExtended: 'NotExtended',
    NetworkAuthenticationRequired: 'NetworkAuthenticationRequired'
} as const;

export type HttpStatusCode = typeof HttpStatusCode[keyof typeof HttpStatusCode];


/**
 * 
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'imageId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'url'?: string | null;
    /**
     * 
     * @type {IndividualFashionItem}
     * @memberof Image
     */
    'individualFashionItem'?: IndividualFashionItem;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'individualFashionItemId'?: string | null;
    /**
     * 
     * @type {MasterFashionItem}
     * @memberof Image
     */
    'masterFashionItem'?: MasterFashionItem;
    /**
     * 
     * @type {ConsignSaleLineItem}
     * @memberof Image
     */
    'consignSaleLineItem'?: ConsignSaleLineItem;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'consignLineItemId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'masterFashionItemId'?: string | null;
    /**
     * 
     * @type {Refund}
     * @memberof Image
     */
    'refund'?: Refund;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'refundId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'createdDate'?: string;
}
/**
 * 
 * @export
 * @interface IndividualAuctionFashionItem
 */
export interface IndividualAuctionFashionItem {
    /**
     * 
     * @type {string}
     * @memberof IndividualAuctionFashionItem
     */
    'itemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IndividualAuctionFashionItem
     */
    'itemCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IndividualAuctionFashionItem
     */
    'masterItemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IndividualAuctionFashionItem
     */
    'note'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IndividualAuctionFashionItem
     */
    'sellingPrice'?: number | null;
    /**
     * 
     * @type {FashionItemStatus}
     * @memberof IndividualAuctionFashionItem
     */
    'status'?: FashionItemStatus;
    /**
     * 
     * @type {number}
     * @memberof IndividualAuctionFashionItem
     */
    'retailPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof IndividualAuctionFashionItem
     */
    'color'?: string | null;
    /**
     * 
     * @type {SizeType}
     * @memberof IndividualAuctionFashionItem
     */
    'size'?: SizeType;
    /**
     * 
     * @type {string}
     * @memberof IndividualAuctionFashionItem
     */
    'condition'?: string | null;
    /**
     * 
     * @type {FashionItemType}
     * @memberof IndividualAuctionFashionItem
     */
    'type'?: FashionItemType;
    /**
     * 
     * @type {MasterFashionItem}
     * @memberof IndividualAuctionFashionItem
     */
    'masterItem'?: MasterFashionItem;
    /**
     * 
     * @type {ConsignSaleLineItem}
     * @memberof IndividualAuctionFashionItem
     */
    'consignSaleLineItem'?: ConsignSaleLineItem;
    /**
     * 
     * @type {string}
     * @memberof IndividualAuctionFashionItem
     */
    'consignSaleLineItemId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IndividualAuctionFashionItem
     */
    'createdDate'?: string;
    /**
     * 
     * @type {Array<Image>}
     * @memberof IndividualAuctionFashionItem
     */
    'images'?: Array<Image> | null;
    /**
     * 
     * @type {number}
     * @memberof IndividualAuctionFashionItem
     */
    'initialPrice'?: number | null;
    /**
     * 
     * @type {Array<Auction>}
     * @memberof IndividualAuctionFashionItem
     */
    'auctions'?: Array<Auction> | null;
}


/**
 * 
 * @export
 * @interface IndividualFashionItem
 */
export interface IndividualFashionItem {
    /**
     * 
     * @type {string}
     * @memberof IndividualFashionItem
     */
    'itemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IndividualFashionItem
     */
    'itemCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IndividualFashionItem
     */
    'masterItemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IndividualFashionItem
     */
    'note'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IndividualFashionItem
     */
    'sellingPrice'?: number | null;
    /**
     * 
     * @type {FashionItemStatus}
     * @memberof IndividualFashionItem
     */
    'status'?: FashionItemStatus;
    /**
     * 
     * @type {number}
     * @memberof IndividualFashionItem
     */
    'retailPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof IndividualFashionItem
     */
    'color'?: string | null;
    /**
     * 
     * @type {SizeType}
     * @memberof IndividualFashionItem
     */
    'size'?: SizeType;
    /**
     * 
     * @type {string}
     * @memberof IndividualFashionItem
     */
    'condition'?: string | null;
    /**
     * 
     * @type {FashionItemType}
     * @memberof IndividualFashionItem
     */
    'type'?: FashionItemType;
    /**
     * 
     * @type {MasterFashionItem}
     * @memberof IndividualFashionItem
     */
    'masterItem'?: MasterFashionItem;
    /**
     * 
     * @type {ConsignSaleLineItem}
     * @memberof IndividualFashionItem
     */
    'consignSaleLineItem'?: ConsignSaleLineItem;
    /**
     * 
     * @type {string}
     * @memberof IndividualFashionItem
     */
    'consignSaleLineItemId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IndividualFashionItem
     */
    'createdDate'?: string;
    /**
     * 
     * @type {Array<Image>}
     * @memberof IndividualFashionItem
     */
    'images'?: Array<Image> | null;
}


/**
 * 
 * @export
 * @interface IndividualItemListResponse
 */
export interface IndividualItemListResponse {
    /**
     * 
     * @type {string}
     * @memberof IndividualItemListResponse
     */
    'itemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IndividualItemListResponse
     */
    'itemCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IndividualItemListResponse
     */
    'masterItemId'?: string;
    /**
     * 
     * @type {number}
     * @memberof IndividualItemListResponse
     */
    'sellingPrice'?: number;
    /**
     * 
     * @type {FashionItemStatus}
     * @memberof IndividualItemListResponse
     */
    'status'?: FashionItemStatus;
    /**
     * 
     * @type {FashionItemType}
     * @memberof IndividualItemListResponse
     */
    'type'?: FashionItemType;
    /**
     * 
     * @type {boolean}
     * @memberof IndividualItemListResponse
     */
    'isOrderedYet'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IndividualItemListResponse
     */
    'color'?: string | null;
    /**
     * 
     * @type {SizeType}
     * @memberof IndividualItemListResponse
     */
    'size'?: SizeType;
    /**
     * 
     * @type {string}
     * @memberof IndividualItemListResponse
     */
    'condition'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IndividualItemListResponse
     */
    'image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IndividualItemListResponse
     */
    'createdDate'?: string;
}


/**
 * 
 * @export
 * @interface IndividualItemListResponseListResult
 */
export interface IndividualItemListResponseListResult {
    /**
     * 
     * @type {Array<IndividualItemListResponse>}
     * @memberof IndividualItemListResponseListResult
     */
    'data'?: Array<IndividualItemListResponse> | null;
    /**
     * 
     * @type {ResultStatus}
     * @memberof IndividualItemListResponseListResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof IndividualItemListResponseListResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface IndividualItemListResponsePaginationResponse
 */
export interface IndividualItemListResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof IndividualItemListResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof IndividualItemListResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof IndividualItemListResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof IndividualItemListResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof IndividualItemListResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IndividualItemListResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof IndividualItemListResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof IndividualItemListResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IndividualItemListResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<IndividualItemListResponse>}
     * @memberof IndividualItemListResponsePaginationResponse
     */
    'items'?: Array<IndividualItemListResponse> | null;
}
/**
 * 
 * @export
 * @interface InquiryListResponse
 */
export interface InquiryListResponse {
    /**
     * 
     * @type {string}
     * @memberof InquiryListResponse
     */
    'inquiryId'?: string;
    /**
     * 
     * @type {string}
     * @memberof InquiryListResponse
     */
    'fullname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InquiryListResponse
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InquiryListResponse
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InquiryListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InquiryListResponse
     */
    'createdDate'?: string;
}
/**
 * 
 * @export
 * @interface InquiryListResponsePaginationResponse
 */
export interface InquiryListResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof InquiryListResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof InquiryListResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof InquiryListResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof InquiryListResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof InquiryListResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InquiryListResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof InquiryListResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof InquiryListResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InquiryListResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<InquiryListResponse>}
     * @memberof InquiryListResponsePaginationResponse
     */
    'items'?: Array<InquiryListResponse> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const InquiryStatus = {
    Processing: 'Processing',
    Approved: 'Approved',
    Rejected: 'Rejected'
} as const;

export type InquiryStatus = typeof InquiryStatus[keyof typeof InquiryStatus];


/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'accessToken'?: string | null;
    /**
     * 
     * @type {Roles}
     * @memberof LoginResponse
     */
    'role'?: Roles;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'shopId'?: string | null;
}


/**
 * 
 * @export
 * @interface LoginResponseResult
 */
export interface LoginResponseResult {
    /**
     * 
     * @type {LoginResponse}
     * @memberof LoginResponseResult
     */
    'data'?: LoginResponse;
    /**
     * 
     * @type {ResultStatus}
     * @memberof LoginResponseResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof LoginResponseResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface MasterFashionItem
 */
export interface MasterFashionItem {
    /**
     * 
     * @type {string}
     * @memberof MasterFashionItem
     */
    'masterItemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterFashionItem
     */
    'masterItemCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MasterFashionItem
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MasterFashionItem
     */
    'brand'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MasterFashionItem
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MasterFashionItem
     */
    'categoryId'?: string;
    /**
     * 
     * @type {GenderType}
     * @memberof MasterFashionItem
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {Category}
     * @memberof MasterFashionItem
     */
    'category'?: Category;
    /**
     * 
     * @type {string}
     * @memberof MasterFashionItem
     */
    'createdDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MasterFashionItem
     */
    'isConsignment'?: boolean;
    /**
     * 
     * @type {Array<Image>}
     * @memberof MasterFashionItem
     */
    'images'?: Array<Image> | null;
    /**
     * 
     * @type {Shop}
     * @memberof MasterFashionItem
     */
    'shop'?: Shop;
    /**
     * 
     * @type {string}
     * @memberof MasterFashionItem
     */
    'shopId'?: string;
    /**
     * 
     * @type {number}
     * @memberof MasterFashionItem
     */
    'stockCount'?: number;
    /**
     * 
     * @type {Array<IndividualFashionItem>}
     * @memberof MasterFashionItem
     */
    'individualFashionItems'?: Array<IndividualFashionItem> | null;
}


/**
 * 
 * @export
 * @interface MasterItemDetailResponse
 */
export interface MasterItemDetailResponse {
    /**
     * 
     * @type {string}
     * @memberof MasterItemDetailResponse
     */
    'masterItemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterItemDetailResponse
     */
    'masterItemCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MasterItemDetailResponse
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MasterItemDetailResponse
     */
    'brand'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MasterItemDetailResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MasterItemDetailResponse
     */
    'categoryId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterItemDetailResponse
     */
    'categoryName'?: string | null;
    /**
     * 
     * @type {GenderType}
     * @memberof MasterItemDetailResponse
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {string}
     * @memberof MasterItemDetailResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MasterItemDetailResponse
     */
    'isConsignment'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MasterItemDetailResponse
     */
    'stockCount'?: number;
    /**
     * 
     * @type {Array<FashionItemImage>}
     * @memberof MasterItemDetailResponse
     */
    'images'?: Array<FashionItemImage> | null;
}


/**
 * 
 * @export
 * @interface MasterItemListResponse
 */
export interface MasterItemListResponse {
    /**
     * 
     * @type {string}
     * @memberof MasterItemListResponse
     */
    'masterItemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterItemListResponse
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MasterItemListResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MasterItemListResponse
     */
    'itemCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MasterItemListResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterItemListResponse
     */
    'brand'?: string | null;
    /**
     * 
     * @type {GenderType}
     * @memberof MasterItemListResponse
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {string}
     * @memberof MasterItemListResponse
     */
    'categoryId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MasterItemListResponse
     */
    'isConsignment'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MasterItemListResponse
     */
    'shopId'?: string;
    /**
     * 
     * @type {number}
     * @memberof MasterItemListResponse
     */
    'stockCount'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof MasterItemListResponse
     */
    'images'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface MasterItemListResponsePaginationResponse
 */
export interface MasterItemListResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof MasterItemListResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof MasterItemListResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof MasterItemListResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof MasterItemListResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof MasterItemListResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MasterItemListResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MasterItemListResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MasterItemListResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterItemListResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<MasterItemListResponse>}
     * @memberof MasterItemListResponsePaginationResponse
     */
    'items'?: Array<MasterItemListResponse> | null;
}
/**
 * 
 * @export
 * @interface MasterItemResponse
 */
export interface MasterItemResponse {
    /**
     * 
     * @type {string}
     * @memberof MasterItemResponse
     */
    'masterItemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterItemResponse
     */
    'masterItemCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MasterItemResponse
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MasterItemResponse
     */
    'brand'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MasterItemResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MasterItemResponse
     */
    'categoryId'?: string;
    /**
     * 
     * @type {GenderType}
     * @memberof MasterItemResponse
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {string}
     * @memberof MasterItemResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MasterItemResponse
     */
    'isConsignment'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof MasterItemResponse
     */
    'images'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof MasterItemResponse
     */
    'shopId'?: string;
    /**
     * 
     * @type {number}
     * @memberof MasterItemResponse
     */
    'stockCount'?: number;
}


/**
 * 
 * @export
 * @interface MasterItemResponseResult
 */
export interface MasterItemResponseResult {
    /**
     * 
     * @type {MasterItemResponse}
     * @memberof MasterItemResponseResult
     */
    'data'?: MasterItemResponse;
    /**
     * 
     * @type {ResultStatus}
     * @memberof MasterItemResponseResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof MasterItemResponseResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface Member
 */
export interface Member {
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'accountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'passwordHash'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'passwordSalt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'fullname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'verifiedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'passwordResetToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'resetTokenExpires'?: string | null;
    /**
     * 
     * @type {Roles}
     * @memberof Member
     */
    'role'?: Roles;
    /**
     * 
     * @type {AccountStatus}
     * @memberof Member
     */
    'status'?: AccountStatus;
    /**
     * 
     * @type {number}
     * @memberof Member
     */
    'balance'?: number;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'createdDate'?: string;
}


/**
 * 
 * @export
 * @interface MemberDetailResponse
 */
export interface MemberDetailResponse {
    /**
     * 
     * @type {string}
     * @memberof MemberDetailResponse
     */
    'memberId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberDetailResponse
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MemberDetailResponse
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MemberDetailResponse
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MemberDetailResponse
     */
    'status'?: string | null;
}
/**
 * 
 * @export
 * @interface MonthPayout
 */
export interface MonthPayout {
    /**
     * 
     * @type {number}
     * @memberof MonthPayout
     */
    'month'?: number;
    /**
     * 
     * @type {number}
     * @memberof MonthPayout
     */
    'consignPayout'?: number;
}
/**
 * 
 * @export
 * @interface MonthRevenue
 */
export interface MonthRevenue {
    /**
     * 
     * @type {number}
     * @memberof MonthRevenue
     */
    'month'?: number;
    /**
     * 
     * @type {number}
     * @memberof MonthRevenue
     */
    'revenue'?: number;
}
/**
 * 
 * @export
 * @interface MonthlyPayoutsResponse
 */
export interface MonthlyPayoutsResponse {
    /**
     * 
     * @type {number}
     * @memberof MonthlyPayoutsResponse
     */
    'year'?: number;
    /**
     * 
     * @type {Array<MonthPayout>}
     * @memberof MonthlyPayoutsResponse
     */
    'monthlyPayouts'?: Array<MonthPayout> | null;
}
/**
 * 
 * @export
 * @interface MonthlyRevenueDto
 */
export interface MonthlyRevenueDto {
    /**
     * 
     * @type {number}
     * @memberof MonthlyRevenueDto
     */
    'year'?: number;
    /**
     * 
     * @type {Array<MonthRevenue>}
     * @memberof MonthlyRevenueDto
     */
    'monthlyRevenue'?: Array<MonthRevenue> | null;
}
/**
 * 
 * @export
 * @interface NtsGeometryServices
 */
export interface NtsGeometryServices {
    /**
     * 
     * @type {object}
     * @memberof NtsGeometryServices
     */
    'geometryOverlay'?: object;
    /**
     * 
     * @type {object}
     * @memberof NtsGeometryServices
     */
    'coordinateEqualityComparer'?: object;
    /**
     * 
     * @type {number}
     * @memberof NtsGeometryServices
     */
    'defaultSRID'?: number;
    /**
     * 
     * @type {CoordinateSequenceFactory}
     * @memberof NtsGeometryServices
     */
    'defaultCoordinateSequenceFactory'?: CoordinateSequenceFactory;
    /**
     * 
     * @type {PrecisionModel}
     * @memberof NtsGeometryServices
     */
    'defaultPrecisionModel'?: PrecisionModel;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const OgcGeometryType = {
    Point: 'Point',
    LineString: 'LineString',
    Polygon: 'Polygon',
    MultiPoint: 'MultiPoint',
    MultiLineString: 'MultiLineString',
    MultiPolygon: 'MultiPolygon',
    GeometryCollection: 'GeometryCollection',
    CircularString: 'CircularString',
    CompoundCurve: 'CompoundCurve',
    CurvePolygon: 'CurvePolygon',
    MultiCurve: 'MultiCurve',
    MultiSurface: 'MultiSurface',
    Curve: 'Curve',
    Surface: 'Surface',
    PolyhedralSurface: 'PolyhedralSurface',
    Tin: 'TIN'
} as const;

export type OgcGeometryType = typeof OgcGeometryType[keyof typeof OgcGeometryType];


/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'orderId'?: string;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'totalPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'orderCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'createdDate'?: string;
    /**
     * 
     * @type {PaymentMethod}
     * @memberof Order
     */
    'paymentMethod'?: PaymentMethod;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'completedDate'?: string | null;
    /**
     * 
     * @type {Account}
     * @memberof Order
     */
    'member'?: Account;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'memberId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'bidId'?: string | null;
    /**
     * 
     * @type {Bid}
     * @memberof Order
     */
    'bid'?: Bid;
    /**
     * 
     * @type {OrderStatus}
     * @memberof Order
     */
    'status'?: OrderStatus;
    /**
     * 
     * @type {PurchaseType}
     * @memberof Order
     */
    'purchaseType'?: PurchaseType;
    /**
     * 
     * @type {Array<Transaction>}
     * @memberof Order
     */
    'transaction'?: Array<Transaction> | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'recipientName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'address'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'ghnDistrictId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'ghnWardCode'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'email'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'ghnProvinceId'?: number | null;
    /**
     * 
     * @type {AddressType}
     * @memberof Order
     */
    'addressType'?: AddressType;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'shippingFee'?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'discount'?: number;
}


/**
 * 
 * @export
 * @interface OrderDetailedResponse
 */
export interface OrderDetailedResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderDetailedResponse
     */
    'orderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDetailedResponse
     */
    'orderCode'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderDetailedResponse
     */
    'subtotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderDetailedResponse
     */
    'shippingFee'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderDetailedResponse
     */
    'discount'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderDetailedResponse
     */
    'totalPrice'?: number;
    /**
     * 
     * @type {PaymentMethod}
     * @memberof OrderDetailedResponse
     */
    'paymentMethod'?: PaymentMethod;
    /**
     * 
     * @type {string}
     * @memberof OrderDetailedResponse
     */
    'paymentDate'?: string;
    /**
     * 
     * @type {PurchaseType}
     * @memberof OrderDetailedResponse
     */
    'purchaseType'?: PurchaseType;
    /**
     * 
     * @type {string}
     * @memberof OrderDetailedResponse
     */
    'completedDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDetailedResponse
     */
    'memberId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDetailedResponse
     */
    'reciepientName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderDetailedResponse
     */
    'customerName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderDetailedResponse
     */
    'bidId'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderDetailedResponse
     */
    'bidAmount'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderDetailedResponse
     */
    'bidCreatedDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDetailedResponse
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderDetailedResponse
     */
    'address'?: string | null;
    /**
     * 
     * @type {AddressType}
     * @memberof OrderDetailedResponse
     */
    'addressType'?: AddressType;
    /**
     * 
     * @type {string}
     * @memberof OrderDetailedResponse
     */
    'email'?: string | null;
    /**
     * 
     * @type {OrderStatus}
     * @memberof OrderDetailedResponse
     */
    'status'?: OrderStatus;
}


/**
 * 
 * @export
 * @interface OrderLineItem
 */
export interface OrderLineItem {
    /**
     * 
     * @type {string}
     * @memberof OrderLineItem
     */
    'orderLineItemId'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItem
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItem
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {Order}
     * @memberof OrderLineItem
     */
    'order'?: Order;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItem
     */
    'orderId'?: string;
    /**
     * 
     * @type {Refund}
     * @memberof OrderLineItem
     */
    'refund'?: Refund;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItem
     */
    'refundExpirationDate'?: string | null;
    /**
     * 
     * @type {IndividualFashionItem}
     * @memberof OrderLineItem
     */
    'individualFashionItem'?: IndividualFashionItem;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItem
     */
    'individualFashionItemId'?: string | null;
    /**
     * 
     * @type {PointPackage}
     * @memberof OrderLineItem
     */
    'pointPackage'?: PointPackage;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItem
     */
    'pointPackageId'?: string | null;
    /**
     * 
     * @type {Feedback}
     * @memberof OrderLineItem
     */
    'feedback'?: Feedback;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItem
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItem
     */
    'paymentDate'?: string | null;
}
/**
 * 
 * @export
 * @interface OrderLineItemDetailedResponse
 */
export interface OrderLineItemDetailedResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemDetailedResponse
     */
    'orderCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemDetailedResponse
     */
    'orderLineItemId'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItemDetailedResponse
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItemDetailedResponse
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemDetailedResponse
     */
    'refundExpirationDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemDetailedResponse
     */
    'itemName'?: string | null;
    /**
     * 
     * @type {FashionItemType}
     * @memberof OrderLineItemDetailedResponse
     */
    'itemType'?: FashionItemType;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemDetailedResponse
     */
    'itemCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemDetailedResponse
     */
    'itemNote'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemDetailedResponse
     */
    'condition'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemDetailedResponse
     */
    'categoryName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemDetailedResponse
     */
    'itemColor'?: string | null;
    /**
     * 
     * @type {SizeType}
     * @memberof OrderLineItemDetailedResponse
     */
    'itemSize'?: SizeType;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemDetailedResponse
     */
    'itemBrand'?: string | null;
    /**
     * 
     * @type {GenderType}
     * @memberof OrderLineItemDetailedResponse
     */
    'itemGender'?: GenderType;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderLineItemDetailedResponse
     */
    'itemImage'?: Array<string> | null;
    /**
     * 
     * @type {FashionItemStatus}
     * @memberof OrderLineItemDetailedResponse
     */
    'itemStatus'?: FashionItemStatus;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemDetailedResponse
     */
    'shopAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemDetailedResponse
     */
    'shopId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemDetailedResponse
     */
    'pointPackageId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemDetailedResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemDetailedResponse
     */
    'paymentDate'?: string | null;
}


/**
 * 
 * @export
 * @interface OrderLineItemListResponse
 */
export interface OrderLineItemListResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponse
     */
    'orderCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponse
     */
    'orderLineItemId'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItemListResponse
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItemListResponse
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponse
     */
    'refundExpirationDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponse
     */
    'itemName'?: string | null;
    /**
     * 
     * @type {FashionItemType}
     * @memberof OrderLineItemListResponse
     */
    'itemType'?: FashionItemType;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponse
     */
    'itemCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponse
     */
    'itemNote'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponse
     */
    'condition'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponse
     */
    'categoryName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponse
     */
    'itemColor'?: string | null;
    /**
     * 
     * @type {SizeType}
     * @memberof OrderLineItemListResponse
     */
    'itemSize'?: SizeType;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponse
     */
    'itemBrand'?: string | null;
    /**
     * 
     * @type {GenderType}
     * @memberof OrderLineItemListResponse
     */
    'itemGender'?: GenderType;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderLineItemListResponse
     */
    'itemImage'?: Array<string> | null;
    /**
     * 
     * @type {FashionItemStatus}
     * @memberof OrderLineItemListResponse
     */
    'itemStatus'?: FashionItemStatus;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponse
     */
    'shopAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponse
     */
    'shopId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponse
     */
    'pointPackageId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponse
     */
    'paymentDate'?: string | null;
}


/**
 * 
 * @export
 * @interface OrderLineItemListResponsePaginationResponse
 */
export interface OrderLineItemListResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof OrderLineItemListResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItemListResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderLineItemListResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemListResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItemListResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItemListResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OrderLineItemListResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrderLineItemListResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<OrderLineItemListResponse>}
     * @memberof OrderLineItemListResponsePaginationResponse
     */
    'items'?: Array<OrderLineItemListResponse> | null;
}
/**
 * 
 * @export
 * @interface OrderListResponse
 */
export interface OrderListResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderListResponse
     */
    'orderId'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderListResponse
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderListResponse
     */
    'totalPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderListResponse
     */
    'orderCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderListResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {PaymentMethod}
     * @memberof OrderListResponse
     */
    'paymentMethod'?: PaymentMethod;
    /**
     * 
     * @type {string}
     * @memberof OrderListResponse
     */
    'paymentDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderListResponse
     */
    'completedDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderListResponse
     */
    'memberId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderListResponse
     */
    'customerName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderListResponse
     */
    'recipientName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderListResponse
     */
    'contactNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderListResponse
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderListResponse
     */
    'email'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderListResponse
     */
    'shippingFee'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderListResponse
     */
    'discount'?: number;
    /**
     * 
     * @type {PurchaseType}
     * @memberof OrderListResponse
     */
    'purchaseType'?: PurchaseType;
    /**
     * 
     * @type {OrderStatus}
     * @memberof OrderListResponse
     */
    'status'?: OrderStatus;
    /**
     * 
     * @type {string}
     * @memberof OrderListResponse
     */
    'auctionTitle'?: string | null;
}


/**
 * 
 * @export
 * @interface OrderListResponsePaginationResponse
 */
export interface OrderListResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof OrderListResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderListResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderListResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderListResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof OrderListResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderListResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderListResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OrderListResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrderListResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<OrderListResponse>}
     * @memberof OrderListResponsePaginationResponse
     */
    'items'?: Array<OrderListResponse> | null;
}
/**
 * 
 * @export
 * @interface OrderResponse
 */
export interface OrderResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'orderId'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderResponse
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderResponse
     */
    'totalPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'orderCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {PaymentMethod}
     * @memberof OrderResponse
     */
    'paymentMethod'?: PaymentMethod;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'paymentDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'completedDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'memberId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'customerName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'recipientName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'contactNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'email'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderResponse
     */
    'shippingFee'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderResponse
     */
    'discount'?: number;
    /**
     * 
     * @type {PurchaseType}
     * @memberof OrderResponse
     */
    'purchaseType'?: PurchaseType;
    /**
     * 
     * @type {OrderStatus}
     * @memberof OrderResponse
     */
    'status'?: OrderStatus;
    /**
     * 
     * @type {Array<ShopOrderResponse>}
     * @memberof OrderResponse
     */
    'shopOrderResponses'?: Array<ShopOrderResponse> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderResponse
     */
    'listItemNotAvailable'?: Array<string> | null;
    /**
     * 
     * @type {Array<OrderLineItemDetailedResponse>}
     * @memberof OrderResponse
     */
    'orderLineItems'?: Array<OrderLineItemDetailedResponse> | null;
}


/**
 * 
 * @export
 * @interface OrderResponsePaginationResponse
 */
export interface OrderResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof OrderResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof OrderResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OrderResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrderResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<OrderResponse>}
     * @memberof OrderResponsePaginationResponse
     */
    'items'?: Array<OrderResponse> | null;
}
/**
 * 
 * @export
 * @interface OrderResponsePaginationResponseResult
 */
export interface OrderResponsePaginationResponseResult {
    /**
     * 
     * @type {OrderResponsePaginationResponse}
     * @memberof OrderResponsePaginationResponseResult
     */
    'data'?: OrderResponsePaginationResponse;
    /**
     * 
     * @type {ResultStatus}
     * @memberof OrderResponsePaginationResponseResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderResponsePaginationResponseResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface OrderResponseResult
 */
export interface OrderResponseResult {
    /**
     * 
     * @type {OrderResponse}
     * @memberof OrderResponseResult
     */
    'data'?: OrderResponse;
    /**
     * 
     * @type {ResultStatus}
     * @memberof OrderResponseResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderResponseResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const OrderStatus = {
    AwaitingPayment: 'AwaitingPayment',
    OnDelivery: 'OnDelivery',
    Completed: 'Completed',
    Cancelled: 'Cancelled',
    Pending: 'Pending'
} as const;

export type OrderStatus = typeof OrderStatus[keyof typeof OrderStatus];


/**
 * 
 * @export
 * @enum {string}
 */

export const Ordinates = {
    None: 'None',
    X: 'X',
    Y: 'Y',
    Xy: 'XY',
    Z: 'Z',
    Xyz: 'XYZ',
    Spatial4: 'Spatial4',
    Spatial5: 'Spatial5',
    Spatial6: 'Spatial6',
    Spatial7: 'Spatial7',
    Spatial8: 'Spatial8',
    Spatial9: 'Spatial9',
    Spatial10: 'Spatial10',
    Spatial11: 'Spatial11',
    Spatial12: 'Spatial12',
    Spatial13: 'Spatial13',
    Spatial14: 'Spatial14',
    Spatial15: 'Spatial15',
    Spatial16: 'Spatial16',
    AllSpatialOrdinates: 'AllSpatialOrdinates',
    M: 'M',
    Xym: 'XYM',
    Xyzm: 'XYZM',
    Measure2: 'Measure2',
    Measure3: 'Measure3',
    Measure4: 'Measure4',
    Measure5: 'Measure5',
    Measure6: 'Measure6',
    Measure7: 'Measure7',
    Measure8: 'Measure8',
    Measure9: 'Measure9',
    Measure10: 'Measure10',
    Measure11: 'Measure11',
    Measure12: 'Measure12',
    Measure13: 'Measure13',
    Measure14: 'Measure14',
    Measure15: 'Measure15',
    Measure16: 'Measure16',
    AllMeasureOrdinates: 'AllMeasureOrdinates',
    AllOrdinates: 'AllOrdinates'
} as const;

export type Ordinates = typeof Ordinates[keyof typeof Ordinates];


/**
 * 
 * @export
 * @interface PayOrderWithCashRequest
 */
export interface PayOrderWithCashRequest {
    /**
     * 
     * @type {number}
     * @memberof PayOrderWithCashRequest
     */
    'amountGiven': number;
}
/**
 * 
 * @export
 * @interface PayOrderWithCashResponse
 */
export interface PayOrderWithCashResponse {
    /**
     * 
     * @type {string}
     * @memberof PayOrderWithCashResponse
     */
    'orderId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PayOrderWithCashResponse
     */
    'amountGiven'?: number;
    /**
     * 
     * @type {OrderResponse}
     * @memberof PayOrderWithCashResponse
     */
    'order'?: OrderResponse;
    /**
     * 
     * @type {number}
     * @memberof PayOrderWithCashResponse
     */
    'change'?: number;
}
/**
 * 
 * @export
 * @interface PayWithPointsResponse
 */
export interface PayWithPointsResponse {
    /**
     * 
     * @type {boolean}
     * @memberof PayWithPointsResponse
     */
    'sucess'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PayWithPointsResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PayWithPointsResponse
     */
    'orderId'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PaymentMethod = {
    Cod: 'COD',
    Point: 'Point',
    QrCode: 'QRCode',
    Cash: 'Cash'
} as const;

export type PaymentMethod = typeof PaymentMethod[keyof typeof PaymentMethod];


/**
 * 
 * @export
 * @interface Point
 */
export interface Point {
    /**
     * 
     * @type {GeometryFactory}
     * @memberof Point
     */
    'factory'?: GeometryFactory;
    /**
     * 
     * @type {any}
     * @memberof Point
     */
    'userData'?: any | null;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'srid'?: number;
    /**
     * 
     * @type {PrecisionModel}
     * @memberof Point
     */
    'precisionModel'?: PrecisionModel;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'numGeometries'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Point
     */
    'isSimple'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Point
     */
    'isValid'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'area'?: number;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'length'?: number;
    /**
     * 
     * @type {Point}
     * @memberof Point
     */
    'centroid'?: Point;
    /**
     * 
     * @type {Point}
     * @memberof Point
     */
    'interiorPoint'?: Point;
    /**
     * 
     * @type {Point}
     * @memberof Point
     */
    'pointOnSurface'?: Point;
    /**
     * 
     * @type {Geometry}
     * @memberof Point
     */
    'envelope'?: Geometry;
    /**
     * 
     * @type {Envelope}
     * @memberof Point
     */
    'envelopeInternal'?: Envelope;
    /**
     * 
     * @type {boolean}
     * @memberof Point
     */
    'isRectangle'?: boolean;
    /**
     * 
     * @type {CoordinateSequence}
     * @memberof Point
     */
    'coordinateSequence'?: CoordinateSequence;
    /**
     * 
     * @type {Array<Coordinate>}
     * @memberof Point
     */
    'coordinates'?: Array<Coordinate> | null;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'numPoints'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Point
     */
    'isEmpty'?: boolean;
    /**
     * 
     * @type {Dimension}
     * @memberof Point
     */
    'dimension'?: Dimension;
    /**
     * 
     * @type {Dimension}
     * @memberof Point
     */
    'boundaryDimension'?: Dimension;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'y'?: number;
    /**
     * 
     * @type {Coordinate}
     * @memberof Point
     */
    'coordinate'?: Coordinate;
    /**
     * 
     * @type {string}
     * @memberof Point
     */
    'geometryType'?: string | null;
    /**
     * 
     * @type {OgcGeometryType}
     * @memberof Point
     */
    'ogcGeometryType'?: OgcGeometryType;
    /**
     * 
     * @type {Geometry}
     * @memberof Point
     */
    'boundary'?: Geometry;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'z'?: number;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'm'?: number;
}


/**
 * 
 * @export
 * @interface PointPackage
 */
export interface PointPackage {
    /**
     * 
     * @type {string}
     * @memberof PointPackage
     */
    'pointPackageId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PointPackage
     */
    'points'?: number;
    /**
     * 
     * @type {number}
     * @memberof PointPackage
     */
    'price'?: number;
    /**
     * 
     * @type {PointPackageStatus}
     * @memberof PointPackage
     */
    'status'?: PointPackageStatus;
    /**
     * 
     * @type {string}
     * @memberof PointPackage
     */
    'createdDate'?: string;
    /**
     * 
     * @type {Array<OrderLineItem>}
     * @memberof PointPackage
     */
    'orderLineItems'?: Array<OrderLineItem> | null;
}


/**
 * 
 * @export
 * @interface PointPackageDetailResponse
 */
export interface PointPackageDetailResponse {
    /**
     * 
     * @type {string}
     * @memberof PointPackageDetailResponse
     */
    'pointPackageId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PointPackageDetailResponse
     */
    'points'?: number;
    /**
     * 
     * @type {number}
     * @memberof PointPackageDetailResponse
     */
    'price'?: number;
    /**
     * 
     * @type {PointPackageStatus}
     * @memberof PointPackageDetailResponse
     */
    'status'?: PointPackageStatus;
}


/**
 * 
 * @export
 * @interface PointPackageListResponse
 */
export interface PointPackageListResponse {
    /**
     * 
     * @type {string}
     * @memberof PointPackageListResponse
     */
    'pointPackageId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PointPackageListResponse
     */
    'points'?: number;
    /**
     * 
     * @type {number}
     * @memberof PointPackageListResponse
     */
    'price'?: number;
    /**
     * 
     * @type {PointPackageStatus}
     * @memberof PointPackageListResponse
     */
    'status'?: PointPackageStatus;
}


/**
 * 
 * @export
 * @interface PointPackageListResponsePaginationResponse
 */
export interface PointPackageListResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof PointPackageListResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PointPackageListResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof PointPackageListResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof PointPackageListResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof PointPackageListResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PointPackageListResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof PointPackageListResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PointPackageListResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PointPackageListResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<PointPackageListResponse>}
     * @memberof PointPackageListResponsePaginationResponse
     */
    'items'?: Array<PointPackageListResponse> | null;
}
/**
 * 
 * @export
 * @interface PointPackagePurchaseResponse
 */
export interface PointPackagePurchaseResponse {
    /**
     * 
     * @type {string}
     * @memberof PointPackagePurchaseResponse
     */
    'paymentUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PointPackagePurchaseResponse
     */
    'orderCode'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PointPackageStatus = {
    Active: 'Active',
    Inactive: 'Inactive'
} as const;

export type PointPackageStatus = typeof PointPackageStatus[keyof typeof PointPackageStatus];


/**
 * 
 * @export
 * @interface PrecisionModel
 */
export interface PrecisionModel {
    /**
     * 
     * @type {boolean}
     * @memberof PrecisionModel
     */
    'isFloating'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PrecisionModel
     */
    'maximumSignificantDigits'?: number;
    /**
     * 
     * @type {number}
     * @memberof PrecisionModel
     */
    'scale'?: number;
    /**
     * 
     * @type {number}
     * @memberof PrecisionModel
     */
    'gridSize'?: number;
    /**
     * 
     * @type {PrecisionModels}
     * @memberof PrecisionModel
     */
    'precisionModelType'?: PrecisionModels;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const PrecisionModels = {
    Floating: 'Floating',
    FloatingSingle: 'FloatingSingle',
    Fixed: 'Fixed'
} as const;

export type PrecisionModels = typeof PrecisionModels[keyof typeof PrecisionModels];


/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface PurchaseOrderRequest
 */
export interface PurchaseOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof PurchaseOrderRequest
     */
    'memberId'?: string;
}
/**
 * 
 * @export
 * @interface PurchasePointPackageRequest
 */
export interface PurchasePointPackageRequest {
    /**
     * 
     * @type {string}
     * @memberof PurchasePointPackageRequest
     */
    'memberId'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PurchaseType = {
    Online: 'Online',
    Offline: 'Offline'
} as const;

export type PurchaseType = typeof PurchaseType[keyof typeof PurchaseType];


/**
 * 
 * @export
 * @interface Refund
 */
export interface Refund {
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    'refundId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Refund
     */
    'refundPercentage'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    'responseFromShop'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    'orderLineItemId'?: string;
    /**
     * 
     * @type {OrderLineItem}
     * @memberof Refund
     */
    'orderLineItem'?: OrderLineItem;
    /**
     * 
     * @type {RefundStatus}
     * @memberof Refund
     */
    'refundStatus'?: RefundStatus;
    /**
     * 
     * @type {Transaction}
     * @memberof Refund
     */
    'transaction'?: Transaction;
    /**
     * 
     * @type {Array<Image>}
     * @memberof Refund
     */
    'images'?: Array<Image> | null;
}


/**
 * 
 * @export
 * @interface RefundResponse
 */
export interface RefundResponse {
    /**
     * 
     * @type {string}
     * @memberof RefundResponse
     */
    'refundId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RefundResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RefundResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof RefundResponse
     */
    'orderLineItemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RefundResponse
     */
    'customerName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RefundResponse
     */
    'customerPhone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RefundResponse
     */
    'customerEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RefundResponse
     */
    'responseFromShop'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RefundResponse
     */
    'refundPercentage'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RefundResponse
     */
    'refundAmount'?: number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof RefundResponse
     */
    'images'?: Array<string> | null;
    /**
     * 
     * @type {RefundStatus}
     * @memberof RefundResponse
     */
    'refundStatus'?: RefundStatus;
    /**
     * 
     * @type {OrderLineItemDetailedResponse}
     * @memberof RefundResponse
     */
    'orderLineItemDetailedResponse'?: OrderLineItemDetailedResponse;
    /**
     * 
     * @type {GetTransactionsResponse}
     * @memberof RefundResponse
     */
    'transactionsResponse'?: GetTransactionsResponse;
}


/**
 * 
 * @export
 * @interface RefundResponsePaginationResponse
 */
export interface RefundResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof RefundResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefundResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof RefundResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof RefundResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof RefundResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RefundResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefundResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof RefundResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RefundResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<RefundResponse>}
     * @memberof RefundResponsePaginationResponse
     */
    'items'?: Array<RefundResponse> | null;
}
/**
 * 
 * @export
 * @interface RefundResponsePaginationResponseResult
 */
export interface RefundResponsePaginationResponseResult {
    /**
     * 
     * @type {RefundResponsePaginationResponse}
     * @memberof RefundResponsePaginationResponseResult
     */
    'data'?: RefundResponsePaginationResponse;
    /**
     * 
     * @type {ResultStatus}
     * @memberof RefundResponsePaginationResponseResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof RefundResponsePaginationResponseResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface RefundResponseResult
 */
export interface RefundResponseResult {
    /**
     * 
     * @type {RefundResponse}
     * @memberof RefundResponseResult
     */
    'data'?: RefundResponse;
    /**
     * 
     * @type {ResultStatus}
     * @memberof RefundResponseResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof RefundResponseResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const RefundStatus = {
    Pending: 'Pending',
    Approved: 'Approved',
    Rejected: 'Rejected',
    Completed: 'Completed'
} as const;

export type RefundStatus = typeof RefundStatus[keyof typeof RefundStatus];


/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'fullname': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'confirmPassword': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ResultStatus = {
    Success: 'Success',
    NotFound: 'NotFound',
    Duplicated: 'Duplicated',
    Error: 'Error'
} as const;

export type ResultStatus = typeof ResultStatus[keyof typeof ResultStatus];


/**
 * 
 * @export
 * @enum {string}
 */

export const Roles = {
    Account: 'Account',
    Staff: 'Staff',
    Member: 'Member',
    Admin: 'Admin'
} as const;

export type Roles = typeof Roles[keyof typeof Roles];


/**
 * 
 * @export
 * @interface ShippingFeeResult
 */
export interface ShippingFeeResult {
    /**
     * 
     * @type {number}
     * @memberof ShippingFeeResult
     */
    'shippingFee'?: number;
    /**
     * 
     * @type {Array<ShippingLocation>}
     * @memberof ShippingFeeResult
     */
    'shopLocation'?: Array<ShippingLocation> | null;
    /**
     * 
     * @type {ShippingLocation}
     * @memberof ShippingFeeResult
     */
    'shippingDestination'?: ShippingLocation;
}
/**
 * 
 * @export
 * @interface ShippingLocation
 */
export interface ShippingLocation {
    /**
     * 
     * @type {string}
     * @memberof ShippingLocation
     */
    'address'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingLocation
     */
    'districtId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShippingLocation
     */
    'wardCode'?: number;
}
/**
 * 
 * @export
 * @interface Shop
 */
export interface Shop {
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'shopId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'address'?: string | null;
    /**
     * 
     * @type {Staff}
     * @memberof Shop
     */
    'staff'?: Staff;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'staffId'?: string;
    /**
     * 
     * @type {number}
     * @memberof Shop
     */
    'ghnShopId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Shop
     */
    'ghnDistrictId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'ghnWardCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'shopCode'?: string | null;
    /**
     * 
     * @type {Point}
     * @memberof Shop
     */
    'location'?: Point;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'createdDate'?: string;
    /**
     * 
     * @type {Array<MasterFashionItem>}
     * @memberof Shop
     */
    'masterFashionItems'?: Array<MasterFashionItem> | null;
}
/**
 * 
 * @export
 * @interface ShopAuctionDetailResponse
 */
export interface ShopAuctionDetailResponse {
    /**
     * 
     * @type {string}
     * @memberof ShopAuctionDetailResponse
     */
    'shopId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopAuctionDetailResponse
     */
    'address'?: string | null;
}
/**
 * 
 * @export
 * @interface ShopDetailResponse
 */
export interface ShopDetailResponse {
    /**
     * 
     * @type {string}
     * @memberof ShopDetailResponse
     */
    'shopId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopDetailResponse
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopDetailResponse
     */
    'staffId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopDetailResponse
     */
    'phone'?: string | null;
}
/**
 * 
 * @export
 * @interface ShopDetailResponseListResult
 */
export interface ShopDetailResponseListResult {
    /**
     * 
     * @type {Array<ShopDetailResponse>}
     * @memberof ShopDetailResponseListResult
     */
    'data'?: Array<ShopDetailResponse> | null;
    /**
     * 
     * @type {ResultStatus}
     * @memberof ShopDetailResponseListResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShopDetailResponseListResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface ShopDetailResponseResult
 */
export interface ShopDetailResponseResult {
    /**
     * 
     * @type {ShopDetailResponse}
     * @memberof ShopDetailResponseResult
     */
    'data'?: ShopDetailResponse;
    /**
     * 
     * @type {ResultStatus}
     * @memberof ShopDetailResponseResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShopDetailResponseResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface ShopOrderResponse
 */
export interface ShopOrderResponse {
    /**
     * 
     * @type {string}
     * @memberof ShopOrderResponse
     */
    'shopId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopOrderResponse
     */
    'shopAddress'?: string | null;
    /**
     * 
     * @type {Array<FashionItemDetailResponseOrderLineItemResponse>}
     * @memberof ShopOrderResponse
     */
    'items'?: Array<FashionItemDetailResponseOrderLineItemResponse> | null;
}
/**
 * 
 * @export
 * @interface ShopRevenueDto
 */
export interface ShopRevenueDto {
    /**
     * 
     * @type {string}
     * @memberof ShopRevenueDto
     */
    'shopId'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShopRevenueDto
     */
    'totalRevenue'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShopRevenueDto
     */
    'directSalesRevenue'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShopRevenueDto
     */
    'consignorPayouts'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShopRevenueDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopRevenueDto
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SizeType = {
    Xs: 'XS',
    S: 'S',
    M: 'M',
    L: 'L',
    Xl: 'XL',
    Xxl: 'XXL',
    Xxxl: 'XXXL',
    Xxxxl: 'XXXXL'
} as const;

export type SizeType = typeof SizeType[keyof typeof SizeType];


/**
 * 
 * @export
 * @interface Staff
 */
export interface Staff {
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    'accountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    'passwordHash'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    'passwordSalt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    'fullname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    'verifiedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    'passwordResetToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    'resetTokenExpires'?: string | null;
    /**
     * 
     * @type {Roles}
     * @memberof Staff
     */
    'role'?: Roles;
    /**
     * 
     * @type {AccountStatus}
     * @memberof Staff
     */
    'status'?: AccountStatus;
    /**
     * 
     * @type {number}
     * @memberof Staff
     */
    'balance'?: number;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    'createdDate'?: string;
    /**
     * 
     * @type {Shop}
     * @memberof Staff
     */
    'shop'?: Shop;
}


/**
 * 
 * @export
 * @interface StringResult
 */
export interface StringResult {
    /**
     * 
     * @type {string}
     * @memberof StringResult
     */
    'data'?: string | null;
    /**
     * 
     * @type {ResultStatus}
     * @memberof StringResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof StringResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @interface SystemRevenueDto
 */
export interface SystemRevenueDto {
    /**
     * 
     * @type {number}
     * @memberof SystemRevenueDto
     */
    'totalRevenue'?: number;
    /**
     * 
     * @type {string}
     * @memberof SystemRevenueDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemRevenueDto
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'transactionId'?: string;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'createdDate'?: string;
    /**
     * 
     * @type {TransactionType}
     * @memberof Transaction
     */
    'type'?: TransactionType;
    /**
     * 
     * @type {Order}
     * @memberof Transaction
     */
    'order'?: Order;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'orderId'?: string | null;
    /**
     * 
     * @type {Refund}
     * @memberof Transaction
     */
    'refund'?: Refund;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'refundId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'consignSaleId'?: string | null;
    /**
     * 
     * @type {ConsignSale}
     * @memberof Transaction
     */
    'consignSale'?: ConsignSale;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'withdrawId'?: string | null;
    /**
     * 
     * @type {Withdraw}
     * @memberof Transaction
     */
    'withdraw'?: Withdraw;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'memberId'?: string | null;
    /**
     * 
     * @type {Member}
     * @memberof Transaction
     */
    'member'?: Member;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'vnPayTransactionNumber'?: string | null;
    /**
     * 
     * @type {AuctionDeposit}
     * @memberof Transaction
     */
    'auctionDeposit'?: AuctionDeposit;
}


/**
 * 
 * @export
 * @interface TransactionDetailResponse
 */
export interface TransactionDetailResponse {
    /**
     * 
     * @type {string}
     * @memberof TransactionDetailResponse
     */
    'transactionId'?: string;
    /**
     * 
     * @type {number}
     * @memberof TransactionDetailResponse
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionDetailResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionDetailResponse
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionDetailResponse
     */
    'orderId'?: string;
    /**
     * 
     * @type {OrderDetailedResponse}
     * @memberof TransactionDetailResponse
     */
    'order'?: OrderDetailedResponse;
    /**
     * 
     * @type {string}
     * @memberof TransactionDetailResponse
     */
    'walletId'?: string;
    /**
     * 
     * @type {WalletDetailResponse}
     * @memberof TransactionDetailResponse
     */
    'wallet'?: WalletDetailResponse;
}
/**
 * 
 * @export
 * @interface TransactionRequest
 */
export interface TransactionRequest {
    /**
     * 
     * @type {number}
     * @memberof TransactionRequest
     */
    'page'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TransactionRequest
     */
    'pageSize'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionRequest
     */
    'shopId'?: string | null;
    /**
     * 
     * @type {TransactionType}
     * @memberof TransactionRequest
     */
    'transactionType'?: TransactionType;
}


/**
 * 
 * @export
 * @interface TransactionResponse
 */
export interface TransactionResponse {
    /**
     * 
     * @type {string}
     * @memberof TransactionResponse
     */
    'transactionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponse
     */
    'orderId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponse
     */
    'orderCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponse
     */
    'consignSaleId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponse
     */
    'consignSaleCode'?: string | null;
    /**
     * 
     * @type {TransactionType}
     * @memberof TransactionResponse
     */
    'transactionType'?: TransactionType;
    /**
     * 
     * @type {number}
     * @memberof TransactionResponse
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponse
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponse
     */
    'customerName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponse
     */
    'customerPhone'?: string | null;
}


/**
 * 
 * @export
 * @interface TransactionResponsePaginationResponse
 */
export interface TransactionResponsePaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof TransactionResponsePaginationResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionResponsePaginationResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponsePaginationResponse
     */
    'searchTerm'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof TransactionResponsePaginationResponse
     */
    'filters'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponsePaginationResponse
     */
    'orderBy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TransactionResponsePaginationResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionResponsePaginationResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TransactionResponsePaginationResponse
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TransactionResponsePaginationResponse
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {Array<TransactionResponse>}
     * @memberof TransactionResponsePaginationResponse
     */
    'items'?: Array<TransactionResponse> | null;
}
/**
 * 
 * @export
 * @interface TransactionResponsePaginationResponseResult
 */
export interface TransactionResponsePaginationResponseResult {
    /**
     * 
     * @type {TransactionResponsePaginationResponse}
     * @memberof TransactionResponsePaginationResponseResult
     */
    'data'?: TransactionResponsePaginationResponse;
    /**
     * 
     * @type {ResultStatus}
     * @memberof TransactionResponsePaginationResponseResult
     */
    'resultStatus'?: ResultStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof TransactionResponsePaginationResponseResult
     */
    'messages'?: Array<string> | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const TransactionType = {
    AuctionDeposit: 'AuctionDeposit',
    Withdraw: 'Withdraw',
    Purchase: 'Purchase',
    Refund: 'Refund',
    Recharge: 'Recharge',
    Payout: 'Payout'
} as const;

export type TransactionType = typeof TransactionType[keyof typeof TransactionType];


/**
 * 
 * @export
 * @interface UpdateAccountRequest
 */
export interface UpdateAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateAccountRequest
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAccountRequest
     */
    'fullname': string;
}
/**
 * 
 * @export
 * @interface UpdateAuctionRequest
 */
export interface UpdateAuctionRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateAuctionRequest
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateAuctionRequest
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateAuctionRequest
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateAuctionRequest
     */
    'shopId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateAuctionRequest
     */
    'auctionItemId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateAuctionRequest
     */
    'scheduleDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateAuctionRequest
     */
    'timeslotId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateAuctionRequest
     */
    'depositFee'?: number | null;
    /**
     * 
     * @type {AuctionStatus}
     * @memberof UpdateAuctionRequest
     */
    'status'?: AuctionStatus;
}


/**
 * 
 * @export
 * @interface UpdateBankAccountRequest
 */
export interface UpdateBankAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateBankAccountRequest
     */
    'bankName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateBankAccountRequest
     */
    'bankAccountName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateBankAccountRequest
     */
    'bankAccountNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateBankAccountRequest
     */
    'isDefault'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateBankAccountRequest
     */
    'bankLogo'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateBankAccountResponse
 */
export interface UpdateBankAccountResponse {
    /**
     * 
     * @type {string}
     * @memberof UpdateBankAccountResponse
     */
    'bankName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateBankAccountResponse
     */
    'bankAccountName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateBankAccountResponse
     */
    'bankAccountNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateBankAccountResponse
     */
    'isDefault'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateBankAccountResponse
     */
    'bankAccountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBankAccountResponse
     */
    'memberId'?: string;
}
/**
 * 
 * @export
 * @interface UpdateDeliveryRequest
 */
export interface UpdateDeliveryRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateDeliveryRequest
     */
    'recipientName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateDeliveryRequest
     */
    'phone'?: string | null;
    /**
     * 
     * @type {AddressType}
     * @memberof UpdateDeliveryRequest
     */
    'addressType'?: AddressType;
    /**
     * 
     * @type {number}
     * @memberof UpdateDeliveryRequest
     */
    'ghnProvinceId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateDeliveryRequest
     */
    'ghnDistrictId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateDeliveryRequest
     */
    'ghnWardCode'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateDeliveryRequest
     */
    'residence'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateDeliveryRequest
     */
    'isDefault'?: boolean;
}


/**
 * 
 * @export
 * @interface UpdateFashionItemRequest
 */
export interface UpdateFashionItemRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateFashionItemRequest
     */
    'sellingPrice'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateFashionItemRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateFashionItemRequest
     */
    'note'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateFashionItemRequest
     */
    'condition'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateFashionItemRequest
     */
    'brand'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateFashionItemRequest
     */
    'color'?: string | null;
    /**
     * 
     * @type {GenderType}
     * @memberof UpdateFashionItemRequest
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {SizeType}
     * @memberof UpdateFashionItemRequest
     */
    'size'?: SizeType;
    /**
     * 
     * @type {string}
     * @memberof UpdateFashionItemRequest
     */
    'categoryId'?: string | null;
}


/**
 * 
 * @export
 * @interface UpdateFashionItemStatusRequest
 */
export interface UpdateFashionItemStatusRequest {
    /**
     * 
     * @type {FashionItemStatus}
     * @memberof UpdateFashionItemStatusRequest
     */
    'status'?: FashionItemStatus;
}


/**
 * 
 * @export
 * @interface UpdateMasterImageRequest
 */
export interface UpdateMasterImageRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateMasterImageRequest
     */
    'imageId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMasterImageRequest
     */
    'url'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateMasterItemRequest
 */
export interface UpdateMasterItemRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateMasterItemRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateMasterItemRequest
     */
    'brand'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateMasterItemRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateMasterItemRequest
     */
    'categoryId'?: string | null;
    /**
     * 
     * @type {GenderType}
     * @memberof UpdateMasterItemRequest
     */
    'gender'?: GenderType;
    /**
     * 
     * @type {number}
     * @memberof UpdateMasterItemRequest
     */
    'stockCount'?: number | null;
    /**
     * 
     * @type {Array<UpdateMasterImageRequest>}
     * @memberof UpdateMasterItemRequest
     */
    'imageRequests'?: Array<UpdateMasterImageRequest> | null;
}


/**
 * 
 * @export
 * @interface VnPayPurchaseResponse
 */
export interface VnPayPurchaseResponse {
    /**
     * 
     * @type {string}
     * @memberof VnPayPurchaseResponse
     */
    'paymentUrl'?: string | null;
}
/**
 * 
 * @export
 * @interface WalletDetailResponse
 */
export interface WalletDetailResponse {
    /**
     * 
     * @type {string}
     * @memberof WalletDetailResponse
     */
    'walletId'?: string;
    /**
     * 
     * @type {number}
     * @memberof WalletDetailResponse
     */
    'balance'?: number;
    /**
     * 
     * @type {string}
     * @memberof WalletDetailResponse
     */
    'memberId'?: string;
    /**
     * 
     * @type {MemberDetailResponse}
     * @memberof WalletDetailResponse
     */
    'member'?: MemberDetailResponse;
    /**
     * 
     * @type {string}
     * @memberof WalletDetailResponse
     */
    'bankAccountNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WalletDetailResponse
     */
    'bankName'?: string | null;
}
/**
 * 
 * @export
 * @interface Withdraw
 */
export interface Withdraw {
    /**
     * 
     * @type {string}
     * @memberof Withdraw
     */
    'withdrawId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Withdraw
     */
    'bank'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Withdraw
     */
    'bankAccountNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Withdraw
     */
    'bankAccountName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Withdraw
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Withdraw
     */
    'memberId'?: string;
    /**
     * 
     * @type {Member}
     * @memberof Withdraw
     */
    'member'?: Member;
    /**
     * 
     * @type {Transaction}
     * @memberof Withdraw
     */
    'transaction'?: Transaction;
    /**
     * 
     * @type {WithdrawStatus}
     * @memberof Withdraw
     */
    'status'?: WithdrawStatus;
    /**
     * 
     * @type {string}
     * @memberof Withdraw
     */
    'createdDate'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const WithdrawStatus = {
    Processing: 'Processing',
    Completed: 'Completed'
} as const;

export type WithdrawStatus = typeof WithdrawStatus[keyof typeof WithdrawStatus];



/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} accountId 
         * @param {string} bankAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdBankaccountsBankAccountIdDelete: async (accountId: string, bankAccountId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdBankaccountsBankAccountIdDelete', 'accountId', accountId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdBankaccountsBankAccountIdDelete', 'bankAccountId', bankAccountId)
            const localVarPath = `/api/accounts/{accountId}/bankaccounts/{bankAccountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountId 
         * @param {string} bankAccountId 
         * @param {UpdateBankAccountRequest} [updateBankAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdBankaccountsBankAccountIdPut: async (accountId: string, bankAccountId: string, updateBankAccountRequest?: UpdateBankAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdBankaccountsBankAccountIdPut', 'accountId', accountId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdBankaccountsBankAccountIdPut', 'bankAccountId', bankAccountId)
            const localVarPath = `/api/accounts/{accountId}/bankaccounts/{bankAccountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBankAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountId 
         * @param {string} bankAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdBankaccountsBankAccountIdSetDefaultPatch: async (accountId: string, bankAccountId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdBankaccountsBankAccountIdSetDefaultPatch', 'accountId', accountId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdBankaccountsBankAccountIdSetDefaultPatch', 'bankAccountId', bankAccountId)
            const localVarPath = `/api/accounts/{accountId}/bankaccounts/{bankAccountId}/set-default`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdBankaccountsGet: async (accountId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdBankaccountsGet', 'accountId', accountId)
            const localVarPath = `/api/accounts/{accountId}/bankaccounts`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountId 
         * @param {CreateBankAccountRequest} [createBankAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdBankaccountsPost: async (accountId: string, createBankAccountRequest?: CreateBankAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdBankaccountsPost', 'accountId', accountId)
            const localVarPath = `/api/accounts/{accountId}/bankaccounts`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBankAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountId 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {string} [consignSaleCode] 
         * @param {ConsignSaleStatus} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdConsignsalesGet: async (accountId: string, pageNumber?: number, pageSize?: number, shopId?: string, consignSaleCode?: string, status?: ConsignSaleStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdConsignsalesGet', 'accountId', accountId)
            const localVarPath = `/api/accounts/{accountId}/consignsales`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (shopId !== undefined) {
                localVarQueryParameter['ShopId'] = shopId;
            }

            if (consignSaleCode !== undefined) {
                localVarQueryParameter['ConsignSaleCode'] = consignSaleCode;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountId 
         * @param {CreateConsignSaleRequest} [createConsignSaleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdConsignsalesPost: async (accountId: string, createConsignSaleRequest?: CreateConsignSaleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdConsignsalesPost', 'accountId', accountId)
            const localVarPath = `/api/accounts/{accountId}/consignsales`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createConsignSaleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} deliveryId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdDeliveriesDeliveryIdDelete: async (deliveryId: string, accountId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deliveryId' is not null or undefined
            assertParamExists('apiAccountsAccountIdDeliveriesDeliveryIdDelete', 'deliveryId', deliveryId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdDeliveriesDeliveryIdDelete', 'accountId', accountId)
            const localVarPath = `/api/accounts/{accountId}/deliveries/{deliveryId}`
                .replace(`{${"deliveryId"}}`, encodeURIComponent(String(deliveryId)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} deliveryId 
         * @param {string} accountId 
         * @param {UpdateDeliveryRequest} [updateDeliveryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdDeliveriesDeliveryIdPut: async (deliveryId: string, accountId: string, updateDeliveryRequest?: UpdateDeliveryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deliveryId' is not null or undefined
            assertParamExists('apiAccountsAccountIdDeliveriesDeliveryIdPut', 'deliveryId', deliveryId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdDeliveriesDeliveryIdPut', 'accountId', accountId)
            const localVarPath = `/api/accounts/{accountId}/deliveries/{deliveryId}`
                .replace(`{${"deliveryId"}}`, encodeURIComponent(String(deliveryId)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDeliveryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdDeliveriesGet: async (accountId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdDeliveriesGet', 'accountId', accountId)
            const localVarPath = `/api/accounts/{accountId}/deliveries`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountId 
         * @param {DeliveryRequest} [deliveryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdDeliveriesPost: async (accountId: string, deliveryRequest?: DeliveryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdDeliveriesPost', 'accountId', accountId)
            const localVarPath = `/api/accounts/{accountId}/deliveries`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deliveryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountId 
         * @param {CreateInquiryRequest} [createInquiryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdInquiriesPost: async (accountId: string, createInquiryRequest?: CreateInquiryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdInquiriesPost', 'accountId', accountId)
            const localVarPath = `/api/accounts/{accountId}/inquiries`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createInquiryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountId 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {OrderStatus} [status] 
         * @param {PaymentMethod} [paymentMethod] 
         * @param {string} [orderCode] 
         * @param {boolean} [isFromAuction] 
         * @param {boolean} [isPointPackage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdOrdersGet: async (accountId: string, pageNumber?: number, pageSize?: number, shopId?: string, status?: OrderStatus, paymentMethod?: PaymentMethod, orderCode?: string, isFromAuction?: boolean, isPointPackage?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdOrdersGet', 'accountId', accountId)
            const localVarPath = `/api/accounts/{accountId}/orders`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (shopId !== undefined) {
                localVarQueryParameter['ShopId'] = shopId;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (paymentMethod !== undefined) {
                localVarQueryParameter['PaymentMethod'] = paymentMethod;
            }

            if (orderCode !== undefined) {
                localVarQueryParameter['OrderCode'] = orderCode;
            }

            if (isFromAuction !== undefined) {
                localVarQueryParameter['IsFromAuction'] = isFromAuction;
            }

            if (isPointPackage !== undefined) {
                localVarQueryParameter['IsPointPackage'] = isPointPackage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountId 
         * @param {CartRequest} [cartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdOrdersPost: async (accountId: string, cartRequest?: CartRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdOrdersPost', 'accountId', accountId)
            const localVarPath = `/api/accounts/{accountId}/orders`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cartRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountId 
         * @param {UpdateAccountRequest} [updateAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdPut: async (accountId: string, updateAccountRequest?: UpdateAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdPut', 'accountId', accountId)
            const localVarPath = `/api/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {Array<TransactionType>} [types] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdTransactionsGet: async (accountId: string, page?: number, pageSize?: number, types?: Array<TransactionType>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdTransactionsGet', 'accountId', accountId)
            const localVarPath = `/api/accounts/{accountId}/transactions`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (types) {
                localVarQueryParameter['Types'] = types;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {WithdrawStatus} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdWithdrawsGet: async (accountId: string, page?: number, pageSize?: number, status?: WithdrawStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdWithdrawsGet', 'accountId', accountId)
            const localVarPath = `/api/accounts/{accountId}/withdraws`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountId 
         * @param {CreateWithdrawRequest} [createWithdrawRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdWithdrawsPost: async (accountId: string, createWithdrawRequest?: CreateWithdrawRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsAccountIdWithdrawsPost', 'accountId', accountId)
            const localVarPath = `/api/accounts/{accountId}/withdraws`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWithdrawRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [searchTerm] 
         * @param {string} [phone] 
         * @param {Roles} [role] 
         * @param {Array<AccountStatus>} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsGet: async (page?: number, pageSize?: number, searchTerm?: string, phone?: string, role?: Roles, status?: Array<AccountStatus>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }

            if (phone !== undefined) {
                localVarQueryParameter['Phone'] = phone;
            }

            if (role !== undefined) {
                localVarQueryParameter['Role'] = role;
            }

            if (status) {
                localVarQueryParameter['Status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsGetCurrentAccountPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts/get-current-account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsIdBanPut: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsIdBanPut', 'id', id)
            const localVarPath = `/api/accounts/{id}/ban`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsIdGet', 'id', id)
            const localVarPath = `/api/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} accountId 
         * @param {string} bankAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdBankaccountsBankAccountIdDelete(accountId: string, bankAccountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteBankAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdBankaccountsBankAccountIdDelete(accountId, bankAccountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdBankaccountsBankAccountIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accountId 
         * @param {string} bankAccountId 
         * @param {UpdateBankAccountRequest} [updateBankAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdBankaccountsBankAccountIdPut(accountId: string, bankAccountId: string, updateBankAccountRequest?: UpdateBankAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBankAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdBankaccountsBankAccountIdPut(accountId, bankAccountId, updateBankAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdBankaccountsBankAccountIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accountId 
         * @param {string} bankAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdBankaccountsBankAccountIdSetDefaultPatch(accountId: string, bankAccountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdBankaccountsBankAccountIdSetDefaultPatch(accountId, bankAccountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdBankaccountsBankAccountIdSetDefaultPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdBankaccountsGet(accountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankAccountsListResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdBankaccountsGet(accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdBankaccountsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accountId 
         * @param {CreateBankAccountRequest} [createBankAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdBankaccountsPost(accountId: string, createBankAccountRequest?: CreateBankAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBankAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdBankaccountsPost(accountId, createBankAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdBankaccountsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accountId 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {string} [consignSaleCode] 
         * @param {ConsignSaleStatus} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdConsignsalesGet(accountId: string, pageNumber?: number, pageSize?: number, shopId?: string, consignSaleCode?: string, status?: ConsignSaleStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsignSaleDetailedResponsePaginationResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdConsignsalesGet(accountId, pageNumber, pageSize, shopId, consignSaleCode, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdConsignsalesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accountId 
         * @param {CreateConsignSaleRequest} [createConsignSaleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdConsignsalesPost(accountId: string, createConsignSaleRequest?: CreateConsignSaleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsignSaleDetailedResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdConsignsalesPost(accountId, createConsignSaleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdConsignsalesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} deliveryId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdDeliveriesDeliveryIdDelete(deliveryId: string, accountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdDeliveriesDeliveryIdDelete(deliveryId, accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdDeliveriesDeliveryIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} deliveryId 
         * @param {string} accountId 
         * @param {UpdateDeliveryRequest} [updateDeliveryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdDeliveriesDeliveryIdPut(deliveryId: string, accountId: string, updateDeliveryRequest?: UpdateDeliveryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryListResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdDeliveriesDeliveryIdPut(deliveryId, accountId, updateDeliveryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdDeliveriesDeliveryIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdDeliveriesGet(accountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryListResponseListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdDeliveriesGet(accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdDeliveriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accountId 
         * @param {DeliveryRequest} [deliveryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdDeliveriesPost(accountId: string, deliveryRequest?: DeliveryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryListResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdDeliveriesPost(accountId, deliveryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdDeliveriesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accountId 
         * @param {CreateInquiryRequest} [createInquiryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdInquiriesPost(accountId: string, createInquiryRequest?: CreateInquiryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateInquiryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdInquiriesPost(accountId, createInquiryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdInquiriesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accountId 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {OrderStatus} [status] 
         * @param {PaymentMethod} [paymentMethod] 
         * @param {string} [orderCode] 
         * @param {boolean} [isFromAuction] 
         * @param {boolean} [isPointPackage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdOrdersGet(accountId: string, pageNumber?: number, pageSize?: number, shopId?: string, status?: OrderStatus, paymentMethod?: PaymentMethod, orderCode?: string, isFromAuction?: boolean, isPointPackage?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponsePaginationResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdOrdersGet(accountId, pageNumber, pageSize, shopId, status, paymentMethod, orderCode, isFromAuction, isPointPackage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdOrdersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accountId 
         * @param {CartRequest} [cartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdOrdersPost(accountId: string, cartRequest?: CartRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdOrdersPost(accountId, cartRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdOrdersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accountId 
         * @param {UpdateAccountRequest} [updateAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdPut(accountId: string, updateAccountRequest?: UpdateAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdPut(accountId, updateAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accountId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {Array<TransactionType>} [types] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdTransactionsGet(accountId: string, page?: number, pageSize?: number, types?: Array<TransactionType>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTransactionsResponsePaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdTransactionsGet(accountId, page, pageSize, types, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdTransactionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accountId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {WithdrawStatus} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdWithdrawsGet(accountId: string, page?: number, pageSize?: number, status?: WithdrawStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWithdrawsResponsePaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdWithdrawsGet(accountId, page, pageSize, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdWithdrawsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accountId 
         * @param {CreateWithdrawRequest} [createWithdrawRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsAccountIdWithdrawsPost(accountId: string, createWithdrawRequest?: CreateWithdrawRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWithdrawResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsAccountIdWithdrawsPost(accountId, createWithdrawRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsAccountIdWithdrawsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [searchTerm] 
         * @param {string} [phone] 
         * @param {Roles} [role] 
         * @param {Array<AccountStatus>} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsGet(page?: number, pageSize?: number, searchTerm?: string, phone?: string, role?: Roles, status?: Array<AccountStatus>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponsePaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsGet(page, pageSize, searchTerm, phone, role, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsGetCurrentAccountPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsGetCurrentAccountPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsGetCurrentAccountPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsIdBanPut(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsIdBanPut(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsIdBanPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @param {string} accountId 
         * @param {string} bankAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdBankaccountsBankAccountIdDelete(accountId: string, bankAccountId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteBankAccountResponse> {
            return localVarFp.apiAccountsAccountIdBankaccountsBankAccountIdDelete(accountId, bankAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountId 
         * @param {string} bankAccountId 
         * @param {UpdateBankAccountRequest} [updateBankAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdBankaccountsBankAccountIdPut(accountId: string, bankAccountId: string, updateBankAccountRequest?: UpdateBankAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateBankAccountResponse> {
            return localVarFp.apiAccountsAccountIdBankaccountsBankAccountIdPut(accountId, bankAccountId, updateBankAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountId 
         * @param {string} bankAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdBankaccountsBankAccountIdSetDefaultPatch(accountId: string, bankAccountId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccountsAccountIdBankaccountsBankAccountIdSetDefaultPatch(accountId, bankAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdBankaccountsGet(accountId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<BankAccountsListResponse>> {
            return localVarFp.apiAccountsAccountIdBankaccountsGet(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountId 
         * @param {CreateBankAccountRequest} [createBankAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdBankaccountsPost(accountId: string, createBankAccountRequest?: CreateBankAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateBankAccountResponse> {
            return localVarFp.apiAccountsAccountIdBankaccountsPost(accountId, createBankAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountId 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {string} [consignSaleCode] 
         * @param {ConsignSaleStatus} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdConsignsalesGet(accountId: string, pageNumber?: number, pageSize?: number, shopId?: string, consignSaleCode?: string, status?: ConsignSaleStatus, options?: RawAxiosRequestConfig): AxiosPromise<ConsignSaleDetailedResponsePaginationResponseResult> {
            return localVarFp.apiAccountsAccountIdConsignsalesGet(accountId, pageNumber, pageSize, shopId, consignSaleCode, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountId 
         * @param {CreateConsignSaleRequest} [createConsignSaleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdConsignsalesPost(accountId: string, createConsignSaleRequest?: CreateConsignSaleRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConsignSaleDetailedResponseResult> {
            return localVarFp.apiAccountsAccountIdConsignsalesPost(accountId, createConsignSaleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} deliveryId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdDeliveriesDeliveryIdDelete(deliveryId: string, accountId: string, options?: RawAxiosRequestConfig): AxiosPromise<StringResult> {
            return localVarFp.apiAccountsAccountIdDeliveriesDeliveryIdDelete(deliveryId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} deliveryId 
         * @param {string} accountId 
         * @param {UpdateDeliveryRequest} [updateDeliveryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdDeliveriesDeliveryIdPut(deliveryId: string, accountId: string, updateDeliveryRequest?: UpdateDeliveryRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryListResponseResult> {
            return localVarFp.apiAccountsAccountIdDeliveriesDeliveryIdPut(deliveryId, accountId, updateDeliveryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdDeliveriesGet(accountId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryListResponseListResult> {
            return localVarFp.apiAccountsAccountIdDeliveriesGet(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountId 
         * @param {DeliveryRequest} [deliveryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdDeliveriesPost(accountId: string, deliveryRequest?: DeliveryRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryListResponseResult> {
            return localVarFp.apiAccountsAccountIdDeliveriesPost(accountId, deliveryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountId 
         * @param {CreateInquiryRequest} [createInquiryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdInquiriesPost(accountId: string, createInquiryRequest?: CreateInquiryRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateInquiryResponse> {
            return localVarFp.apiAccountsAccountIdInquiriesPost(accountId, createInquiryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountId 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {OrderStatus} [status] 
         * @param {PaymentMethod} [paymentMethod] 
         * @param {string} [orderCode] 
         * @param {boolean} [isFromAuction] 
         * @param {boolean} [isPointPackage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdOrdersGet(accountId: string, pageNumber?: number, pageSize?: number, shopId?: string, status?: OrderStatus, paymentMethod?: PaymentMethod, orderCode?: string, isFromAuction?: boolean, isPointPackage?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponsePaginationResponseResult> {
            return localVarFp.apiAccountsAccountIdOrdersGet(accountId, pageNumber, pageSize, shopId, status, paymentMethod, orderCode, isFromAuction, isPointPackage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountId 
         * @param {CartRequest} [cartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdOrdersPost(accountId: string, cartRequest?: CartRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponseResult> {
            return localVarFp.apiAccountsAccountIdOrdersPost(accountId, cartRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountId 
         * @param {UpdateAccountRequest} [updateAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdPut(accountId: string, updateAccountRequest?: UpdateAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccountResponseResult> {
            return localVarFp.apiAccountsAccountIdPut(accountId, updateAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {Array<TransactionType>} [types] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdTransactionsGet(accountId: string, page?: number, pageSize?: number, types?: Array<TransactionType>, options?: RawAxiosRequestConfig): AxiosPromise<GetTransactionsResponsePaginationResponse> {
            return localVarFp.apiAccountsAccountIdTransactionsGet(accountId, page, pageSize, types, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {WithdrawStatus} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdWithdrawsGet(accountId: string, page?: number, pageSize?: number, status?: WithdrawStatus, options?: RawAxiosRequestConfig): AxiosPromise<GetWithdrawsResponsePaginationResponse> {
            return localVarFp.apiAccountsAccountIdWithdrawsGet(accountId, page, pageSize, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountId 
         * @param {CreateWithdrawRequest} [createWithdrawRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdWithdrawsPost(accountId: string, createWithdrawRequest?: CreateWithdrawRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateWithdrawResponse> {
            return localVarFp.apiAccountsAccountIdWithdrawsPost(accountId, createWithdrawRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [searchTerm] 
         * @param {string} [phone] 
         * @param {Roles} [role] 
         * @param {Array<AccountStatus>} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsGet(page?: number, pageSize?: number, searchTerm?: string, phone?: string, role?: Roles, status?: Array<AccountStatus>, options?: RawAxiosRequestConfig): AxiosPromise<AccountResponsePaginationResponse> {
            return localVarFp.apiAccountsGet(page, pageSize, searchTerm, phone, role, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsGetCurrentAccountPost(options?: RawAxiosRequestConfig): AxiosPromise<AccountResponseResult> {
            return localVarFp.apiAccountsGetCurrentAccountPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsIdBanPut(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AccountResponseResult> {
            return localVarFp.apiAccountsIdBanPut(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AccountResponseResult> {
            return localVarFp.apiAccountsIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @param {string} accountId 
     * @param {string} bankAccountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdBankaccountsBankAccountIdDelete(accountId: string, bankAccountId: string, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdBankaccountsBankAccountIdDelete(accountId, bankAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountId 
     * @param {string} bankAccountId 
     * @param {UpdateBankAccountRequest} [updateBankAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdBankaccountsBankAccountIdPut(accountId: string, bankAccountId: string, updateBankAccountRequest?: UpdateBankAccountRequest, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdBankaccountsBankAccountIdPut(accountId, bankAccountId, updateBankAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountId 
     * @param {string} bankAccountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdBankaccountsBankAccountIdSetDefaultPatch(accountId: string, bankAccountId: string, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdBankaccountsBankAccountIdSetDefaultPatch(accountId, bankAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdBankaccountsGet(accountId: string, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdBankaccountsGet(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountId 
     * @param {CreateBankAccountRequest} [createBankAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdBankaccountsPost(accountId: string, createBankAccountRequest?: CreateBankAccountRequest, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdBankaccountsPost(accountId, createBankAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountId 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [shopId] 
     * @param {string} [consignSaleCode] 
     * @param {ConsignSaleStatus} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdConsignsalesGet(accountId: string, pageNumber?: number, pageSize?: number, shopId?: string, consignSaleCode?: string, status?: ConsignSaleStatus, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdConsignsalesGet(accountId, pageNumber, pageSize, shopId, consignSaleCode, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountId 
     * @param {CreateConsignSaleRequest} [createConsignSaleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdConsignsalesPost(accountId: string, createConsignSaleRequest?: CreateConsignSaleRequest, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdConsignsalesPost(accountId, createConsignSaleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} deliveryId 
     * @param {string} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdDeliveriesDeliveryIdDelete(deliveryId: string, accountId: string, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdDeliveriesDeliveryIdDelete(deliveryId, accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} deliveryId 
     * @param {string} accountId 
     * @param {UpdateDeliveryRequest} [updateDeliveryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdDeliveriesDeliveryIdPut(deliveryId: string, accountId: string, updateDeliveryRequest?: UpdateDeliveryRequest, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdDeliveriesDeliveryIdPut(deliveryId, accountId, updateDeliveryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdDeliveriesGet(accountId: string, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdDeliveriesGet(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountId 
     * @param {DeliveryRequest} [deliveryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdDeliveriesPost(accountId: string, deliveryRequest?: DeliveryRequest, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdDeliveriesPost(accountId, deliveryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountId 
     * @param {CreateInquiryRequest} [createInquiryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdInquiriesPost(accountId: string, createInquiryRequest?: CreateInquiryRequest, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdInquiriesPost(accountId, createInquiryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountId 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [shopId] 
     * @param {OrderStatus} [status] 
     * @param {PaymentMethod} [paymentMethod] 
     * @param {string} [orderCode] 
     * @param {boolean} [isFromAuction] 
     * @param {boolean} [isPointPackage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdOrdersGet(accountId: string, pageNumber?: number, pageSize?: number, shopId?: string, status?: OrderStatus, paymentMethod?: PaymentMethod, orderCode?: string, isFromAuction?: boolean, isPointPackage?: boolean, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdOrdersGet(accountId, pageNumber, pageSize, shopId, status, paymentMethod, orderCode, isFromAuction, isPointPackage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountId 
     * @param {CartRequest} [cartRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdOrdersPost(accountId: string, cartRequest?: CartRequest, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdOrdersPost(accountId, cartRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountId 
     * @param {UpdateAccountRequest} [updateAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdPut(accountId: string, updateAccountRequest?: UpdateAccountRequest, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdPut(accountId, updateAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountId 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {Array<TransactionType>} [types] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdTransactionsGet(accountId: string, page?: number, pageSize?: number, types?: Array<TransactionType>, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdTransactionsGet(accountId, page, pageSize, types, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountId 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {WithdrawStatus} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdWithdrawsGet(accountId: string, page?: number, pageSize?: number, status?: WithdrawStatus, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdWithdrawsGet(accountId, page, pageSize, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountId 
     * @param {CreateWithdrawRequest} [createWithdrawRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsAccountIdWithdrawsPost(accountId: string, createWithdrawRequest?: CreateWithdrawRequest, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsAccountIdWithdrawsPost(accountId, createWithdrawRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [searchTerm] 
     * @param {string} [phone] 
     * @param {Roles} [role] 
     * @param {Array<AccountStatus>} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsGet(page?: number, pageSize?: number, searchTerm?: string, phone?: string, role?: Roles, status?: Array<AccountStatus>, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsGet(page, pageSize, searchTerm, phone, role, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsGetCurrentAccountPost(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsGetCurrentAccountPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsIdBanPut(id: string, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsIdBanPut(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AddressApi - axios parameter creator
 * @export
 */
export const AddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAddressesAddressIdSetDefaultPatch: async (addressId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('apiAddressesAddressIdSetDefaultPatch', 'addressId', addressId)
            const localVarPath = `/api/addresses/{addressId}/set-default`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [provinceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAddressesDistrictsGet: async (provinceId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/addresses/districts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (provinceId !== undefined) {
                localVarQueryParameter['provinceId'] = provinceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAddressesProvincesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/addresses/provinces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [districtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAddressesWardsGet: async (districtId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/addresses/wards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (districtId !== undefined) {
                localVarQueryParameter['districtId'] = districtId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressApi - functional programming interface
 * @export
 */
export const AddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAddressesAddressIdSetDefaultPatch(addressId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAddressesAddressIdSetDefaultPatch(addressId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressApi.apiAddressesAddressIdSetDefaultPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [provinceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAddressesDistrictsGet(provinceId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GHNDistrictResponseListGHNApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAddressesDistrictsGet(provinceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressApi.apiAddressesDistrictsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAddressesProvincesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GHNProvinceResponseListGHNApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAddressesProvincesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressApi.apiAddressesProvincesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [districtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAddressesWardsGet(districtId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GHNWardResponseListGHNApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAddressesWardsGet(districtId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressApi.apiAddressesWardsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AddressApi - factory interface
 * @export
 */
export const AddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressApiFp(configuration)
    return {
        /**
         * 
         * @param {string} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAddressesAddressIdSetDefaultPatch(addressId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryListResponse> {
            return localVarFp.apiAddressesAddressIdSetDefaultPatch(addressId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [provinceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAddressesDistrictsGet(provinceId?: number, options?: RawAxiosRequestConfig): AxiosPromise<GHNDistrictResponseListGHNApiResponse> {
            return localVarFp.apiAddressesDistrictsGet(provinceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAddressesProvincesGet(options?: RawAxiosRequestConfig): AxiosPromise<GHNProvinceResponseListGHNApiResponse> {
            return localVarFp.apiAddressesProvincesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [districtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAddressesWardsGet(districtId?: number, options?: RawAxiosRequestConfig): AxiosPromise<GHNWardResponseListGHNApiResponse> {
            return localVarFp.apiAddressesWardsGet(districtId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressApi - object-oriented interface
 * @export
 * @class AddressApi
 * @extends {BaseAPI}
 */
export class AddressApi extends BaseAPI {
    /**
     * 
     * @param {string} addressId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public apiAddressesAddressIdSetDefaultPatch(addressId: string, options?: RawAxiosRequestConfig) {
        return AddressApiFp(this.configuration).apiAddressesAddressIdSetDefaultPatch(addressId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [provinceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public apiAddressesDistrictsGet(provinceId?: number, options?: RawAxiosRequestConfig) {
        return AddressApiFp(this.configuration).apiAddressesDistrictsGet(provinceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public apiAddressesProvincesGet(options?: RawAxiosRequestConfig) {
        return AddressApiFp(this.configuration).apiAddressesProvincesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [districtId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public apiAddressesWardsGet(districtId?: number, options?: RawAxiosRequestConfig) {
        return AddressApiFp(this.configuration).apiAddressesWardsGet(districtId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuctionApi - axios parameter creator
 * @export
 */
export const AuctionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} auctionId 
         * @param {string} depositId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsAuctionIdDepositsDepositIdDelete: async (auctionId: string, depositId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auctionId' is not null or undefined
            assertParamExists('apiAuctionsAuctionIdDepositsDepositIdDelete', 'auctionId', auctionId)
            // verify required parameter 'depositId' is not null or undefined
            assertParamExists('apiAuctionsAuctionIdDepositsDepositIdDelete', 'depositId', depositId)
            const localVarPath = `/api/auctions/{auctionId}/deposits/{depositId}`
                .replace(`{${"auctionId"}}`, encodeURIComponent(String(auctionId)))
                .replace(`{${"depositId"}}`, encodeURIComponent(String(depositId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {string} depositId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsAuctionIdDepositsDepositIdGet: async (auctionId: string, depositId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auctionId' is not null or undefined
            assertParamExists('apiAuctionsAuctionIdDepositsDepositIdGet', 'auctionId', auctionId)
            // verify required parameter 'depositId' is not null or undefined
            assertParamExists('apiAuctionsAuctionIdDepositsDepositIdGet', 'depositId', depositId)
            const localVarPath = `/api/auctions/{auctionId}/deposits/{depositId}`
                .replace(`{${"auctionId"}}`, encodeURIComponent(String(auctionId)))
                .replace(`{${"depositId"}}`, encodeURIComponent(String(depositId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {string} depositId 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsAuctionIdDepositsDepositIdPut: async (auctionId: string, depositId: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auctionId' is not null or undefined
            assertParamExists('apiAuctionsAuctionIdDepositsDepositIdPut', 'auctionId', auctionId)
            // verify required parameter 'depositId' is not null or undefined
            assertParamExists('apiAuctionsAuctionIdDepositsDepositIdPut', 'depositId', depositId)
            const localVarPath = `/api/auctions/{auctionId}/deposits/{depositId}`
                .replace(`{${"auctionId"}}`, encodeURIComponent(String(auctionId)))
                .replace(`{${"depositId"}}`, encodeURIComponent(String(depositId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsAuctionIdDepositsGet: async (auctionId: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auctionId' is not null or undefined
            assertParamExists('apiAuctionsAuctionIdDepositsGet', 'auctionId', auctionId)
            const localVarPath = `/api/auctions/{auctionId}/deposits`
                .replace(`{${"auctionId"}}`, encodeURIComponent(String(auctionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {string} [memberId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsAuctionIdDepositsHasDepositGet: async (auctionId: string, memberId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auctionId' is not null or undefined
            assertParamExists('apiAuctionsAuctionIdDepositsHasDepositGet', 'auctionId', auctionId)
            const localVarPath = `/api/auctions/{auctionId}/deposits/has-deposit`
                .replace(`{${"auctionId"}}`, encodeURIComponent(String(auctionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (memberId !== undefined) {
                localVarQueryParameter['MemberId'] = memberId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {CreateAuctionDepositRequest} [createAuctionDepositRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsAuctionIdDepositsPlaceDepositPost: async (auctionId: string, createAuctionDepositRequest?: CreateAuctionDepositRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auctionId' is not null or undefined
            assertParamExists('apiAuctionsAuctionIdDepositsPlaceDepositPost', 'auctionId', auctionId)
            const localVarPath = `/api/auctions/{auctionId}/deposits/place_deposit`
                .replace(`{${"auctionId"}}`, encodeURIComponent(String(auctionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAuctionDepositRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsCurrentTimeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auctions/current-time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {boolean} [getExpiredAuctions] 
         * @param {Array<AuctionStatus>} [status] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsGet: async (searchTerm?: string, getExpiredAuctions?: boolean, status?: Array<AuctionStatus>, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auctions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }

            if (getExpiredAuctions !== undefined) {
                localVarQueryParameter['GetExpiredAuctions'] = getExpiredAuctions;
            }

            if (status) {
                localVarQueryParameter['Status'] = status;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsIdApprovePut: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAuctionsIdApprovePut', 'id', id)
            const localVarPath = `/api/auctions/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsIdBidsGet: async (id: string, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAuctionsIdBidsGet', 'id', id)
            const localVarPath = `/api/auctions/{id}/bids`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsIdBidsLatestGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAuctionsIdBidsLatestGet', 'id', id)
            const localVarPath = `/api/auctions/{id}/bids/latest`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateBidRequest} [createBidRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsIdBidsPlaceBidPost: async (id: string, createBidRequest?: CreateBidRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAuctionsIdBidsPlaceBidPost', 'id', id)
            const localVarPath = `/api/auctions/{id}/bids/place_bid`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBidRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAuctionsIdDelete', 'id', id)
            const localVarPath = `/api/auctions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAuctionsIdGet', 'id', id)
            const localVarPath = `/api/auctions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAuctionRequest} [updateAuctionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsIdPut: async (id: string, updateAuctionRequest?: UpdateAuctionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAuctionsIdPut', 'id', id)
            const localVarPath = `/api/auctions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAuctionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsIdRejectPut: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAuctionsIdRejectPut', 'id', id)
            const localVarPath = `/api/auctions/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateAuctionRequest} [createAuctionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsPost: async (createAuctionRequest?: CreateAuctionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auctions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAuctionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuctionApi - functional programming interface
 * @export
 */
export const AuctionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuctionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} auctionId 
         * @param {string} depositId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsAuctionIdDepositsDepositIdDelete(auctionId: string, depositId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsAuctionIdDepositsDepositIdDelete(auctionId, depositId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsAuctionIdDepositsDepositIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {string} depositId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsAuctionIdDepositsDepositIdGet(auctionId: string, depositId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionDepositDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsAuctionIdDepositsDepositIdGet(auctionId, depositId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsAuctionIdDepositsDepositIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {string} depositId 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsAuctionIdDepositsDepositIdPut(auctionId: string, depositId: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionDepositDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsAuctionIdDepositsDepositIdPut(auctionId, depositId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsAuctionIdDepositsDepositIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsAuctionIdDepositsGet(auctionId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionDepositListResponsePaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsAuctionIdDepositsGet(auctionId, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsAuctionIdDepositsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {string} [memberId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsAuctionIdDepositsHasDepositGet(auctionId: string, memberId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HasMemberPlacedDepositResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsAuctionIdDepositsHasDepositGet(auctionId, memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsAuctionIdDepositsHasDepositGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {CreateAuctionDepositRequest} [createAuctionDepositRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsAuctionIdDepositsPlaceDepositPost(auctionId: string, createAuctionDepositRequest?: CreateAuctionDepositRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionDepositDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsAuctionIdDepositsPlaceDepositPost(auctionId, createAuctionDepositRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsAuctionIdDepositsPlaceDepositPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsCurrentTimeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsCurrentTimeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsCurrentTimeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {boolean} [getExpiredAuctions] 
         * @param {Array<AuctionStatus>} [status] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsGet(searchTerm?: string, getExpiredAuctions?: boolean, status?: Array<AuctionStatus>, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionListResponsePaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsGet(searchTerm, getExpiredAuctions, status, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsIdApprovePut(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsIdApprovePut(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsIdApprovePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsIdBidsGet(id: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BidListResponsePaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsIdBidsGet(id, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsIdBidsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsIdBidsLatestGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BidDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsIdBidsLatestGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsIdBidsLatestGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateBidRequest} [createBidRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsIdBidsPlaceBidPost(id: string, createBidRequest?: CreateBidRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BidDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsIdBidsPlaceBidPost(id, createBidRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsIdBidsPlaceBidPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAuctionRequest} [updateAuctionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsIdPut(id: string, updateAuctionRequest?: UpdateAuctionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsIdPut(id, updateAuctionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsIdRejectPut(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsIdRejectPut(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsIdRejectPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateAuctionRequest} [createAuctionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuctionsPost(createAuctionRequest?: CreateAuctionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuctionsPost(createAuctionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuctionApi.apiAuctionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuctionApi - factory interface
 * @export
 */
export const AuctionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuctionApiFp(configuration)
    return {
        /**
         * 
         * @param {string} auctionId 
         * @param {string} depositId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsAuctionIdDepositsDepositIdDelete(auctionId: string, depositId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuctionsAuctionIdDepositsDepositIdDelete(auctionId, depositId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {string} depositId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsAuctionIdDepositsDepositIdGet(auctionId: string, depositId: string, options?: RawAxiosRequestConfig): AxiosPromise<AuctionDepositDetailResponse> {
            return localVarFp.apiAuctionsAuctionIdDepositsDepositIdGet(auctionId, depositId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {string} depositId 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsAuctionIdDepositsDepositIdPut(auctionId: string, depositId: string, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<AuctionDepositDetailResponse> {
            return localVarFp.apiAuctionsAuctionIdDepositsDepositIdPut(auctionId, depositId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsAuctionIdDepositsGet(auctionId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<AuctionDepositListResponsePaginationResponse> {
            return localVarFp.apiAuctionsAuctionIdDepositsGet(auctionId, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {string} [memberId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsAuctionIdDepositsHasDepositGet(auctionId: string, memberId?: string, options?: RawAxiosRequestConfig): AxiosPromise<HasMemberPlacedDepositResult> {
            return localVarFp.apiAuctionsAuctionIdDepositsHasDepositGet(auctionId, memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {CreateAuctionDepositRequest} [createAuctionDepositRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsAuctionIdDepositsPlaceDepositPost(auctionId: string, createAuctionDepositRequest?: CreateAuctionDepositRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuctionDepositDetailResponse> {
            return localVarFp.apiAuctionsAuctionIdDepositsPlaceDepositPost(auctionId, createAuctionDepositRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsCurrentTimeGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuctionsCurrentTimeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {boolean} [getExpiredAuctions] 
         * @param {Array<AuctionStatus>} [status] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsGet(searchTerm?: string, getExpiredAuctions?: boolean, status?: Array<AuctionStatus>, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<AuctionListResponsePaginationResponse> {
            return localVarFp.apiAuctionsGet(searchTerm, getExpiredAuctions, status, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsIdApprovePut(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AuctionDetailResponse> {
            return localVarFp.apiAuctionsIdApprovePut(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsIdBidsGet(id: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<BidListResponsePaginationResponse> {
            return localVarFp.apiAuctionsIdBidsGet(id, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsIdBidsLatestGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BidDetailResponse> {
            return localVarFp.apiAuctionsIdBidsLatestGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateBidRequest} [createBidRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsIdBidsPlaceBidPost(id: string, createBidRequest?: CreateBidRequest, options?: RawAxiosRequestConfig): AxiosPromise<BidDetailResponse> {
            return localVarFp.apiAuctionsIdBidsPlaceBidPost(id, createBidRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuctionsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AuctionDetailResponse> {
            return localVarFp.apiAuctionsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAuctionRequest} [updateAuctionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsIdPut(id: string, updateAuctionRequest?: UpdateAuctionRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuctionDetailResponse> {
            return localVarFp.apiAuctionsIdPut(id, updateAuctionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsIdRejectPut(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AuctionDetailResponse> {
            return localVarFp.apiAuctionsIdRejectPut(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateAuctionRequest} [createAuctionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuctionsPost(createAuctionRequest?: CreateAuctionRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuctionDetailResponse> {
            return localVarFp.apiAuctionsPost(createAuctionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuctionApi - object-oriented interface
 * @export
 * @class AuctionApi
 * @extends {BaseAPI}
 */
export class AuctionApi extends BaseAPI {
    /**
     * 
     * @param {string} auctionId 
     * @param {string} depositId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsAuctionIdDepositsDepositIdDelete(auctionId: string, depositId: string, options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsAuctionIdDepositsDepositIdDelete(auctionId, depositId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} auctionId 
     * @param {string} depositId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsAuctionIdDepositsDepositIdGet(auctionId: string, depositId: string, options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsAuctionIdDepositsDepositIdGet(auctionId, depositId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} auctionId 
     * @param {string} depositId 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsAuctionIdDepositsDepositIdPut(auctionId: string, depositId: string, body?: object, options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsAuctionIdDepositsDepositIdPut(auctionId, depositId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} auctionId 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsAuctionIdDepositsGet(auctionId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsAuctionIdDepositsGet(auctionId, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} auctionId 
     * @param {string} [memberId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsAuctionIdDepositsHasDepositGet(auctionId: string, memberId?: string, options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsAuctionIdDepositsHasDepositGet(auctionId, memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} auctionId 
     * @param {CreateAuctionDepositRequest} [createAuctionDepositRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsAuctionIdDepositsPlaceDepositPost(auctionId: string, createAuctionDepositRequest?: CreateAuctionDepositRequest, options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsAuctionIdDepositsPlaceDepositPost(auctionId, createAuctionDepositRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsCurrentTimeGet(options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsCurrentTimeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [searchTerm] 
     * @param {boolean} [getExpiredAuctions] 
     * @param {Array<AuctionStatus>} [status] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsGet(searchTerm?: string, getExpiredAuctions?: boolean, status?: Array<AuctionStatus>, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsGet(searchTerm, getExpiredAuctions, status, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsIdApprovePut(id: string, options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsIdApprovePut(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsIdBidsGet(id: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsIdBidsGet(id, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsIdBidsLatestGet(id: string, options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsIdBidsLatestGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {CreateBidRequest} [createBidRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsIdBidsPlaceBidPost(id: string, createBidRequest?: CreateBidRequest, options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsIdBidsPlaceBidPost(id, createBidRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateAuctionRequest} [updateAuctionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsIdPut(id: string, updateAuctionRequest?: UpdateAuctionRequest, options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsIdPut(id, updateAuctionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsIdRejectPut(id: string, options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsIdRejectPut(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateAuctionRequest} [createAuctionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public apiAuctionsPost(createAuctionRequest?: CreateAuctionRequest, options?: RawAxiosRequestConfig) {
        return AuctionApiFp(this.configuration).apiAuctionsPost(createAuctionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} accountId 
         * @param {ChangePasswordRequest} [changePasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthAccountIdChangePasswordPut: async (accountId: string, changePasswordRequest?: ChangePasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAuthAccountIdChangePasswordPut', 'accountId', accountId)
            const localVarPath = `/api/auth/{accountId}/change-password`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthConfirmEmailGet: async (id?: string, token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/confirm-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateStaffAccountRequest} [createStaffAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthCreateStaffAccountPost: async (createStaffAccountRequest?: CreateStaffAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/create-staff-account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStaffAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {string} password 
         * @param {string} confirmPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthForgotPasswordGet: async (email: string, password: string, confirmPassword: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('apiAuthForgotPasswordGet', 'email', email)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('apiAuthForgotPasswordGet', 'password', password)
            // verify required parameter 'confirmPassword' is not null or undefined
            assertParamExists('apiAuthForgotPasswordGet', 'confirmPassword', confirmPassword)
            const localVarPath = `/api/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }

            if (password !== undefined) {
                localVarQueryParameter['Password'] = password;
            }

            if (confirmPassword !== undefined) {
                localVarQueryParameter['ConfirmPassword'] = confirmPassword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginGoogleGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/login-google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (loginRequest?: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: async (registerRequest?: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResendVerifyEmailGet: async (email?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/resend-verify-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [confirmtoken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResetPasswordPut: async (confirmtoken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (confirmtoken !== undefined) {
                localVarQueryParameter['confirmtoken'] = confirmtoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSigninGoogleGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/signin-google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} accountId 
         * @param {ChangePasswordRequest} [changePasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthAccountIdChangePasswordPut(accountId: string, changePasswordRequest?: ChangePasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthAccountIdChangePasswordPut(accountId, changePasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthAccountIdChangePasswordPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthConfirmEmailGet(id?: string, token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthConfirmEmailGet(id, token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthConfirmEmailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateStaffAccountRequest} [createStaffAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthCreateStaffAccountPost(createStaffAccountRequest?: CreateStaffAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthCreateStaffAccountPost(createStaffAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthCreateStaffAccountPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} email 
         * @param {string} password 
         * @param {string} confirmPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthForgotPasswordGet(email: string, password: string, confirmPassword: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthForgotPasswordGet(email, password, confirmPassword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthForgotPasswordGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginGoogleGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginGoogleGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthLoginGoogleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRegisterPost(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRegisterPost(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthResendVerifyEmailGet(email?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthResendVerifyEmailGet(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthResendVerifyEmailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [confirmtoken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthResetPasswordPut(confirmtoken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthResetPasswordPut(confirmtoken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthResetPasswordPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthSigninGoogleGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthSigninGoogleGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthSigninGoogleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {string} accountId 
         * @param {ChangePasswordRequest} [changePasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthAccountIdChangePasswordPut(accountId: string, changePasswordRequest?: ChangePasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccountResponseResult> {
            return localVarFp.apiAuthAccountIdChangePasswordPut(accountId, changePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthConfirmEmailGet(id?: string, token?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthConfirmEmailGet(id, token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateStaffAccountRequest} [createStaffAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthCreateStaffAccountPost(createStaffAccountRequest?: CreateStaffAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccountResponseResult> {
            return localVarFp.apiAuthCreateStaffAccountPost(createStaffAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} email 
         * @param {string} password 
         * @param {string} confirmPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthForgotPasswordGet(email: string, password: string, confirmPassword: string, options?: RawAxiosRequestConfig): AxiosPromise<StringResult> {
            return localVarFp.apiAuthForgotPasswordGet(email, password, confirmPassword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginGoogleGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthLoginGoogleGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponseResult> {
            return localVarFp.apiAuthLoginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccountResponseResult> {
            return localVarFp.apiAuthRegisterPost(registerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResendVerifyEmailGet(email?: string, options?: RawAxiosRequestConfig): AxiosPromise<StringResult> {
            return localVarFp.apiAuthResendVerifyEmailGet(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [confirmtoken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResetPasswordPut(confirmtoken?: string, options?: RawAxiosRequestConfig): AxiosPromise<AccountResponseResult> {
            return localVarFp.apiAuthResetPasswordPut(confirmtoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSigninGoogleGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthSigninGoogleGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {string} accountId 
     * @param {ChangePasswordRequest} [changePasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthAccountIdChangePasswordPut(accountId: string, changePasswordRequest?: ChangePasswordRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthAccountIdChangePasswordPut(accountId, changePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthConfirmEmailGet(id?: string, token?: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthConfirmEmailGet(id, token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateStaffAccountRequest} [createStaffAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthCreateStaffAccountPost(createStaffAccountRequest?: CreateStaffAccountRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthCreateStaffAccountPost(createStaffAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} email 
     * @param {string} password 
     * @param {string} confirmPassword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthForgotPasswordGet(email: string, password: string, confirmPassword: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthForgotPasswordGet(email, password, confirmPassword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLoginGoogleGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLoginGoogleGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginRequest} [loginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLoginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterRequest} [registerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthRegisterPost(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthRegisterPost(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [email] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthResendVerifyEmailGet(email?: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthResendVerifyEmailGet(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [confirmtoken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthResetPasswordPut(confirmtoken?: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthResetPasswordPut(confirmtoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthSigninGoogleGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthSigninGoogleGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} categoryId 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [memberId] 
         * @param {string} [categoryId2] 
         * @param {Array<FashionItemStatus>} [status] 
         * @param {Array<FashionItemType>} [type] 
         * @param {string} [shopId] 
         * @param {GenderType} [genderType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesCategoryIdFahsionitemsGet: async (categoryId: string, searchTerm?: string, pageNumber?: number, pageSize?: number, memberId?: string, categoryId2?: string, status?: Array<FashionItemStatus>, type?: Array<FashionItemType>, shopId?: string, genderType?: GenderType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('apiCategoriesCategoryIdFahsionitemsGet', 'categoryId', categoryId)
            const localVarPath = `/api/categories/{categoryId}/fahsionitems`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (memberId !== undefined) {
                localVarQueryParameter['MemberId'] = memberId;
            }

            if (categoryId2 !== undefined) {
                localVarQueryParameter['CategoryId'] = categoryId2;
            }

            if (status) {
                localVarQueryParameter['Status'] = status;
            }

            if (type) {
                localVarQueryParameter['Type'] = type;
            }

            if (shopId !== undefined) {
                localVarQueryParameter['ShopId'] = shopId;
            }

            if (genderType !== undefined) {
                localVarQueryParameter['GenderType'] = genderType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesCategoryIdGet: async (categoryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('apiCategoriesCategoryIdGet', 'categoryId', categoryId)
            const localVarPath = `/api/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} categoryId 
         * @param {CreateCategoryRequest} [createCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesCategoryIdPost: async (categoryId: string, createCategoryRequest?: CreateCategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('apiCategoriesCategoryIdPost', 'categoryId', categoryId)
            const localVarPath = `/api/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [categoryId] 
         * @param {string} [searchName] 
         * @param {string} [parentId] 
         * @param {number} [level] 
         * @param {CategoryStatus} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesConditionGet: async (categoryId?: string, searchName?: string, parentId?: string, level?: number, status?: CategoryStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/categories/condition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (categoryId !== undefined) {
                localVarQueryParameter['CategoryId'] = categoryId;
            }

            if (searchName !== undefined) {
                localVarQueryParameter['SearchName'] = searchName;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['ParentId'] = parentId;
            }

            if (level !== undefined) {
                localVarQueryParameter['Level'] = level;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [shopId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesLeavesGet: async (shopId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/categories/leaves`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (shopId !== undefined) {
                localVarQueryParameter['shopId'] = shopId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [shopId] 
         * @param {string} [rootCategoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesTreeGet: async (shopId?: string, rootCategoryId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/categories/tree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (shopId !== undefined) {
                localVarQueryParameter['shopId'] = shopId;
            }

            if (rootCategoryId !== undefined) {
                localVarQueryParameter['rootCategoryId'] = rootCategoryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} categoryId 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [memberId] 
         * @param {string} [categoryId2] 
         * @param {Array<FashionItemStatus>} [status] 
         * @param {Array<FashionItemType>} [type] 
         * @param {string} [shopId] 
         * @param {GenderType} [genderType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoriesCategoryIdFahsionitemsGet(categoryId: string, searchTerm?: string, pageNumber?: number, pageSize?: number, memberId?: string, categoryId2?: string, status?: Array<FashionItemStatus>, type?: Array<FashionItemType>, shopId?: string, genderType?: GenderType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FashionItemDetailResponsePaginationResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoriesCategoryIdFahsionitemsGet(categoryId, searchTerm, pageNumber, pageSize, memberId, categoryId2, status, type, shopId, genderType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoriesCategoryIdFahsionitemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoriesCategoryIdGet(categoryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoriesCategoryIdGet(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoriesCategoryIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} categoryId 
         * @param {CreateCategoryRequest} [createCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoriesCategoryIdPost(categoryId: string, createCategoryRequest?: CreateCategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoriesCategoryIdPost(categoryId, createCategoryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoriesCategoryIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [categoryId] 
         * @param {string} [searchName] 
         * @param {string} [parentId] 
         * @param {number} [level] 
         * @param {CategoryStatus} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoriesConditionGet(categoryId?: string, searchName?: string, parentId?: string, level?: number, status?: CategoryStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoriesConditionGet(categoryId, searchName, parentId, level, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoriesConditionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoriesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoriesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [shopId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoriesLeavesGet(shopId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryLeavesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoriesLeavesGet(shopId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoriesLeavesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [shopId] 
         * @param {string} [rootCategoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoriesTreeGet(shopId?: string, rootCategoryId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryTreeResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoriesTreeGet(shopId, rootCategoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoriesTreeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {string} categoryId 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [memberId] 
         * @param {string} [categoryId2] 
         * @param {Array<FashionItemStatus>} [status] 
         * @param {Array<FashionItemType>} [type] 
         * @param {string} [shopId] 
         * @param {GenderType} [genderType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesCategoryIdFahsionitemsGet(categoryId: string, searchTerm?: string, pageNumber?: number, pageSize?: number, memberId?: string, categoryId2?: string, status?: Array<FashionItemStatus>, type?: Array<FashionItemType>, shopId?: string, genderType?: GenderType, options?: RawAxiosRequestConfig): AxiosPromise<FashionItemDetailResponsePaginationResponseResult> {
            return localVarFp.apiCategoriesCategoryIdFahsionitemsGet(categoryId, searchTerm, pageNumber, pageSize, memberId, categoryId2, status, type, shopId, genderType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesCategoryIdGet(categoryId: string, options?: RawAxiosRequestConfig): AxiosPromise<CategoryListResult> {
            return localVarFp.apiCategoriesCategoryIdGet(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} categoryId 
         * @param {CreateCategoryRequest} [createCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesCategoryIdPost(categoryId: string, createCategoryRequest?: CreateCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryResult> {
            return localVarFp.apiCategoriesCategoryIdPost(categoryId, createCategoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [categoryId] 
         * @param {string} [searchName] 
         * @param {string} [parentId] 
         * @param {number} [level] 
         * @param {CategoryStatus} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesConditionGet(categoryId?: string, searchName?: string, parentId?: string, level?: number, status?: CategoryStatus, options?: RawAxiosRequestConfig): AxiosPromise<CategoryListResult> {
            return localVarFp.apiCategoriesConditionGet(categoryId, searchName, parentId, level, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesGet(options?: RawAxiosRequestConfig): AxiosPromise<CategoryListResult> {
            return localVarFp.apiCategoriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [shopId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesLeavesGet(shopId?: string, options?: RawAxiosRequestConfig): AxiosPromise<CategoryLeavesResponse> {
            return localVarFp.apiCategoriesLeavesGet(shopId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [shopId] 
         * @param {string} [rootCategoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesTreeGet(shopId?: string, rootCategoryId?: string, options?: RawAxiosRequestConfig): AxiosPromise<CategoryTreeResult> {
            return localVarFp.apiCategoriesTreeGet(shopId, rootCategoryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @param {string} categoryId 
     * @param {string} [searchTerm] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [memberId] 
     * @param {string} [categoryId2] 
     * @param {Array<FashionItemStatus>} [status] 
     * @param {Array<FashionItemType>} [type] 
     * @param {string} [shopId] 
     * @param {GenderType} [genderType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoriesCategoryIdFahsionitemsGet(categoryId: string, searchTerm?: string, pageNumber?: number, pageSize?: number, memberId?: string, categoryId2?: string, status?: Array<FashionItemStatus>, type?: Array<FashionItemType>, shopId?: string, genderType?: GenderType, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoriesCategoryIdFahsionitemsGet(categoryId, searchTerm, pageNumber, pageSize, memberId, categoryId2, status, type, shopId, genderType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoriesCategoryIdGet(categoryId: string, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoriesCategoryIdGet(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} categoryId 
     * @param {CreateCategoryRequest} [createCategoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoriesCategoryIdPost(categoryId: string, createCategoryRequest?: CreateCategoryRequest, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoriesCategoryIdPost(categoryId, createCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [categoryId] 
     * @param {string} [searchName] 
     * @param {string} [parentId] 
     * @param {number} [level] 
     * @param {CategoryStatus} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoriesConditionGet(categoryId?: string, searchName?: string, parentId?: string, level?: number, status?: CategoryStatus, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoriesConditionGet(categoryId, searchName, parentId, level, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoriesGet(options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoriesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [shopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoriesLeavesGet(shopId?: string, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoriesLeavesGet(shopId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [shopId] 
     * @param {string} [rootCategoryId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoriesTreeGet(shopId?: string, rootCategoryId?: string, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoriesTreeGet(shopId, rootCategoryId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ConsignLineItemApi - axios parameter creator
 * @export
 */
export const ConsignLineItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} consignLineItemId 
         * @param {number} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignlineitemsConsignLineItemIdConfirmPricePut: async (consignLineItemId: string, price?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consignLineItemId' is not null or undefined
            assertParamExists('apiConsignlineitemsConsignLineItemIdConfirmPricePut', 'consignLineItemId', consignLineItemId)
            const localVarPath = `/api/consignlineitems/{consignLineItemId}/confirm-price`
                .replace(`{${"consignLineItemId"}}`, encodeURIComponent(String(consignLineItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (price !== undefined) {
                localVarQueryParameter['price'] = price;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} consignLineItemId 
         * @param {CreateIndividualItemRequestForConsign} [createIndividualItemRequestForConsign] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignlineitemsConsignLineItemIdCreateIndividualPost: async (consignLineItemId: string, createIndividualItemRequestForConsign?: CreateIndividualItemRequestForConsign, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consignLineItemId' is not null or undefined
            assertParamExists('apiConsignlineitemsConsignLineItemIdCreateIndividualPost', 'consignLineItemId', consignLineItemId)
            const localVarPath = `/api/consignlineitems/{consignLineItemId}/create-individual`
                .replace(`{${"consignLineItemId"}}`, encodeURIComponent(String(consignLineItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIndividualItemRequestForConsign, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} consignLineItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignlineitemsConsignLineItemIdGet: async (consignLineItemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consignLineItemId' is not null or undefined
            assertParamExists('apiConsignlineitemsConsignLineItemIdGet', 'consignLineItemId', consignLineItemId)
            const localVarPath = `/api/consignlineitems/{consignLineItemId}`
                .replace(`{${"consignLineItemId"}}`, encodeURIComponent(String(consignLineItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsignLineItemApi - functional programming interface
 * @export
 */
export const ConsignLineItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConsignLineItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} consignLineItemId 
         * @param {number} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsignlineitemsConsignLineItemIdConfirmPricePut(consignLineItemId: string, price?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsignSaleLineItemsListResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConsignlineitemsConsignLineItemIdConfirmPricePut(consignLineItemId, price, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsignLineItemApi.apiConsignlineitemsConsignLineItemIdConfirmPricePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} consignLineItemId 
         * @param {CreateIndividualItemRequestForConsign} [createIndividualItemRequestForConsign] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsignlineitemsConsignLineItemIdCreateIndividualPost(consignLineItemId: string, createIndividualItemRequestForConsign?: CreateIndividualItemRequestForConsign, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FashionItemDetailResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConsignlineitemsConsignLineItemIdCreateIndividualPost(consignLineItemId, createIndividualItemRequestForConsign, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsignLineItemApi.apiConsignlineitemsConsignLineItemIdCreateIndividualPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} consignLineItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsignlineitemsConsignLineItemIdGet(consignLineItemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsignSaleLineItemDetailedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConsignlineitemsConsignLineItemIdGet(consignLineItemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsignLineItemApi.apiConsignlineitemsConsignLineItemIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConsignLineItemApi - factory interface
 * @export
 */
export const ConsignLineItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConsignLineItemApiFp(configuration)
    return {
        /**
         * 
         * @param {string} consignLineItemId 
         * @param {number} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignlineitemsConsignLineItemIdConfirmPricePut(consignLineItemId: string, price?: number, options?: RawAxiosRequestConfig): AxiosPromise<ConsignSaleLineItemsListResponseResult> {
            return localVarFp.apiConsignlineitemsConsignLineItemIdConfirmPricePut(consignLineItemId, price, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} consignLineItemId 
         * @param {CreateIndividualItemRequestForConsign} [createIndividualItemRequestForConsign] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignlineitemsConsignLineItemIdCreateIndividualPost(consignLineItemId: string, createIndividualItemRequestForConsign?: CreateIndividualItemRequestForConsign, options?: RawAxiosRequestConfig): AxiosPromise<FashionItemDetailResponseResult> {
            return localVarFp.apiConsignlineitemsConsignLineItemIdCreateIndividualPost(consignLineItemId, createIndividualItemRequestForConsign, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} consignLineItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignlineitemsConsignLineItemIdGet(consignLineItemId: string, options?: RawAxiosRequestConfig): AxiosPromise<ConsignSaleLineItemDetailedResponse> {
            return localVarFp.apiConsignlineitemsConsignLineItemIdGet(consignLineItemId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConsignLineItemApi - object-oriented interface
 * @export
 * @class ConsignLineItemApi
 * @extends {BaseAPI}
 */
export class ConsignLineItemApi extends BaseAPI {
    /**
     * 
     * @param {string} consignLineItemId 
     * @param {number} [price] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsignLineItemApi
     */
    public apiConsignlineitemsConsignLineItemIdConfirmPricePut(consignLineItemId: string, price?: number, options?: RawAxiosRequestConfig) {
        return ConsignLineItemApiFp(this.configuration).apiConsignlineitemsConsignLineItemIdConfirmPricePut(consignLineItemId, price, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} consignLineItemId 
     * @param {CreateIndividualItemRequestForConsign} [createIndividualItemRequestForConsign] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsignLineItemApi
     */
    public apiConsignlineitemsConsignLineItemIdCreateIndividualPost(consignLineItemId: string, createIndividualItemRequestForConsign?: CreateIndividualItemRequestForConsign, options?: RawAxiosRequestConfig) {
        return ConsignLineItemApiFp(this.configuration).apiConsignlineitemsConsignLineItemIdCreateIndividualPost(consignLineItemId, createIndividualItemRequestForConsign, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} consignLineItemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsignLineItemApi
     */
    public apiConsignlineitemsConsignLineItemIdGet(consignLineItemId: string, options?: RawAxiosRequestConfig) {
        return ConsignLineItemApiFp(this.configuration).apiConsignlineitemsConsignLineItemIdGet(consignLineItemId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ConsignSaleApi - axios parameter creator
 * @export
 */
export const ConsignSaleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} consignSaleId 
         * @param {ApproveConsignSaleRequest} [approveConsignSaleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignsalesConsignSaleIdApprovalPut: async (consignSaleId: string, approveConsignSaleRequest?: ApproveConsignSaleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consignSaleId' is not null or undefined
            assertParamExists('apiConsignsalesConsignSaleIdApprovalPut', 'consignSaleId', consignSaleId)
            const localVarPath = `/api/consignsales/{consignSaleId}/approval`
                .replace(`{${"consignSaleId"}}`, encodeURIComponent(String(consignSaleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(approveConsignSaleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} consignSaleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignsalesConsignSaleIdConfirmReceivedPut: async (consignSaleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consignSaleId' is not null or undefined
            assertParamExists('apiConsignsalesConsignSaleIdConfirmReceivedPut', 'consignSaleId', consignSaleId)
            const localVarPath = `/api/consignsales/{consignSaleId}/confirm-received`
                .replace(`{${"consignSaleId"}}`, encodeURIComponent(String(consignSaleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} consignSaleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignsalesConsignSaleIdGet: async (consignSaleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consignSaleId' is not null or undefined
            assertParamExists('apiConsignsalesConsignSaleIdGet', 'consignSaleId', consignSaleId)
            const localVarPath = `/api/consignsales/{consignSaleId}`
                .replace(`{${"consignSaleId"}}`, encodeURIComponent(String(consignSaleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} consignsaleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignsalesConsignsaleIdConsignlineitemsGet: async (consignsaleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consignsaleId' is not null or undefined
            assertParamExists('apiConsignsalesConsignsaleIdConsignlineitemsGet', 'consignsaleId', consignsaleId)
            const localVarPath = `/api/consignsales/{consignsaleId}/consignlineitems`
                .replace(`{${"consignsaleId"}}`, encodeURIComponent(String(consignsaleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} consignsaleId 
         * @param {CreateMasterItemForConsignRequest} [createMasterItemForConsignRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignsalesConsignsaleIdCreateMasteritemPost: async (consignsaleId: string, createMasterItemForConsignRequest?: CreateMasterItemForConsignRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consignsaleId' is not null or undefined
            assertParamExists('apiConsignsalesConsignsaleIdCreateMasteritemPost', 'consignsaleId', consignsaleId)
            const localVarPath = `/api/consignsales/{consignsaleId}/create-masteritem`
                .replace(`{${"consignsaleId"}}`, encodeURIComponent(String(consignsaleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMasterItemForConsignRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {string} [consignSaleCode] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {ConsignSaleStatus} [status] 
         * @param {ConsignSaleType} [consignType] 
         * @param {string} [email] 
         * @param {string} [consignorName] 
         * @param {string} [consignorPhone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignsalesGet: async (page?: number, pageSize?: number, shopId?: string, consignSaleCode?: string, startDate?: string, endDate?: string, status?: ConsignSaleStatus, consignType?: ConsignSaleType, email?: string, consignorName?: string, consignorPhone?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/consignsales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (shopId !== undefined) {
                localVarQueryParameter['ShopId'] = shopId;
            }

            if (consignSaleCode !== undefined) {
                localVarQueryParameter['ConsignSaleCode'] = consignSaleCode;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (consignType !== undefined) {
                localVarQueryParameter['ConsignType'] = consignType;
            }

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }

            if (consignorName !== undefined) {
                localVarQueryParameter['ConsignorName'] = consignorName;
            }

            if (consignorPhone !== undefined) {
                localVarQueryParameter['ConsignorPhone'] = consignorPhone;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsignSaleApi - functional programming interface
 * @export
 */
export const ConsignSaleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConsignSaleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} consignSaleId 
         * @param {ApproveConsignSaleRequest} [approveConsignSaleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsignsalesConsignSaleIdApprovalPut(consignSaleId: string, approveConsignSaleRequest?: ApproveConsignSaleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsignSaleDetailedResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConsignsalesConsignSaleIdApprovalPut(consignSaleId, approveConsignSaleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsignSaleApi.apiConsignsalesConsignSaleIdApprovalPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} consignSaleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsignsalesConsignSaleIdConfirmReceivedPut(consignSaleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterItemResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConsignsalesConsignSaleIdConfirmReceivedPut(consignSaleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsignSaleApi.apiConsignsalesConsignSaleIdConfirmReceivedPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} consignSaleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsignsalesConsignSaleIdGet(consignSaleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsignSaleDetailedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConsignsalesConsignSaleIdGet(consignSaleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsignSaleApi.apiConsignsalesConsignSaleIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} consignsaleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsignsalesConsignsaleIdConsignlineitemsGet(consignsaleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConsignSaleLineItemsListResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConsignsalesConsignsaleIdConsignlineitemsGet(consignsaleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsignSaleApi.apiConsignsalesConsignsaleIdConsignlineitemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} consignsaleId 
         * @param {CreateMasterItemForConsignRequest} [createMasterItemForConsignRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsignsalesConsignsaleIdCreateMasteritemPost(consignsaleId: string, createMasterItemForConsignRequest?: CreateMasterItemForConsignRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterItemResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConsignsalesConsignsaleIdCreateMasteritemPost(consignsaleId, createMasterItemForConsignRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsignSaleApi.apiConsignsalesConsignsaleIdCreateMasteritemPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {string} [consignSaleCode] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {ConsignSaleStatus} [status] 
         * @param {ConsignSaleType} [consignType] 
         * @param {string} [email] 
         * @param {string} [consignorName] 
         * @param {string} [consignorPhone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsignsalesGet(page?: number, pageSize?: number, shopId?: string, consignSaleCode?: string, startDate?: string, endDate?: string, status?: ConsignSaleStatus, consignType?: ConsignSaleType, email?: string, consignorName?: string, consignorPhone?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsignSaleListResponsePaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConsignsalesGet(page, pageSize, shopId, consignSaleCode, startDate, endDate, status, consignType, email, consignorName, consignorPhone, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsignSaleApi.apiConsignsalesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConsignSaleApi - factory interface
 * @export
 */
export const ConsignSaleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConsignSaleApiFp(configuration)
    return {
        /**
         * 
         * @param {string} consignSaleId 
         * @param {ApproveConsignSaleRequest} [approveConsignSaleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignsalesConsignSaleIdApprovalPut(consignSaleId: string, approveConsignSaleRequest?: ApproveConsignSaleRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConsignSaleDetailedResponseResult> {
            return localVarFp.apiConsignsalesConsignSaleIdApprovalPut(consignSaleId, approveConsignSaleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} consignSaleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignsalesConsignSaleIdConfirmReceivedPut(consignSaleId: string, options?: RawAxiosRequestConfig): AxiosPromise<MasterItemResponseResult> {
            return localVarFp.apiConsignsalesConsignSaleIdConfirmReceivedPut(consignSaleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} consignSaleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignsalesConsignSaleIdGet(consignSaleId: string, options?: RawAxiosRequestConfig): AxiosPromise<ConsignSaleDetailedResponse> {
            return localVarFp.apiConsignsalesConsignSaleIdGet(consignSaleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} consignsaleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignsalesConsignsaleIdConsignlineitemsGet(consignsaleId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ConsignSaleLineItemsListResponse>> {
            return localVarFp.apiConsignsalesConsignsaleIdConsignlineitemsGet(consignsaleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} consignsaleId 
         * @param {CreateMasterItemForConsignRequest} [createMasterItemForConsignRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignsalesConsignsaleIdCreateMasteritemPost(consignsaleId: string, createMasterItemForConsignRequest?: CreateMasterItemForConsignRequest, options?: RawAxiosRequestConfig): AxiosPromise<MasterItemResponseResult> {
            return localVarFp.apiConsignsalesConsignsaleIdCreateMasteritemPost(consignsaleId, createMasterItemForConsignRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {string} [consignSaleCode] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {ConsignSaleStatus} [status] 
         * @param {ConsignSaleType} [consignType] 
         * @param {string} [email] 
         * @param {string} [consignorName] 
         * @param {string} [consignorPhone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsignsalesGet(page?: number, pageSize?: number, shopId?: string, consignSaleCode?: string, startDate?: string, endDate?: string, status?: ConsignSaleStatus, consignType?: ConsignSaleType, email?: string, consignorName?: string, consignorPhone?: string, options?: RawAxiosRequestConfig): AxiosPromise<ConsignSaleListResponsePaginationResponse> {
            return localVarFp.apiConsignsalesGet(page, pageSize, shopId, consignSaleCode, startDate, endDate, status, consignType, email, consignorName, consignorPhone, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConsignSaleApi - object-oriented interface
 * @export
 * @class ConsignSaleApi
 * @extends {BaseAPI}
 */
export class ConsignSaleApi extends BaseAPI {
    /**
     * 
     * @param {string} consignSaleId 
     * @param {ApproveConsignSaleRequest} [approveConsignSaleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsignSaleApi
     */
    public apiConsignsalesConsignSaleIdApprovalPut(consignSaleId: string, approveConsignSaleRequest?: ApproveConsignSaleRequest, options?: RawAxiosRequestConfig) {
        return ConsignSaleApiFp(this.configuration).apiConsignsalesConsignSaleIdApprovalPut(consignSaleId, approveConsignSaleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} consignSaleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsignSaleApi
     */
    public apiConsignsalesConsignSaleIdConfirmReceivedPut(consignSaleId: string, options?: RawAxiosRequestConfig) {
        return ConsignSaleApiFp(this.configuration).apiConsignsalesConsignSaleIdConfirmReceivedPut(consignSaleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} consignSaleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsignSaleApi
     */
    public apiConsignsalesConsignSaleIdGet(consignSaleId: string, options?: RawAxiosRequestConfig) {
        return ConsignSaleApiFp(this.configuration).apiConsignsalesConsignSaleIdGet(consignSaleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} consignsaleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsignSaleApi
     */
    public apiConsignsalesConsignsaleIdConsignlineitemsGet(consignsaleId: string, options?: RawAxiosRequestConfig) {
        return ConsignSaleApiFp(this.configuration).apiConsignsalesConsignsaleIdConsignlineitemsGet(consignsaleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} consignsaleId 
     * @param {CreateMasterItemForConsignRequest} [createMasterItemForConsignRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsignSaleApi
     */
    public apiConsignsalesConsignsaleIdCreateMasteritemPost(consignsaleId: string, createMasterItemForConsignRequest?: CreateMasterItemForConsignRequest, options?: RawAxiosRequestConfig) {
        return ConsignSaleApiFp(this.configuration).apiConsignsalesConsignsaleIdCreateMasteritemPost(consignsaleId, createMasterItemForConsignRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [shopId] 
     * @param {string} [consignSaleCode] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {ConsignSaleStatus} [status] 
     * @param {ConsignSaleType} [consignType] 
     * @param {string} [email] 
     * @param {string} [consignorName] 
     * @param {string} [consignorPhone] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsignSaleApi
     */
    public apiConsignsalesGet(page?: number, pageSize?: number, shopId?: string, consignSaleCode?: string, startDate?: string, endDate?: string, status?: ConsignSaleStatus, consignType?: ConsignSaleType, email?: string, consignorName?: string, consignorPhone?: string, options?: RawAxiosRequestConfig) {
        return ConsignSaleApiFp(this.configuration).apiConsignsalesGet(page, pageSize, shopId, consignSaleCode, startDate, endDate, status, consignType, email, consignorName, consignorPhone, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DashboardApi - axios parameter creator
 * @export
 */
export const DashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} shopId 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardShopShopIdOfflineRevenueGet: async (shopId: string, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('apiDashboardShopShopIdOfflineRevenueGet', 'shopId', shopId)
            const localVarPath = `/api/dashboard/shop/{shopId}/offline-revenue`
                .replace(`{${"shopId"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardSystemRevenueGet: async (startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/system/revenue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [year] 
         * @param {string} [shopId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthlyPayoutsGet: async (year?: number, shopId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/monthly-payouts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (shopId !== undefined) {
                localVarQueryParameter['shopId'] = shopId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} shopId 
         * @param {number} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopShopIdMonthlyOfflineRevenueGet: async (shopId: string, year?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('shopShopIdMonthlyOfflineRevenueGet', 'shopId', shopId)
            const localVarPath = `/shop/{shopId}/monthly-offline-revenue`
                .replace(`{${"shopId"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemMonthlyRevenueGet: async (year?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system/monthly-revenue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardApi - functional programming interface
 * @export
 */
export const DashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} shopId 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardShopShopIdOfflineRevenueGet(shopId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopRevenueDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardShopShopIdOfflineRevenueGet(shopId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.apiDashboardShopShopIdOfflineRevenueGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardSystemRevenueGet(startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemRevenueDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardSystemRevenueGet(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.apiDashboardSystemRevenueGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [year] 
         * @param {string} [shopId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async monthlyPayoutsGet(year?: number, shopId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonthlyPayoutsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.monthlyPayoutsGet(year, shopId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.monthlyPayoutsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} shopId 
         * @param {number} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopShopIdMonthlyOfflineRevenueGet(shopId: string, year?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonthlyRevenueDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopShopIdMonthlyOfflineRevenueGet(shopId, year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.shopShopIdMonthlyOfflineRevenueGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemMonthlyRevenueGet(year?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonthlyRevenueDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemMonthlyRevenueGet(year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.systemMonthlyRevenueGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DashboardApi - factory interface
 * @export
 */
export const DashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardApiFp(configuration)
    return {
        /**
         * 
         * @param {string} shopId 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardShopShopIdOfflineRevenueGet(shopId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<ShopRevenueDto> {
            return localVarFp.apiDashboardShopShopIdOfflineRevenueGet(shopId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardSystemRevenueGet(startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<SystemRevenueDto> {
            return localVarFp.apiDashboardSystemRevenueGet(startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [year] 
         * @param {string} [shopId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthlyPayoutsGet(year?: number, shopId?: string, options?: RawAxiosRequestConfig): AxiosPromise<MonthlyPayoutsResponse> {
            return localVarFp.monthlyPayoutsGet(year, shopId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} shopId 
         * @param {number} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopShopIdMonthlyOfflineRevenueGet(shopId: string, year?: number, options?: RawAxiosRequestConfig): AxiosPromise<MonthlyRevenueDto> {
            return localVarFp.shopShopIdMonthlyOfflineRevenueGet(shopId, year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemMonthlyRevenueGet(year?: number, options?: RawAxiosRequestConfig): AxiosPromise<MonthlyRevenueDto> {
            return localVarFp.systemMonthlyRevenueGet(year, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardApi - object-oriented interface
 * @export
 * @class DashboardApi
 * @extends {BaseAPI}
 */
export class DashboardApi extends BaseAPI {
    /**
     * 
     * @param {string} shopId 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public apiDashboardShopShopIdOfflineRevenueGet(shopId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).apiDashboardShopShopIdOfflineRevenueGet(shopId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public apiDashboardSystemRevenueGet(startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).apiDashboardSystemRevenueGet(startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [year] 
     * @param {string} [shopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public monthlyPayoutsGet(year?: number, shopId?: string, options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).monthlyPayoutsGet(year, shopId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} shopId 
     * @param {number} [year] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public shopShopIdMonthlyOfflineRevenueGet(shopId: string, year?: number, options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).shopShopIdMonthlyOfflineRevenueGet(shopId, year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [year] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public systemMonthlyRevenueGet(year?: number, options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).systemMonthlyRevenueGet(year, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FashionItemApi - axios parameter creator
 * @export
 */
export const FashionItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [itemCode] 
         * @param {string} [memberId] 
         * @param {GenderType} [gender] 
         * @param {string} [color] 
         * @param {SizeType} [size] 
         * @param {string} [condition] 
         * @param {number} [minPrice] 
         * @param {number} [maxPrice] 
         * @param {Array<FashionItemStatus>} [status] 
         * @param {Array<FashionItemType>} [type] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [name] 
         * @param {string} [categoryId] 
         * @param {string} [shopId] 
         * @param {string} [masterItemId] 
         * @param {string} [masterItemCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFashionitemsGet: async (itemCode?: string, memberId?: string, gender?: GenderType, color?: string, size?: SizeType, condition?: string, minPrice?: number, maxPrice?: number, status?: Array<FashionItemStatus>, type?: Array<FashionItemType>, sortBy?: string, sortDescending?: boolean, pageNumber?: number, pageSize?: number, name?: string, categoryId?: string, shopId?: string, masterItemId?: string, masterItemCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/fashionitems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (itemCode !== undefined) {
                localVarQueryParameter['ItemCode'] = itemCode;
            }

            if (memberId !== undefined) {
                localVarQueryParameter['MemberId'] = memberId;
            }

            if (gender !== undefined) {
                localVarQueryParameter['Gender'] = gender;
            }

            if (color !== undefined) {
                localVarQueryParameter['Color'] = color;
            }

            if (size !== undefined) {
                localVarQueryParameter['Size'] = size;
            }

            if (condition !== undefined) {
                localVarQueryParameter['Condition'] = condition;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['MinPrice'] = minPrice;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['MaxPrice'] = maxPrice;
            }

            if (status) {
                localVarQueryParameter['Status'] = status;
            }

            if (type) {
                localVarQueryParameter['Type'] = type;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['SortBy'] = sortBy;
            }

            if (sortDescending !== undefined) {
                localVarQueryParameter['SortDescending'] = sortDescending;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['CategoryId'] = categoryId;
            }

            if (shopId !== undefined) {
                localVarQueryParameter['ShopId'] = shopId;
            }

            if (masterItemId !== undefined) {
                localVarQueryParameter['MasterItemId'] = masterItemId;
            }

            if (masterItemCode !== undefined) {
                localVarQueryParameter['MasterItemCode'] = masterItemCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} itemId 
         * @param {string} [memberId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFashionitemsItemIdGet: async (itemId: string, memberId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiFashionitemsItemIdGet', 'itemId', itemId)
            const localVarPath = `/api/fashionitems/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (memberId !== undefined) {
                localVarQueryParameter['memberId'] = memberId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} itemId 
         * @param {UpdateFashionItemRequest} [updateFashionItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFashionitemsItemIdPut: async (itemId: string, updateFashionItemRequest?: UpdateFashionItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiFashionitemsItemIdPut', 'itemId', itemId)
            const localVarPath = `/api/fashionitems/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFashionItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} itemId 
         * @param {UpdateFashionItemStatusRequest} [updateFashionItemStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFashionitemsItemIdStatusPatch: async (itemId: string, updateFashionItemStatusRequest?: UpdateFashionItemStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiFashionitemsItemIdStatusPatch', 'itemId', itemId)
            const localVarPath = `/api/fashionitems/{itemId}/status`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFashionItemStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} itemid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFashionitemsItemidCheckAvailabilityPut: async (itemid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemid' is not null or undefined
            assertParamExists('apiFashionitemsItemidCheckAvailabilityPut', 'itemid', itemid)
            const localVarPath = `/api/fashionitems/{itemid}/check-availability`
                .replace(`{${"itemid"}}`, encodeURIComponent(String(itemid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FashionItemApi - functional programming interface
 * @export
 */
export const FashionItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FashionItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [itemCode] 
         * @param {string} [memberId] 
         * @param {GenderType} [gender] 
         * @param {string} [color] 
         * @param {SizeType} [size] 
         * @param {string} [condition] 
         * @param {number} [minPrice] 
         * @param {number} [maxPrice] 
         * @param {Array<FashionItemStatus>} [status] 
         * @param {Array<FashionItemType>} [type] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [name] 
         * @param {string} [categoryId] 
         * @param {string} [shopId] 
         * @param {string} [masterItemId] 
         * @param {string} [masterItemCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFashionitemsGet(itemCode?: string, memberId?: string, gender?: GenderType, color?: string, size?: SizeType, condition?: string, minPrice?: number, maxPrice?: number, status?: Array<FashionItemStatus>, type?: Array<FashionItemType>, sortBy?: string, sortDescending?: boolean, pageNumber?: number, pageSize?: number, name?: string, categoryId?: string, shopId?: string, masterItemId?: string, masterItemCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FashionItemListPaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFashionitemsGet(itemCode, memberId, gender, color, size, condition, minPrice, maxPrice, status, type, sortBy, sortDescending, pageNumber, pageSize, name, categoryId, shopId, masterItemId, masterItemCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FashionItemApi.apiFashionitemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} itemId 
         * @param {string} [memberId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFashionitemsItemIdGet(itemId: string, memberId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FashionItemDetailResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFashionitemsItemIdGet(itemId, memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FashionItemApi.apiFashionitemsItemIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} itemId 
         * @param {UpdateFashionItemRequest} [updateFashionItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFashionitemsItemIdPut(itemId: string, updateFashionItemRequest?: UpdateFashionItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FashionItemDetailResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFashionitemsItemIdPut(itemId, updateFashionItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FashionItemApi.apiFashionitemsItemIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} itemId 
         * @param {UpdateFashionItemStatusRequest} [updateFashionItemStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFashionitemsItemIdStatusPatch(itemId: string, updateFashionItemStatusRequest?: UpdateFashionItemStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FashionItemDetailResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFashionitemsItemIdStatusPatch(itemId, updateFashionItemStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FashionItemApi.apiFashionitemsItemIdStatusPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} itemid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFashionitemsItemidCheckAvailabilityPut(itemid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FashionItemDetailResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFashionitemsItemidCheckAvailabilityPut(itemid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FashionItemApi.apiFashionitemsItemidCheckAvailabilityPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FashionItemApi - factory interface
 * @export
 */
export const FashionItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FashionItemApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [itemCode] 
         * @param {string} [memberId] 
         * @param {GenderType} [gender] 
         * @param {string} [color] 
         * @param {SizeType} [size] 
         * @param {string} [condition] 
         * @param {number} [minPrice] 
         * @param {number} [maxPrice] 
         * @param {Array<FashionItemStatus>} [status] 
         * @param {Array<FashionItemType>} [type] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [name] 
         * @param {string} [categoryId] 
         * @param {string} [shopId] 
         * @param {string} [masterItemId] 
         * @param {string} [masterItemCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFashionitemsGet(itemCode?: string, memberId?: string, gender?: GenderType, color?: string, size?: SizeType, condition?: string, minPrice?: number, maxPrice?: number, status?: Array<FashionItemStatus>, type?: Array<FashionItemType>, sortBy?: string, sortDescending?: boolean, pageNumber?: number, pageSize?: number, name?: string, categoryId?: string, shopId?: string, masterItemId?: string, masterItemCode?: string, options?: RawAxiosRequestConfig): AxiosPromise<FashionItemListPaginationResponse> {
            return localVarFp.apiFashionitemsGet(itemCode, memberId, gender, color, size, condition, minPrice, maxPrice, status, type, sortBy, sortDescending, pageNumber, pageSize, name, categoryId, shopId, masterItemId, masterItemCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} itemId 
         * @param {string} [memberId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFashionitemsItemIdGet(itemId: string, memberId?: string, options?: RawAxiosRequestConfig): AxiosPromise<FashionItemDetailResponseResult> {
            return localVarFp.apiFashionitemsItemIdGet(itemId, memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} itemId 
         * @param {UpdateFashionItemRequest} [updateFashionItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFashionitemsItemIdPut(itemId: string, updateFashionItemRequest?: UpdateFashionItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<FashionItemDetailResponseResult> {
            return localVarFp.apiFashionitemsItemIdPut(itemId, updateFashionItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} itemId 
         * @param {UpdateFashionItemStatusRequest} [updateFashionItemStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFashionitemsItemIdStatusPatch(itemId: string, updateFashionItemStatusRequest?: UpdateFashionItemStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<FashionItemDetailResponseResult> {
            return localVarFp.apiFashionitemsItemIdStatusPatch(itemId, updateFashionItemStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} itemid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFashionitemsItemidCheckAvailabilityPut(itemid: string, options?: RawAxiosRequestConfig): AxiosPromise<FashionItemDetailResponseResult> {
            return localVarFp.apiFashionitemsItemidCheckAvailabilityPut(itemid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FashionItemApi - object-oriented interface
 * @export
 * @class FashionItemApi
 * @extends {BaseAPI}
 */
export class FashionItemApi extends BaseAPI {
    /**
     * 
     * @param {string} [itemCode] 
     * @param {string} [memberId] 
     * @param {GenderType} [gender] 
     * @param {string} [color] 
     * @param {SizeType} [size] 
     * @param {string} [condition] 
     * @param {number} [minPrice] 
     * @param {number} [maxPrice] 
     * @param {Array<FashionItemStatus>} [status] 
     * @param {Array<FashionItemType>} [type] 
     * @param {string} [sortBy] 
     * @param {boolean} [sortDescending] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [name] 
     * @param {string} [categoryId] 
     * @param {string} [shopId] 
     * @param {string} [masterItemId] 
     * @param {string} [masterItemCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FashionItemApi
     */
    public apiFashionitemsGet(itemCode?: string, memberId?: string, gender?: GenderType, color?: string, size?: SizeType, condition?: string, minPrice?: number, maxPrice?: number, status?: Array<FashionItemStatus>, type?: Array<FashionItemType>, sortBy?: string, sortDescending?: boolean, pageNumber?: number, pageSize?: number, name?: string, categoryId?: string, shopId?: string, masterItemId?: string, masterItemCode?: string, options?: RawAxiosRequestConfig) {
        return FashionItemApiFp(this.configuration).apiFashionitemsGet(itemCode, memberId, gender, color, size, condition, minPrice, maxPrice, status, type, sortBy, sortDescending, pageNumber, pageSize, name, categoryId, shopId, masterItemId, masterItemCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} itemId 
     * @param {string} [memberId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FashionItemApi
     */
    public apiFashionitemsItemIdGet(itemId: string, memberId?: string, options?: RawAxiosRequestConfig) {
        return FashionItemApiFp(this.configuration).apiFashionitemsItemIdGet(itemId, memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} itemId 
     * @param {UpdateFashionItemRequest} [updateFashionItemRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FashionItemApi
     */
    public apiFashionitemsItemIdPut(itemId: string, updateFashionItemRequest?: UpdateFashionItemRequest, options?: RawAxiosRequestConfig) {
        return FashionItemApiFp(this.configuration).apiFashionitemsItemIdPut(itemId, updateFashionItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} itemId 
     * @param {UpdateFashionItemStatusRequest} [updateFashionItemStatusRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FashionItemApi
     */
    public apiFashionitemsItemIdStatusPatch(itemId: string, updateFashionItemStatusRequest?: UpdateFashionItemStatusRequest, options?: RawAxiosRequestConfig) {
        return FashionItemApiFp(this.configuration).apiFashionitemsItemIdStatusPatch(itemId, updateFashionItemStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} itemid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FashionItemApi
     */
    public apiFashionitemsItemidCheckAvailabilityPut(itemid: string, options?: RawAxiosRequestConfig) {
        return FashionItemApiFp(this.configuration).apiFashionitemsItemidCheckAvailabilityPut(itemid, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InquiryApi - axios parameter creator
 * @export
 */
export const InquiryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [searchName] 
         * @param {string} [memberId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInquiriesGet: async (page?: number, pageSize?: number, searchName?: string, memberId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inquiries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (searchName !== undefined) {
                localVarQueryParameter['SearchName'] = searchName;
            }

            if (memberId !== undefined) {
                localVarQueryParameter['MemberId'] = memberId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InquiryApi - functional programming interface
 * @export
 */
export const InquiryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InquiryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [searchName] 
         * @param {string} [memberId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInquiriesGet(page?: number, pageSize?: number, searchName?: string, memberId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InquiryListResponsePaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInquiriesGet(page, pageSize, searchName, memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InquiryApi.apiInquiriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InquiryApi - factory interface
 * @export
 */
export const InquiryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InquiryApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [searchName] 
         * @param {string} [memberId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInquiriesGet(page?: number, pageSize?: number, searchName?: string, memberId?: string, options?: RawAxiosRequestConfig): AxiosPromise<InquiryListResponsePaginationResponse> {
            return localVarFp.apiInquiriesGet(page, pageSize, searchName, memberId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InquiryApi - object-oriented interface
 * @export
 * @class InquiryApi
 * @extends {BaseAPI}
 */
export class InquiryApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [searchName] 
     * @param {string} [memberId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InquiryApi
     */
    public apiInquiriesGet(page?: number, pageSize?: number, searchName?: string, memberId?: string, options?: RawAxiosRequestConfig) {
        return InquiryApiFp(this.configuration).apiInquiriesGet(page, pageSize, searchName, memberId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MasterItemApi - axios parameter creator
 * @export
 */
export const MasterItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [masterItemCode] 
         * @param {string} [name] 
         * @param {string} [masterItemId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterItemsFindGet: async (masterItemCode?: string, name?: string, masterItemId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/master-items/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (masterItemCode !== undefined) {
                localVarQueryParameter['MasterItemCode'] = masterItemCode;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (masterItemId !== undefined) {
                localVarQueryParameter['MasterItemId'] = masterItemId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {string} [categoryId] 
         * @param {GenderType} [genderType] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterItemsFrontpageGet: async (searchTerm?: string, categoryId?: string, genderType?: GenderType, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/master-items/frontpage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['CategoryId'] = categoryId;
            }

            if (genderType !== undefined) {
                localVarQueryParameter['GenderType'] = genderType;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {string} [searchItemCode] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [categoryId] 
         * @param {string} [shopId] 
         * @param {GenderType} [genderType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterItemsGet: async (searchTerm?: string, searchItemCode?: string, pageNumber?: number, pageSize?: number, categoryId?: string, shopId?: string, genderType?: GenderType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/master-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }

            if (searchItemCode !== undefined) {
                localVarQueryParameter['SearchItemCode'] = searchItemCode;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['CategoryId'] = categoryId;
            }

            if (shopId !== undefined) {
                localVarQueryParameter['ShopId'] = shopId;
            }

            if (genderType !== undefined) {
                localVarQueryParameter['GenderType'] = genderType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} masterItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterItemsMasterItemIdGet: async (masterItemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'masterItemId' is not null or undefined
            assertParamExists('apiMasterItemsMasterItemIdGet', 'masterItemId', masterItemId)
            const localVarPath = `/api/master-items/{masterItemId}`
                .replace(`{${"masterItemId"}}`, encodeURIComponent(String(masterItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} masterItemId 
         * @param {string} [searchItemCode] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [memberId] 
         * @param {number} [minSellingPrice] 
         * @param {number} [maxSellingPrice] 
         * @param {Array<FashionItemStatus>} [status] 
         * @param {Array<FashionItemType>} [types] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterItemsMasterItemIdIndividualItemsGet: async (masterItemId: string, searchItemCode?: string, pageNumber?: number, pageSize?: number, memberId?: string, minSellingPrice?: number, maxSellingPrice?: number, status?: Array<FashionItemStatus>, types?: Array<FashionItemType>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'masterItemId' is not null or undefined
            assertParamExists('apiMasterItemsMasterItemIdIndividualItemsGet', 'masterItemId', masterItemId)
            const localVarPath = `/api/master-items/{masterItemId}/individual-items`
                .replace(`{${"masterItemId"}}`, encodeURIComponent(String(masterItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (searchItemCode !== undefined) {
                localVarQueryParameter['SearchItemCode'] = searchItemCode;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (memberId !== undefined) {
                localVarQueryParameter['MemberId'] = memberId;
            }

            if (minSellingPrice !== undefined) {
                localVarQueryParameter['MinSellingPrice'] = minSellingPrice;
            }

            if (maxSellingPrice !== undefined) {
                localVarQueryParameter['MaxSellingPrice'] = maxSellingPrice;
            }

            if (status) {
                localVarQueryParameter['Status'] = status;
            }

            if (types) {
                localVarQueryParameter['Types'] = types;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} masterItemId 
         * @param {Array<CreateIndividualItemRequest>} [createIndividualItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterItemsMasterItemIdIndividualItemsPost: async (masterItemId: string, createIndividualItemRequest?: Array<CreateIndividualItemRequest>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'masterItemId' is not null or undefined
            assertParamExists('apiMasterItemsMasterItemIdIndividualItemsPost', 'masterItemId', masterItemId)
            const localVarPath = `/api/master-items/{masterItemId}/individual-items`
                .replace(`{${"masterItemId"}}`, encodeURIComponent(String(masterItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIndividualItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} masteritemId 
         * @param {UpdateMasterItemRequest} [updateMasterItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterItemsMasteritemIdUpdateMasteritemPut: async (masteritemId: string, updateMasterItemRequest?: UpdateMasterItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'masteritemId' is not null or undefined
            assertParamExists('apiMasterItemsMasteritemIdUpdateMasteritemPut', 'masteritemId', masteritemId)
            const localVarPath = `/api/master-items/{masteritemId}/update-masteritem`
                .replace(`{${"masteritemId"}}`, encodeURIComponent(String(masteritemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMasterItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateMasterItemRequest} [createMasterItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterItemsPost: async (createMasterItemRequest?: CreateMasterItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/master-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMasterItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MasterItemApi - functional programming interface
 * @export
 */
export const MasterItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MasterItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [masterItemCode] 
         * @param {string} [name] 
         * @param {string} [masterItemId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterItemsFindGet(masterItemCode?: string, name?: string, masterItemId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterItemDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterItemsFindGet(masterItemCode, name, masterItemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MasterItemApi.apiMasterItemsFindGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {string} [categoryId] 
         * @param {GenderType} [genderType] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterItemsFrontpageGet(searchTerm?: string, categoryId?: string, genderType?: GenderType, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterItemListResponsePaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterItemsFrontpageGet(searchTerm, categoryId, genderType, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MasterItemApi.apiMasterItemsFrontpageGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {string} [searchItemCode] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [categoryId] 
         * @param {string} [shopId] 
         * @param {GenderType} [genderType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterItemsGet(searchTerm?: string, searchItemCode?: string, pageNumber?: number, pageSize?: number, categoryId?: string, shopId?: string, genderType?: GenderType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterItemListResponsePaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterItemsGet(searchTerm, searchItemCode, pageNumber, pageSize, categoryId, shopId, genderType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MasterItemApi.apiMasterItemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} masterItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterItemsMasterItemIdGet(masterItemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterItemDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterItemsMasterItemIdGet(masterItemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MasterItemApi.apiMasterItemsMasterItemIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} masterItemId 
         * @param {string} [searchItemCode] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [memberId] 
         * @param {number} [minSellingPrice] 
         * @param {number} [maxSellingPrice] 
         * @param {Array<FashionItemStatus>} [status] 
         * @param {Array<FashionItemType>} [types] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterItemsMasterItemIdIndividualItemsGet(masterItemId: string, searchItemCode?: string, pageNumber?: number, pageSize?: number, memberId?: string, minSellingPrice?: number, maxSellingPrice?: number, status?: Array<FashionItemStatus>, types?: Array<FashionItemType>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndividualItemListResponsePaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterItemsMasterItemIdIndividualItemsGet(masterItemId, searchItemCode, pageNumber, pageSize, memberId, minSellingPrice, maxSellingPrice, status, types, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MasterItemApi.apiMasterItemsMasterItemIdIndividualItemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} masterItemId 
         * @param {Array<CreateIndividualItemRequest>} [createIndividualItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterItemsMasterItemIdIndividualItemsPost(masterItemId: string, createIndividualItemRequest?: Array<CreateIndividualItemRequest>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndividualItemListResponseListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterItemsMasterItemIdIndividualItemsPost(masterItemId, createIndividualItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MasterItemApi.apiMasterItemsMasterItemIdIndividualItemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} masteritemId 
         * @param {UpdateMasterItemRequest} [updateMasterItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterItemsMasteritemIdUpdateMasteritemPut(masteritemId: string, updateMasterItemRequest?: UpdateMasterItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterItemResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterItemsMasteritemIdUpdateMasteritemPut(masteritemId, updateMasterItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MasterItemApi.apiMasterItemsMasteritemIdUpdateMasteritemPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateMasterItemRequest} [createMasterItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterItemsPost(createMasterItemRequest?: CreateMasterItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterItemResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterItemsPost(createMasterItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MasterItemApi.apiMasterItemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MasterItemApi - factory interface
 * @export
 */
export const MasterItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MasterItemApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [masterItemCode] 
         * @param {string} [name] 
         * @param {string} [masterItemId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterItemsFindGet(masterItemCode?: string, name?: string, masterItemId?: string, options?: RawAxiosRequestConfig): AxiosPromise<MasterItemDetailResponse> {
            return localVarFp.apiMasterItemsFindGet(masterItemCode, name, masterItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {string} [categoryId] 
         * @param {GenderType} [genderType] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterItemsFrontpageGet(searchTerm?: string, categoryId?: string, genderType?: GenderType, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<MasterItemListResponsePaginationResponse> {
            return localVarFp.apiMasterItemsFrontpageGet(searchTerm, categoryId, genderType, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {string} [searchItemCode] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [categoryId] 
         * @param {string} [shopId] 
         * @param {GenderType} [genderType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterItemsGet(searchTerm?: string, searchItemCode?: string, pageNumber?: number, pageSize?: number, categoryId?: string, shopId?: string, genderType?: GenderType, options?: RawAxiosRequestConfig): AxiosPromise<MasterItemListResponsePaginationResponse> {
            return localVarFp.apiMasterItemsGet(searchTerm, searchItemCode, pageNumber, pageSize, categoryId, shopId, genderType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} masterItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterItemsMasterItemIdGet(masterItemId: string, options?: RawAxiosRequestConfig): AxiosPromise<MasterItemDetailResponse> {
            return localVarFp.apiMasterItemsMasterItemIdGet(masterItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} masterItemId 
         * @param {string} [searchItemCode] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [memberId] 
         * @param {number} [minSellingPrice] 
         * @param {number} [maxSellingPrice] 
         * @param {Array<FashionItemStatus>} [status] 
         * @param {Array<FashionItemType>} [types] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterItemsMasterItemIdIndividualItemsGet(masterItemId: string, searchItemCode?: string, pageNumber?: number, pageSize?: number, memberId?: string, minSellingPrice?: number, maxSellingPrice?: number, status?: Array<FashionItemStatus>, types?: Array<FashionItemType>, options?: RawAxiosRequestConfig): AxiosPromise<IndividualItemListResponsePaginationResponse> {
            return localVarFp.apiMasterItemsMasterItemIdIndividualItemsGet(masterItemId, searchItemCode, pageNumber, pageSize, memberId, minSellingPrice, maxSellingPrice, status, types, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} masterItemId 
         * @param {Array<CreateIndividualItemRequest>} [createIndividualItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterItemsMasterItemIdIndividualItemsPost(masterItemId: string, createIndividualItemRequest?: Array<CreateIndividualItemRequest>, options?: RawAxiosRequestConfig): AxiosPromise<IndividualItemListResponseListResult> {
            return localVarFp.apiMasterItemsMasterItemIdIndividualItemsPost(masterItemId, createIndividualItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} masteritemId 
         * @param {UpdateMasterItemRequest} [updateMasterItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterItemsMasteritemIdUpdateMasteritemPut(masteritemId: string, updateMasterItemRequest?: UpdateMasterItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<MasterItemResponseResult> {
            return localVarFp.apiMasterItemsMasteritemIdUpdateMasteritemPut(masteritemId, updateMasterItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateMasterItemRequest} [createMasterItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterItemsPost(createMasterItemRequest?: CreateMasterItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<MasterItemResponseResult> {
            return localVarFp.apiMasterItemsPost(createMasterItemRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MasterItemApi - object-oriented interface
 * @export
 * @class MasterItemApi
 * @extends {BaseAPI}
 */
export class MasterItemApi extends BaseAPI {
    /**
     * 
     * @param {string} [masterItemCode] 
     * @param {string} [name] 
     * @param {string} [masterItemId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterItemApi
     */
    public apiMasterItemsFindGet(masterItemCode?: string, name?: string, masterItemId?: string, options?: RawAxiosRequestConfig) {
        return MasterItemApiFp(this.configuration).apiMasterItemsFindGet(masterItemCode, name, masterItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [searchTerm] 
     * @param {string} [categoryId] 
     * @param {GenderType} [genderType] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterItemApi
     */
    public apiMasterItemsFrontpageGet(searchTerm?: string, categoryId?: string, genderType?: GenderType, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return MasterItemApiFp(this.configuration).apiMasterItemsFrontpageGet(searchTerm, categoryId, genderType, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [searchTerm] 
     * @param {string} [searchItemCode] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [categoryId] 
     * @param {string} [shopId] 
     * @param {GenderType} [genderType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterItemApi
     */
    public apiMasterItemsGet(searchTerm?: string, searchItemCode?: string, pageNumber?: number, pageSize?: number, categoryId?: string, shopId?: string, genderType?: GenderType, options?: RawAxiosRequestConfig) {
        return MasterItemApiFp(this.configuration).apiMasterItemsGet(searchTerm, searchItemCode, pageNumber, pageSize, categoryId, shopId, genderType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} masterItemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterItemApi
     */
    public apiMasterItemsMasterItemIdGet(masterItemId: string, options?: RawAxiosRequestConfig) {
        return MasterItemApiFp(this.configuration).apiMasterItemsMasterItemIdGet(masterItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} masterItemId 
     * @param {string} [searchItemCode] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [memberId] 
     * @param {number} [minSellingPrice] 
     * @param {number} [maxSellingPrice] 
     * @param {Array<FashionItemStatus>} [status] 
     * @param {Array<FashionItemType>} [types] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterItemApi
     */
    public apiMasterItemsMasterItemIdIndividualItemsGet(masterItemId: string, searchItemCode?: string, pageNumber?: number, pageSize?: number, memberId?: string, minSellingPrice?: number, maxSellingPrice?: number, status?: Array<FashionItemStatus>, types?: Array<FashionItemType>, options?: RawAxiosRequestConfig) {
        return MasterItemApiFp(this.configuration).apiMasterItemsMasterItemIdIndividualItemsGet(masterItemId, searchItemCode, pageNumber, pageSize, memberId, minSellingPrice, maxSellingPrice, status, types, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} masterItemId 
     * @param {Array<CreateIndividualItemRequest>} [createIndividualItemRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterItemApi
     */
    public apiMasterItemsMasterItemIdIndividualItemsPost(masterItemId: string, createIndividualItemRequest?: Array<CreateIndividualItemRequest>, options?: RawAxiosRequestConfig) {
        return MasterItemApiFp(this.configuration).apiMasterItemsMasterItemIdIndividualItemsPost(masterItemId, createIndividualItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} masteritemId 
     * @param {UpdateMasterItemRequest} [updateMasterItemRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterItemApi
     */
    public apiMasterItemsMasteritemIdUpdateMasteritemPut(masteritemId: string, updateMasterItemRequest?: UpdateMasterItemRequest, options?: RawAxiosRequestConfig) {
        return MasterItemApiFp(this.configuration).apiMasterItemsMasteritemIdUpdateMasteritemPut(masteritemId, updateMasterItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateMasterItemRequest} [createMasterItemRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterItemApi
     */
    public apiMasterItemsPost(createMasterItemRequest?: CreateMasterItemRequest, options?: RawAxiosRequestConfig) {
        return MasterItemApiFp(this.configuration).apiMasterItemsPost(createMasterItemRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<string>} [itemIds] 
         * @param {number} [destinationDistrictId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersCalculateShippingFeeGet: async (itemIds?: Array<string>, destinationDistrictId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/orders/calculate-shipping-fee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (itemIds) {
                localVarQueryParameter['itemIds'] = itemIds;
            }

            if (destinationDistrictId !== undefined) {
                localVarQueryParameter['destinationDistrictId'] = destinationDistrictId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {OrderStatus} [status] 
         * @param {PaymentMethod} [paymentMethod] 
         * @param {string} [orderCode] 
         * @param {boolean} [isFromAuction] 
         * @param {boolean} [isPointPackage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersGet: async (pageNumber?: number, pageSize?: number, shopId?: string, status?: OrderStatus, paymentMethod?: PaymentMethod, orderCode?: string, isFromAuction?: boolean, isPointPackage?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (shopId !== undefined) {
                localVarQueryParameter['ShopId'] = shopId;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (paymentMethod !== undefined) {
                localVarQueryParameter['PaymentMethod'] = paymentMethod;
            }

            if (orderCode !== undefined) {
                localVarQueryParameter['OrderCode'] = orderCode;
            }

            if (isFromAuction !== undefined) {
                localVarQueryParameter['IsFromAuction'] = isFromAuction;
            }

            if (isPointPackage !== undefined) {
                localVarQueryParameter['IsPointPackage'] = isPointPackage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersOrderIdCancelPut: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiOrdersOrderIdCancelPut', 'orderId', orderId)
            const localVarPath = `/api/orders/{OrderId}/cancel`
                .replace(`{${"OrderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersOrderIdCancelbyadminPut: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiOrdersOrderIdCancelbyadminPut', 'orderId', orderId)
            const localVarPath = `/api/orders/{orderId}/cancelbyadmin`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersOrderIdGet: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiOrdersOrderIdGet', 'orderId', orderId)
            const localVarPath = `/api/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersOrderIdOrderlineitemsGet: async (orderId: string, pageNumber?: number, pageSize?: number, shopId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiOrdersOrderIdOrderlineitemsGet', 'orderId', orderId)
            const localVarPath = `/api/orders/{orderId}/orderlineitems`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (shopId !== undefined) {
                localVarQueryParameter['ShopId'] = shopId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId 
         * @param {PurchaseOrderRequest} [purchaseOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersOrderIdPayPointsPost: async (orderId: string, purchaseOrderRequest?: PurchaseOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiOrdersOrderIdPayPointsPost', 'orderId', orderId)
            const localVarPath = `/api/orders/{orderId}/pay/points`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId 
         * @param {PurchaseOrderRequest} [purchaseOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersOrderIdPayVnpayPost: async (orderId: string, purchaseOrderRequest?: PurchaseOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiOrdersOrderIdPayVnpayPost', 'orderId', orderId)
            const localVarPath = `/api/orders/{orderId}/pay/vnpay`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersPaymentReturnGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/orders/payment-return`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<string>} [itemIds] 
         * @param {number} [destinationDistrictId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersCalculateShippingFeeGet(itemIds?: Array<string>, destinationDistrictId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingFeeResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersCalculateShippingFeeGet(itemIds, destinationDistrictId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrdersCalculateShippingFeeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {OrderStatus} [status] 
         * @param {PaymentMethod} [paymentMethod] 
         * @param {string} [orderCode] 
         * @param {boolean} [isFromAuction] 
         * @param {boolean} [isPointPackage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersGet(pageNumber?: number, pageSize?: number, shopId?: string, status?: OrderStatus, paymentMethod?: PaymentMethod, orderCode?: string, isFromAuction?: boolean, isPointPackage?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderListResponsePaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersGet(pageNumber, pageSize, shopId, status, paymentMethod, orderCode, isFromAuction, isPointPackage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrdersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersOrderIdCancelPut(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersOrderIdCancelPut(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrdersOrderIdCancelPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersOrderIdCancelbyadminPut(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersOrderIdCancelbyadminPut(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrdersOrderIdCancelbyadminPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersOrderIdGet(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDetailedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersOrderIdGet(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrdersOrderIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orderId 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersOrderIdOrderlineitemsGet(orderId: string, pageNumber?: number, pageSize?: number, shopId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderLineItemListResponsePaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersOrderIdOrderlineitemsGet(orderId, pageNumber, pageSize, shopId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrdersOrderIdOrderlineitemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orderId 
         * @param {PurchaseOrderRequest} [purchaseOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersOrderIdPayPointsPost(orderId: string, purchaseOrderRequest?: PurchaseOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayWithPointsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersOrderIdPayPointsPost(orderId, purchaseOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrdersOrderIdPayPointsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orderId 
         * @param {PurchaseOrderRequest} [purchaseOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersOrderIdPayVnpayPost(orderId: string, purchaseOrderRequest?: PurchaseOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VnPayPurchaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersOrderIdPayVnpayPost(orderId, purchaseOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrdersOrderIdPayVnpayPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersPaymentReturnGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersPaymentReturnGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrdersPaymentReturnGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * 
         * @param {Array<string>} [itemIds] 
         * @param {number} [destinationDistrictId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersCalculateShippingFeeGet(itemIds?: Array<string>, destinationDistrictId?: number, options?: RawAxiosRequestConfig): AxiosPromise<ShippingFeeResult> {
            return localVarFp.apiOrdersCalculateShippingFeeGet(itemIds, destinationDistrictId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {OrderStatus} [status] 
         * @param {PaymentMethod} [paymentMethod] 
         * @param {string} [orderCode] 
         * @param {boolean} [isFromAuction] 
         * @param {boolean} [isPointPackage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersGet(pageNumber?: number, pageSize?: number, shopId?: string, status?: OrderStatus, paymentMethod?: PaymentMethod, orderCode?: string, isFromAuction?: boolean, isPointPackage?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<OrderListResponsePaginationResponse> {
            return localVarFp.apiOrdersGet(pageNumber, pageSize, shopId, status, paymentMethod, orderCode, isFromAuction, isPointPackage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersOrderIdCancelPut(orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<StringResult> {
            return localVarFp.apiOrdersOrderIdCancelPut(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersOrderIdCancelbyadminPut(orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<StringResult> {
            return localVarFp.apiOrdersOrderIdCancelbyadminPut(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersOrderIdGet(orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<OrderDetailedResponse> {
            return localVarFp.apiOrdersOrderIdGet(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orderId 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersOrderIdOrderlineitemsGet(orderId: string, pageNumber?: number, pageSize?: number, shopId?: string, options?: RawAxiosRequestConfig): AxiosPromise<OrderLineItemListResponsePaginationResponse> {
            return localVarFp.apiOrdersOrderIdOrderlineitemsGet(orderId, pageNumber, pageSize, shopId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orderId 
         * @param {PurchaseOrderRequest} [purchaseOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersOrderIdPayPointsPost(orderId: string, purchaseOrderRequest?: PurchaseOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<PayWithPointsResponse> {
            return localVarFp.apiOrdersOrderIdPayPointsPost(orderId, purchaseOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orderId 
         * @param {PurchaseOrderRequest} [purchaseOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersOrderIdPayVnpayPost(orderId: string, purchaseOrderRequest?: PurchaseOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<VnPayPurchaseResponse> {
            return localVarFp.apiOrdersOrderIdPayVnpayPost(orderId, purchaseOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersPaymentReturnGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiOrdersPaymentReturnGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 
     * @param {Array<string>} [itemIds] 
     * @param {number} [destinationDistrictId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrdersCalculateShippingFeeGet(itemIds?: Array<string>, destinationDistrictId?: number, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrdersCalculateShippingFeeGet(itemIds, destinationDistrictId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [shopId] 
     * @param {OrderStatus} [status] 
     * @param {PaymentMethod} [paymentMethod] 
     * @param {string} [orderCode] 
     * @param {boolean} [isFromAuction] 
     * @param {boolean} [isPointPackage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrdersGet(pageNumber?: number, pageSize?: number, shopId?: string, status?: OrderStatus, paymentMethod?: PaymentMethod, orderCode?: string, isFromAuction?: boolean, isPointPackage?: boolean, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrdersGet(pageNumber, pageSize, shopId, status, paymentMethod, orderCode, isFromAuction, isPointPackage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrdersOrderIdCancelPut(orderId: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrdersOrderIdCancelPut(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrdersOrderIdCancelbyadminPut(orderId: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrdersOrderIdCancelbyadminPut(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrdersOrderIdGet(orderId: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrdersOrderIdGet(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} orderId 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [shopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrdersOrderIdOrderlineitemsGet(orderId: string, pageNumber?: number, pageSize?: number, shopId?: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrdersOrderIdOrderlineitemsGet(orderId, pageNumber, pageSize, shopId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} orderId 
     * @param {PurchaseOrderRequest} [purchaseOrderRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrdersOrderIdPayPointsPost(orderId: string, purchaseOrderRequest?: PurchaseOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrdersOrderIdPayPointsPost(orderId, purchaseOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} orderId 
     * @param {PurchaseOrderRequest} [purchaseOrderRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrdersOrderIdPayVnpayPost(orderId: string, purchaseOrderRequest?: PurchaseOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrdersOrderIdPayVnpayPost(orderId, purchaseOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrdersPaymentReturnGet(options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrdersPaymentReturnGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderLineItemApi - axios parameter creator
 * @export
 */
export const OrderLineItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} orderLineItemId 
         * @param {FashionItemStatus} [itemStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderlineitemsOrderLineItemIdConfirmPendingOrderPut: async (orderLineItemId: string, itemStatus?: FashionItemStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderLineItemId' is not null or undefined
            assertParamExists('apiOrderlineitemsOrderLineItemIdConfirmPendingOrderPut', 'orderLineItemId', orderLineItemId)
            const localVarPath = `/api/orderlineitems/{orderLineItemId}/confirm-pending-order`
                .replace(`{${"orderLineItemId"}}`, encodeURIComponent(String(orderLineItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (itemStatus !== undefined) {
                localVarQueryParameter['itemStatus'] = itemStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderLineItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderlineitemsOrderLineItemIdGet: async (orderLineItemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderLineItemId' is not null or undefined
            assertParamExists('apiOrderlineitemsOrderLineItemIdGet', 'orderLineItemId', orderLineItemId)
            const localVarPath = `/api/orderlineitems/{orderLineItemId}`
                .replace(`{${"orderLineItemId"}}`, encodeURIComponent(String(orderLineItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderLineItemApi - functional programming interface
 * @export
 */
export const OrderLineItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderLineItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} orderLineItemId 
         * @param {FashionItemStatus} [itemStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderlineitemsOrderLineItemIdConfirmPendingOrderPut(orderLineItemId: string, itemStatus?: FashionItemStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderlineitemsOrderLineItemIdConfirmPendingOrderPut(orderLineItemId, itemStatus, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderLineItemApi.apiOrderlineitemsOrderLineItemIdConfirmPendingOrderPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orderLineItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderlineitemsOrderLineItemIdGet(orderLineItemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderLineItemDetailedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderlineitemsOrderLineItemIdGet(orderLineItemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderLineItemApi.apiOrderlineitemsOrderLineItemIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderLineItemApi - factory interface
 * @export
 */
export const OrderLineItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderLineItemApiFp(configuration)
    return {
        /**
         * 
         * @param {string} orderLineItemId 
         * @param {FashionItemStatus} [itemStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderlineitemsOrderLineItemIdConfirmPendingOrderPut(orderLineItemId: string, itemStatus?: FashionItemStatus, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponseResult> {
            return localVarFp.apiOrderlineitemsOrderLineItemIdConfirmPendingOrderPut(orderLineItemId, itemStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orderLineItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderlineitemsOrderLineItemIdGet(orderLineItemId: string, options?: RawAxiosRequestConfig): AxiosPromise<OrderLineItemDetailedResponse> {
            return localVarFp.apiOrderlineitemsOrderLineItemIdGet(orderLineItemId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderLineItemApi - object-oriented interface
 * @export
 * @class OrderLineItemApi
 * @extends {BaseAPI}
 */
export class OrderLineItemApi extends BaseAPI {
    /**
     * 
     * @param {string} orderLineItemId 
     * @param {FashionItemStatus} [itemStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderLineItemApi
     */
    public apiOrderlineitemsOrderLineItemIdConfirmPendingOrderPut(orderLineItemId: string, itemStatus?: FashionItemStatus, options?: RawAxiosRequestConfig) {
        return OrderLineItemApiFp(this.configuration).apiOrderlineitemsOrderLineItemIdConfirmPendingOrderPut(orderLineItemId, itemStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} orderLineItemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderLineItemApi
     */
    public apiOrderlineitemsOrderLineItemIdGet(orderLineItemId: string, options?: RawAxiosRequestConfig) {
        return OrderLineItemApiFp(this.configuration).apiOrderlineitemsOrderLineItemIdGet(orderLineItemId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PointPackageApi - axios parameter creator
 * @export
 */
export const PointPackageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {Array<PointPackageStatus>} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPointpackagesGet: async (page?: number, pageSize?: number, status?: Array<PointPackageStatus>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pointpackages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (status) {
                localVarQueryParameter['Status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPointpackagesPaymentReturnGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pointpackages/payment-return`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pointPackageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPointpackagesPointPackageIdGet: async (pointPackageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pointPackageId' is not null or undefined
            assertParamExists('apiPointpackagesPointPackageIdGet', 'pointPackageId', pointPackageId)
            const localVarPath = `/api/pointpackages/{pointPackageId}`
                .replace(`{${"pointPackageId"}}`, encodeURIComponent(String(pointPackageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pointPackageId 
         * @param {PurchasePointPackageRequest} [purchasePointPackageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPointpackagesPointPackageIdPurchasePost: async (pointPackageId: string, purchasePointPackageRequest?: PurchasePointPackageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pointPackageId' is not null or undefined
            assertParamExists('apiPointpackagesPointPackageIdPurchasePost', 'pointPackageId', pointPackageId)
            const localVarPath = `/api/pointpackages/{pointPackageId}/purchase`
                .replace(`{${"pointPackageId"}}`, encodeURIComponent(String(pointPackageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchasePointPackageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PointPackageApi - functional programming interface
 * @export
 */
export const PointPackageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PointPackageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {Array<PointPackageStatus>} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPointpackagesGet(page?: number, pageSize?: number, status?: Array<PointPackageStatus>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointPackageListResponsePaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPointpackagesGet(page, pageSize, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PointPackageApi.apiPointpackagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPointpackagesPaymentReturnGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPointpackagesPaymentReturnGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PointPackageApi.apiPointpackagesPaymentReturnGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} pointPackageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPointpackagesPointPackageIdGet(pointPackageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointPackageDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPointpackagesPointPackageIdGet(pointPackageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PointPackageApi.apiPointpackagesPointPackageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} pointPackageId 
         * @param {PurchasePointPackageRequest} [purchasePointPackageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPointpackagesPointPackageIdPurchasePost(pointPackageId: string, purchasePointPackageRequest?: PurchasePointPackageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointPackagePurchaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPointpackagesPointPackageIdPurchasePost(pointPackageId, purchasePointPackageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PointPackageApi.apiPointpackagesPointPackageIdPurchasePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PointPackageApi - factory interface
 * @export
 */
export const PointPackageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PointPackageApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {Array<PointPackageStatus>} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPointpackagesGet(page?: number, pageSize?: number, status?: Array<PointPackageStatus>, options?: RawAxiosRequestConfig): AxiosPromise<PointPackageListResponsePaginationResponse> {
            return localVarFp.apiPointpackagesGet(page, pageSize, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPointpackagesPaymentReturnGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiPointpackagesPaymentReturnGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} pointPackageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPointpackagesPointPackageIdGet(pointPackageId: string, options?: RawAxiosRequestConfig): AxiosPromise<PointPackageDetailResponse> {
            return localVarFp.apiPointpackagesPointPackageIdGet(pointPackageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} pointPackageId 
         * @param {PurchasePointPackageRequest} [purchasePointPackageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPointpackagesPointPackageIdPurchasePost(pointPackageId: string, purchasePointPackageRequest?: PurchasePointPackageRequest, options?: RawAxiosRequestConfig): AxiosPromise<PointPackagePurchaseResponse> {
            return localVarFp.apiPointpackagesPointPackageIdPurchasePost(pointPackageId, purchasePointPackageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PointPackageApi - object-oriented interface
 * @export
 * @class PointPackageApi
 * @extends {BaseAPI}
 */
export class PointPackageApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {Array<PointPackageStatus>} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PointPackageApi
     */
    public apiPointpackagesGet(page?: number, pageSize?: number, status?: Array<PointPackageStatus>, options?: RawAxiosRequestConfig) {
        return PointPackageApiFp(this.configuration).apiPointpackagesGet(page, pageSize, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PointPackageApi
     */
    public apiPointpackagesPaymentReturnGet(options?: RawAxiosRequestConfig) {
        return PointPackageApiFp(this.configuration).apiPointpackagesPaymentReturnGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} pointPackageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PointPackageApi
     */
    public apiPointpackagesPointPackageIdGet(pointPackageId: string, options?: RawAxiosRequestConfig) {
        return PointPackageApiFp(this.configuration).apiPointpackagesPointPackageIdGet(pointPackageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} pointPackageId 
     * @param {PurchasePointPackageRequest} [purchasePointPackageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PointPackageApi
     */
    public apiPointpackagesPointPackageIdPurchasePost(pointPackageId: string, purchasePointPackageRequest?: PurchasePointPackageRequest, options?: RawAxiosRequestConfig) {
        return PointPackageApiFp(this.configuration).apiPointpackagesPointPackageIdPurchasePost(pointPackageId, purchasePointPackageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RefundApi - axios parameter creator
 * @export
 */
export const RefundApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {Array<RefundStatus>} [status] 
         * @param {string} [previousTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRefundsGet: async (pageNumber?: number, pageSize?: number, shopId?: string, status?: Array<RefundStatus>, previousTime?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/refunds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (shopId !== undefined) {
                localVarQueryParameter['ShopId'] = shopId;
            }

            if (status) {
                localVarQueryParameter['Status'] = status;
            }

            if (previousTime !== undefined) {
                localVarQueryParameter['PreviousTime'] = (previousTime as any instanceof Date) ?
                    (previousTime as any).toISOString() :
                    previousTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateRefundRequest} [createRefundRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRefundsPost: async (createRefundRequest?: CreateRefundRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/refunds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRefundRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} refundId 
         * @param {ApprovalRefundRequest} [approvalRefundRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRefundsRefundIdApprovalPut: async (refundId: string, approvalRefundRequest?: ApprovalRefundRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refundId' is not null or undefined
            assertParamExists('apiRefundsRefundIdApprovalPut', 'refundId', refundId)
            const localVarPath = `/api/refunds/{refundId}/approval`
                .replace(`{${"refundId"}}`, encodeURIComponent(String(refundId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(approvalRefundRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} refundId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRefundsRefundIdConfirmReceivedAndRefundPut: async (refundId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refundId' is not null or undefined
            assertParamExists('apiRefundsRefundIdConfirmReceivedAndRefundPut', 'refundId', refundId)
            const localVarPath = `/api/refunds/{refundId}/confirm-received-and-refund`
                .replace(`{${"refundId"}}`, encodeURIComponent(String(refundId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} refundId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRefundsRefundIdGet: async (refundId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refundId' is not null or undefined
            assertParamExists('apiRefundsRefundIdGet', 'refundId', refundId)
            const localVarPath = `/api/refunds/{refundId}`
                .replace(`{${"refundId"}}`, encodeURIComponent(String(refundId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RefundApi - functional programming interface
 * @export
 */
export const RefundApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RefundApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {Array<RefundStatus>} [status] 
         * @param {string} [previousTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRefundsGet(pageNumber?: number, pageSize?: number, shopId?: string, status?: Array<RefundStatus>, previousTime?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefundResponsePaginationResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRefundsGet(pageNumber, pageSize, shopId, status, previousTime, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RefundApi.apiRefundsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateRefundRequest} [createRefundRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRefundsPost(createRefundRequest?: CreateRefundRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefundResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRefundsPost(createRefundRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RefundApi.apiRefundsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} refundId 
         * @param {ApprovalRefundRequest} [approvalRefundRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRefundsRefundIdApprovalPut(refundId: string, approvalRefundRequest?: ApprovalRefundRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefundResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRefundsRefundIdApprovalPut(refundId, approvalRefundRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RefundApi.apiRefundsRefundIdApprovalPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} refundId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRefundsRefundIdConfirmReceivedAndRefundPut(refundId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefundResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRefundsRefundIdConfirmReceivedAndRefundPut(refundId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RefundApi.apiRefundsRefundIdConfirmReceivedAndRefundPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} refundId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRefundsRefundIdGet(refundId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefundResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRefundsRefundIdGet(refundId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RefundApi.apiRefundsRefundIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RefundApi - factory interface
 * @export
 */
export const RefundApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RefundApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {Array<RefundStatus>} [status] 
         * @param {string} [previousTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRefundsGet(pageNumber?: number, pageSize?: number, shopId?: string, status?: Array<RefundStatus>, previousTime?: string, options?: RawAxiosRequestConfig): AxiosPromise<RefundResponsePaginationResponseResult> {
            return localVarFp.apiRefundsGet(pageNumber, pageSize, shopId, status, previousTime, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateRefundRequest} [createRefundRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRefundsPost(createRefundRequest?: CreateRefundRequest, options?: RawAxiosRequestConfig): AxiosPromise<RefundResponseResult> {
            return localVarFp.apiRefundsPost(createRefundRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} refundId 
         * @param {ApprovalRefundRequest} [approvalRefundRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRefundsRefundIdApprovalPut(refundId: string, approvalRefundRequest?: ApprovalRefundRequest, options?: RawAxiosRequestConfig): AxiosPromise<RefundResponseResult> {
            return localVarFp.apiRefundsRefundIdApprovalPut(refundId, approvalRefundRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} refundId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRefundsRefundIdConfirmReceivedAndRefundPut(refundId: string, options?: RawAxiosRequestConfig): AxiosPromise<RefundResponseResult> {
            return localVarFp.apiRefundsRefundIdConfirmReceivedAndRefundPut(refundId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} refundId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRefundsRefundIdGet(refundId: string, options?: RawAxiosRequestConfig): AxiosPromise<RefundResponseResult> {
            return localVarFp.apiRefundsRefundIdGet(refundId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RefundApi - object-oriented interface
 * @export
 * @class RefundApi
 * @extends {BaseAPI}
 */
export class RefundApi extends BaseAPI {
    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [shopId] 
     * @param {Array<RefundStatus>} [status] 
     * @param {string} [previousTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundApi
     */
    public apiRefundsGet(pageNumber?: number, pageSize?: number, shopId?: string, status?: Array<RefundStatus>, previousTime?: string, options?: RawAxiosRequestConfig) {
        return RefundApiFp(this.configuration).apiRefundsGet(pageNumber, pageSize, shopId, status, previousTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateRefundRequest} [createRefundRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundApi
     */
    public apiRefundsPost(createRefundRequest?: CreateRefundRequest, options?: RawAxiosRequestConfig) {
        return RefundApiFp(this.configuration).apiRefundsPost(createRefundRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} refundId 
     * @param {ApprovalRefundRequest} [approvalRefundRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundApi
     */
    public apiRefundsRefundIdApprovalPut(refundId: string, approvalRefundRequest?: ApprovalRefundRequest, options?: RawAxiosRequestConfig) {
        return RefundApiFp(this.configuration).apiRefundsRefundIdApprovalPut(refundId, approvalRefundRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} refundId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundApi
     */
    public apiRefundsRefundIdConfirmReceivedAndRefundPut(refundId: string, options?: RawAxiosRequestConfig) {
        return RefundApiFp(this.configuration).apiRefundsRefundIdConfirmReceivedAndRefundPut(refundId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} refundId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundApi
     */
    public apiRefundsRefundIdGet(refundId: string, options?: RawAxiosRequestConfig) {
        return RefundApiFp(this.configuration).apiRefundsRefundIdGet(refundId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShopApi - axios parameter creator
 * @export
 */
export const ShopApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/shops`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsGhnshopsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/shops/ghnshops`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GHNShopCreateRequest} [gHNShopCreateRequest] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiShopsGhnshopsPost: async (gHNShopCreateRequest?: GHNShopCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/shops/ghnshops`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gHNShopCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateShopRequest} [createShopRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsPost: async (createShopRequest?: CreateShopRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/shops`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createShopRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} shopId 
         * @param {CreateConsignSaleByShopRequest} [createConsignSaleByShopRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdConsignsalesPost: async (shopId: string, createConsignSaleByShopRequest?: CreateConsignSaleByShopRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('apiShopsShopIdConsignsalesPost', 'shopId', shopId)
            const localVarPath = `/api/shops/{shopId}/consignsales`
                .replace(`{${"shopId"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createConsignSaleByShopRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} shopId 
         * @param {FashionItemDetailRequest} [fashionItemDetailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdFashionitemsPost: async (shopId: string, fashionItemDetailRequest?: FashionItemDetailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('apiShopsShopIdFashionitemsPost', 'shopId', shopId)
            const localVarPath = `/api/shops/{shopId}/fashionitems`
                .replace(`{${"shopId"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fashionItemDetailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} shopId 
         * @param {CreateFeedbackRequest} [createFeedbackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdFeedbacksPost: async (shopId: string, createFeedbackRequest?: CreateFeedbackRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('apiShopsShopIdFeedbacksPost', 'shopId', shopId)
            const localVarPath = `/api/shops/{shopId}/feedbacks`
                .replace(`{${"shopId"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFeedbackRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} shopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdGet: async (shopId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('apiShopsShopIdGet', 'shopId', shopId)
            const localVarPath = `/api/shops/{shopId}`
                .replace(`{${"shopId"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} shopId 
         * @param {TransactionRequest} [transactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdOfflineTransactionsGet: async (shopId: string, transactionRequest?: TransactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('apiShopsShopIdOfflineTransactionsGet', 'shopId', shopId)
            const localVarPath = `/api/shops/{shopId}/offline-transactions`
                .replace(`{${"shopId"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} shopId 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdOrdersOrderIdConfirmDeliveriedPut: async (shopId: string, orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('apiShopsShopIdOrdersOrderIdConfirmDeliveriedPut', 'shopId', shopId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiShopsShopIdOrdersOrderIdConfirmDeliveriedPut', 'orderId', orderId)
            const localVarPath = `/api/shops/{shopId}/orders/{OrderId}/confirm-deliveried`
                .replace(`{${"shopId"}}`, encodeURIComponent(String(shopId)))
                .replace(`{${"OrderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} shopId 
         * @param {string} orderId 
         * @param {PayOrderWithCashRequest} [payOrderWithCashRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdOrdersOrderIdPayWithCashPost: async (shopId: string, orderId: string, payOrderWithCashRequest?: PayOrderWithCashRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('apiShopsShopIdOrdersOrderIdPayWithCashPost', 'shopId', shopId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiShopsShopIdOrdersOrderIdPayWithCashPost', 'orderId', orderId)
            const localVarPath = `/api/shops/{shopId}/orders/{orderId}/pay-with-cash`
                .replace(`{${"shopId"}}`, encodeURIComponent(String(shopId)))
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payOrderWithCashRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} shopId 
         * @param {CreateOrderRequest} [createOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdOrdersPost: async (shopId: string, createOrderRequest?: CreateOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('apiShopsShopIdOrdersPost', 'shopId', shopId)
            const localVarPath = `/api/shops/{shopId}/orders`
                .replace(`{${"shopId"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} shopId 
         * @param {CreateRefundRequest} [createRefundRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdRefundsPost: async (shopId: string, createRefundRequest?: CreateRefundRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('apiShopsShopIdRefundsPost', 'shopId', shopId)
            const localVarPath = `/api/shops/{shopId}/refunds`
                .replace(`{${"shopId"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRefundRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShopApi - functional programming interface
 * @export
 */
export const ShopApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShopApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShopsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopDetailResponseListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShopsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopApi.apiShopsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShopsGhnshopsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GHNShopListGHNApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShopsGhnshopsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopApi.apiShopsGhnshopsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GHNShopCreateRequest} [gHNShopCreateRequest] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async apiShopsGhnshopsPost(gHNShopCreateRequest?: GHNShopCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GHNShopCreateResponseGHNApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShopsGhnshopsPost(gHNShopCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopApi.apiShopsGhnshopsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateShopRequest} [createShopRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShopsPost(createShopRequest?: CreateShopRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateShopResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShopsPost(createShopRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopApi.apiShopsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} shopId 
         * @param {CreateConsignSaleByShopRequest} [createConsignSaleByShopRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShopsShopIdConsignsalesPost(shopId: string, createConsignSaleByShopRequest?: CreateConsignSaleByShopRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsignSaleDetailedResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShopsShopIdConsignsalesPost(shopId, createConsignSaleByShopRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopApi.apiShopsShopIdConsignsalesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} shopId 
         * @param {FashionItemDetailRequest} [fashionItemDetailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShopsShopIdFashionitemsPost(shopId: string, fashionItemDetailRequest?: FashionItemDetailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FashionItemDetailResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShopsShopIdFashionitemsPost(shopId, fashionItemDetailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopApi.apiShopsShopIdFashionitemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} shopId 
         * @param {CreateFeedbackRequest} [createFeedbackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShopsShopIdFeedbacksPost(shopId: string, createFeedbackRequest?: CreateFeedbackRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShopsShopIdFeedbacksPost(shopId, createFeedbackRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopApi.apiShopsShopIdFeedbacksPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} shopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShopsShopIdGet(shopId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopDetailResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShopsShopIdGet(shopId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopApi.apiShopsShopIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} shopId 
         * @param {TransactionRequest} [transactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShopsShopIdOfflineTransactionsGet(shopId: string, transactionRequest?: TransactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponsePaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShopsShopIdOfflineTransactionsGet(shopId, transactionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopApi.apiShopsShopIdOfflineTransactionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} shopId 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShopsShopIdOrdersOrderIdConfirmDeliveriedPut(shopId: string, orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShopsShopIdOrdersOrderIdConfirmDeliveriedPut(shopId, orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopApi.apiShopsShopIdOrdersOrderIdConfirmDeliveriedPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} shopId 
         * @param {string} orderId 
         * @param {PayOrderWithCashRequest} [payOrderWithCashRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShopsShopIdOrdersOrderIdPayWithCashPost(shopId: string, orderId: string, payOrderWithCashRequest?: PayOrderWithCashRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayOrderWithCashResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShopsShopIdOrdersOrderIdPayWithCashPost(shopId, orderId, payOrderWithCashRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopApi.apiShopsShopIdOrdersOrderIdPayWithCashPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} shopId 
         * @param {CreateOrderRequest} [createOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShopsShopIdOrdersPost(shopId: string, createOrderRequest?: CreateOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShopsShopIdOrdersPost(shopId, createOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopApi.apiShopsShopIdOrdersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} shopId 
         * @param {CreateRefundRequest} [createRefundRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShopsShopIdRefundsPost(shopId: string, createRefundRequest?: CreateRefundRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefundResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShopsShopIdRefundsPost(shopId, createRefundRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopApi.apiShopsShopIdRefundsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ShopApi - factory interface
 * @export
 */
export const ShopApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShopApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsGet(options?: RawAxiosRequestConfig): AxiosPromise<ShopDetailResponseListResult> {
            return localVarFp.apiShopsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsGhnshopsGet(options?: RawAxiosRequestConfig): AxiosPromise<GHNShopListGHNApiResponse> {
            return localVarFp.apiShopsGhnshopsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GHNShopCreateRequest} [gHNShopCreateRequest] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiShopsGhnshopsPost(gHNShopCreateRequest?: GHNShopCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<GHNShopCreateResponseGHNApiResponse> {
            return localVarFp.apiShopsGhnshopsPost(gHNShopCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateShopRequest} [createShopRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsPost(createShopRequest?: CreateShopRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateShopResponse> {
            return localVarFp.apiShopsPost(createShopRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} shopId 
         * @param {CreateConsignSaleByShopRequest} [createConsignSaleByShopRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdConsignsalesPost(shopId: string, createConsignSaleByShopRequest?: CreateConsignSaleByShopRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConsignSaleDetailedResponseResult> {
            return localVarFp.apiShopsShopIdConsignsalesPost(shopId, createConsignSaleByShopRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} shopId 
         * @param {FashionItemDetailRequest} [fashionItemDetailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdFashionitemsPost(shopId: string, fashionItemDetailRequest?: FashionItemDetailRequest, options?: RawAxiosRequestConfig): AxiosPromise<FashionItemDetailResponseResult> {
            return localVarFp.apiShopsShopIdFashionitemsPost(shopId, fashionItemDetailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} shopId 
         * @param {CreateFeedbackRequest} [createFeedbackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdFeedbacksPost(shopId: string, createFeedbackRequest?: CreateFeedbackRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.apiShopsShopIdFeedbacksPost(shopId, createFeedbackRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} shopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdGet(shopId: string, options?: RawAxiosRequestConfig): AxiosPromise<ShopDetailResponseResult> {
            return localVarFp.apiShopsShopIdGet(shopId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} shopId 
         * @param {TransactionRequest} [transactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdOfflineTransactionsGet(shopId: string, transactionRequest?: TransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransactionResponsePaginationResponse> {
            return localVarFp.apiShopsShopIdOfflineTransactionsGet(shopId, transactionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} shopId 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdOrdersOrderIdConfirmDeliveriedPut(shopId: string, orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponseResult> {
            return localVarFp.apiShopsShopIdOrdersOrderIdConfirmDeliveriedPut(shopId, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} shopId 
         * @param {string} orderId 
         * @param {PayOrderWithCashRequest} [payOrderWithCashRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdOrdersOrderIdPayWithCashPost(shopId: string, orderId: string, payOrderWithCashRequest?: PayOrderWithCashRequest, options?: RawAxiosRequestConfig): AxiosPromise<PayOrderWithCashResponse> {
            return localVarFp.apiShopsShopIdOrdersOrderIdPayWithCashPost(shopId, orderId, payOrderWithCashRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} shopId 
         * @param {CreateOrderRequest} [createOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdOrdersPost(shopId: string, createOrderRequest?: CreateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponseResult> {
            return localVarFp.apiShopsShopIdOrdersPost(shopId, createOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} shopId 
         * @param {CreateRefundRequest} [createRefundRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShopsShopIdRefundsPost(shopId: string, createRefundRequest?: CreateRefundRequest, options?: RawAxiosRequestConfig): AxiosPromise<RefundResponseResult> {
            return localVarFp.apiShopsShopIdRefundsPost(shopId, createRefundRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShopApi - object-oriented interface
 * @export
 * @class ShopApi
 * @extends {BaseAPI}
 */
export class ShopApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopApi
     */
    public apiShopsGet(options?: RawAxiosRequestConfig) {
        return ShopApiFp(this.configuration).apiShopsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopApi
     */
    public apiShopsGhnshopsGet(options?: RawAxiosRequestConfig) {
        return ShopApiFp(this.configuration).apiShopsGhnshopsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GHNShopCreateRequest} [gHNShopCreateRequest] 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ShopApi
     */
    public apiShopsGhnshopsPost(gHNShopCreateRequest?: GHNShopCreateRequest, options?: RawAxiosRequestConfig) {
        return ShopApiFp(this.configuration).apiShopsGhnshopsPost(gHNShopCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateShopRequest} [createShopRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopApi
     */
    public apiShopsPost(createShopRequest?: CreateShopRequest, options?: RawAxiosRequestConfig) {
        return ShopApiFp(this.configuration).apiShopsPost(createShopRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} shopId 
     * @param {CreateConsignSaleByShopRequest} [createConsignSaleByShopRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopApi
     */
    public apiShopsShopIdConsignsalesPost(shopId: string, createConsignSaleByShopRequest?: CreateConsignSaleByShopRequest, options?: RawAxiosRequestConfig) {
        return ShopApiFp(this.configuration).apiShopsShopIdConsignsalesPost(shopId, createConsignSaleByShopRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} shopId 
     * @param {FashionItemDetailRequest} [fashionItemDetailRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopApi
     */
    public apiShopsShopIdFashionitemsPost(shopId: string, fashionItemDetailRequest?: FashionItemDetailRequest, options?: RawAxiosRequestConfig) {
        return ShopApiFp(this.configuration).apiShopsShopIdFashionitemsPost(shopId, fashionItemDetailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} shopId 
     * @param {CreateFeedbackRequest} [createFeedbackRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopApi
     */
    public apiShopsShopIdFeedbacksPost(shopId: string, createFeedbackRequest?: CreateFeedbackRequest, options?: RawAxiosRequestConfig) {
        return ShopApiFp(this.configuration).apiShopsShopIdFeedbacksPost(shopId, createFeedbackRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} shopId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopApi
     */
    public apiShopsShopIdGet(shopId: string, options?: RawAxiosRequestConfig) {
        return ShopApiFp(this.configuration).apiShopsShopIdGet(shopId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} shopId 
     * @param {TransactionRequest} [transactionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopApi
     */
    public apiShopsShopIdOfflineTransactionsGet(shopId: string, transactionRequest?: TransactionRequest, options?: RawAxiosRequestConfig) {
        return ShopApiFp(this.configuration).apiShopsShopIdOfflineTransactionsGet(shopId, transactionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} shopId 
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopApi
     */
    public apiShopsShopIdOrdersOrderIdConfirmDeliveriedPut(shopId: string, orderId: string, options?: RawAxiosRequestConfig) {
        return ShopApiFp(this.configuration).apiShopsShopIdOrdersOrderIdConfirmDeliveriedPut(shopId, orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} shopId 
     * @param {string} orderId 
     * @param {PayOrderWithCashRequest} [payOrderWithCashRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopApi
     */
    public apiShopsShopIdOrdersOrderIdPayWithCashPost(shopId: string, orderId: string, payOrderWithCashRequest?: PayOrderWithCashRequest, options?: RawAxiosRequestConfig) {
        return ShopApiFp(this.configuration).apiShopsShopIdOrdersOrderIdPayWithCashPost(shopId, orderId, payOrderWithCashRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} shopId 
     * @param {CreateOrderRequest} [createOrderRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopApi
     */
    public apiShopsShopIdOrdersPost(shopId: string, createOrderRequest?: CreateOrderRequest, options?: RawAxiosRequestConfig) {
        return ShopApiFp(this.configuration).apiShopsShopIdOrdersPost(shopId, createOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} shopId 
     * @param {CreateRefundRequest} [createRefundRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopApi
     */
    public apiShopsShopIdRefundsPost(shopId: string, createRefundRequest?: CreateRefundRequest, options?: RawAxiosRequestConfig) {
        return ShopApiFp(this.configuration).apiShopsShopIdRefundsPost(shopId, createRefundRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestingAdminGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/testing/admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestingStaffGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/testing/staff`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestingUserGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/testing/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTestingAdminGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTestingAdminGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestApi.apiTestingAdminGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTestingStaffGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTestingStaffGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestApi.apiTestingStaffGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTestingUserGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTestingUserGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestApi.apiTestingUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestingAdminGet(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiTestingAdminGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestingStaffGet(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiTestingStaffGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestingUserGet(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiTestingUserGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public apiTestingAdminGet(options?: RawAxiosRequestConfig) {
        return TestApiFp(this.configuration).apiTestingAdminGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public apiTestingStaffGet(options?: RawAxiosRequestConfig) {
        return TestApiFp(this.configuration).apiTestingStaffGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public apiTestingUserGet(options?: RawAxiosRequestConfig) {
        return TestApiFp(this.configuration).apiTestingUserGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TransactionApi - axios parameter creator
 * @export
 */
export const TransactionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {TransactionType} [transactionType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionsGet: async (page?: number, pageSize?: number, shopId?: string, transactionType?: TransactionType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (shopId !== undefined) {
                localVarQueryParameter['ShopId'] = shopId;
            }

            if (transactionType !== undefined) {
                localVarQueryParameter['TransactionType'] = transactionType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionApi - functional programming interface
 * @export
 */
export const TransactionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {TransactionType} [transactionType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTransactionsGet(page?: number, pageSize?: number, shopId?: string, transactionType?: TransactionType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponsePaginationResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTransactionsGet(page, pageSize, shopId, transactionType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionApi.apiTransactionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransactionApi - factory interface
 * @export
 */
export const TransactionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [shopId] 
         * @param {TransactionType} [transactionType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransactionsGet(page?: number, pageSize?: number, shopId?: string, transactionType?: TransactionType, options?: RawAxiosRequestConfig): AxiosPromise<TransactionResponsePaginationResponseResult> {
            return localVarFp.apiTransactionsGet(page, pageSize, shopId, transactionType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionApi - object-oriented interface
 * @export
 * @class TransactionApi
 * @extends {BaseAPI}
 */
export class TransactionApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [shopId] 
     * @param {TransactionType} [transactionType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public apiTransactionsGet(page?: number, pageSize?: number, shopId?: string, transactionType?: TransactionType, options?: RawAxiosRequestConfig) {
        return TransactionApiFp(this.configuration).apiTransactionsGet(page, pageSize, shopId, transactionType, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WithdrawApi - axios parameter creator
 * @export
 */
export const WithdrawApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} withdrawId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWithdrawsWithdrawIdCompleteRequestPut: async (withdrawId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'withdrawId' is not null or undefined
            assertParamExists('apiWithdrawsWithdrawIdCompleteRequestPut', 'withdrawId', withdrawId)
            const localVarPath = `/api/withdraws/{withdrawId}/complete-request`
                .replace(`{${"withdrawId"}}`, encodeURIComponent(String(withdrawId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WithdrawApi - functional programming interface
 * @export
 */
export const WithdrawApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WithdrawApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} withdrawId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWithdrawsWithdrawIdCompleteRequestPut(withdrawId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompleteWithdrawResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWithdrawsWithdrawIdCompleteRequestPut(withdrawId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WithdrawApi.apiWithdrawsWithdrawIdCompleteRequestPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WithdrawApi - factory interface
 * @export
 */
export const WithdrawApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WithdrawApiFp(configuration)
    return {
        /**
         * 
         * @param {string} withdrawId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWithdrawsWithdrawIdCompleteRequestPut(withdrawId: string, options?: RawAxiosRequestConfig): AxiosPromise<CompleteWithdrawResponse> {
            return localVarFp.apiWithdrawsWithdrawIdCompleteRequestPut(withdrawId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WithdrawApi - object-oriented interface
 * @export
 * @class WithdrawApi
 * @extends {BaseAPI}
 */
export class WithdrawApi extends BaseAPI {
    /**
     * 
     * @param {string} withdrawId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WithdrawApi
     */
    public apiWithdrawsWithdrawIdCompleteRequestPut(withdrawId: string, options?: RawAxiosRequestConfig) {
        return WithdrawApiFp(this.configuration).apiWithdrawsWithdrawIdCompleteRequestPut(withdrawId, options).then((request) => request(this.axios, this.basePath));
    }
}



